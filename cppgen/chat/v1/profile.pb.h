// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fprofile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fprofile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fprofile_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class GetUserMetadataRequest;
class GetUserMetadataRequestDefaultTypeInternal;
extern GetUserMetadataRequestDefaultTypeInternal _GetUserMetadataRequest_default_instance_;
class GetUserMetadataResponse;
class GetUserMetadataResponseDefaultTypeInternal;
extern GetUserMetadataResponseDefaultTypeInternal _GetUserMetadataResponse_default_instance_;
class GetUserRequest;
class GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class GetUserResponse;
class GetUserResponseDefaultTypeInternal;
extern GetUserResponseDefaultTypeInternal _GetUserResponse_default_instance_;
class ProfileUpdateRequest;
class ProfileUpdateRequestDefaultTypeInternal;
extern ProfileUpdateRequestDefaultTypeInternal _ProfileUpdateRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::GetUserMetadataRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserMetadataRequest>(Arena*);
template<> ::protocol::chat::v1::GetUserMetadataResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserMetadataResponse>(Arena*);
template<> ::protocol::chat::v1::GetUserRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserRequest>(Arena*);
template<> ::protocol::chat::v1::GetUserResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserResponse>(Arena*);
template<> ::protocol::chat::v1::ProfileUpdateRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::ProfileUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class GetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {};
  virtual ~GetUserRequest();

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRequest* New() const final {
    return CreateMaybeMessage<GetUserRequest>(nullptr);
  }

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRequest& from);
  void MergeFrom(const GetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fprofile_2eproto);
    return ::descriptor_table_chat_2fv1_2fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1 [jstype = JS_STRING];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fprofile_2eproto;
};
// -------------------------------------------------------------------

class GetUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserResponse) */ {
 public:
  inline GetUserResponse() : GetUserResponse(nullptr) {};
  virtual ~GetUserResponse();

  GetUserResponse(const GetUserResponse& from);
  GetUserResponse(GetUserResponse&& from) noexcept
    : GetUserResponse() {
    *this = ::std::move(from);
  }

  inline GetUserResponse& operator=(const GetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserResponse& operator=(GetUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserResponse*>(
               &_GetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetUserResponse& a, GetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserResponse* New() const final {
    return CreateMaybeMessage<GetUserResponse>(nullptr);
  }

  GetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserResponse& from);
  void MergeFrom(const GetUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserResponse";
  }
  protected:
  explicit GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fprofile_2eproto);
    return ::descriptor_table_chat_2fv1_2fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserAvatarFieldNumber = 2,
    kUserStatusFieldNumber = 3,
    kIsBotFieldNumber = 4,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_name(
      std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_avatar = 2;
  void clear_user_avatar();
  const std::string& user_avatar() const;
  void set_user_avatar(const std::string& value);
  void set_user_avatar(std::string&& value);
  void set_user_avatar(const char* value);
  void set_user_avatar(const char* value, size_t size);
  std::string* mutable_user_avatar();
  std::string* release_user_avatar();
  void set_allocated_user_avatar(std::string* user_avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_avatar(
      std::string* user_avatar);
  private:
  const std::string& _internal_user_avatar() const;
  void _internal_set_user_avatar(const std::string& value);
  std::string* _internal_mutable_user_avatar();
  public:

  // .protocol.harmonytypes.v1.UserStatus user_status = 3;
  void clear_user_status();
  ::protocol::harmonytypes::v1::UserStatus user_status() const;
  void set_user_status(::protocol::harmonytypes::v1::UserStatus value);
  private:
  ::protocol::harmonytypes::v1::UserStatus _internal_user_status() const;
  void _internal_set_user_status(::protocol::harmonytypes::v1::UserStatus value);
  public:

  // bool is_bot = 4;
  void clear_is_bot();
  bool is_bot() const;
  void set_is_bot(bool value);
  private:
  bool _internal_is_bot() const;
  void _internal_set_is_bot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_avatar_;
  int user_status_;
  bool is_bot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fprofile_2eproto;
};
// -------------------------------------------------------------------

class GetUserMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserMetadataRequest) */ {
 public:
  inline GetUserMetadataRequest() : GetUserMetadataRequest(nullptr) {};
  virtual ~GetUserMetadataRequest();

  GetUserMetadataRequest(const GetUserMetadataRequest& from);
  GetUserMetadataRequest(GetUserMetadataRequest&& from) noexcept
    : GetUserMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetUserMetadataRequest& operator=(const GetUserMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserMetadataRequest& operator=(GetUserMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserMetadataRequest*>(
               &_GetUserMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUserMetadataRequest& a, GetUserMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserMetadataRequest* New() const final {
    return CreateMaybeMessage<GetUserMetadataRequest>(nullptr);
  }

  GetUserMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserMetadataRequest& from);
  void MergeFrom(const GetUserMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserMetadataRequest";
  }
  protected:
  explicit GetUserMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fprofile_2eproto);
    return ::descriptor_table_chat_2fv1_2fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
  };
  // string app_id = 1;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fprofile_2eproto;
};
// -------------------------------------------------------------------

class GetUserMetadataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserMetadataResponse) */ {
 public:
  inline GetUserMetadataResponse() : GetUserMetadataResponse(nullptr) {};
  virtual ~GetUserMetadataResponse();

  GetUserMetadataResponse(const GetUserMetadataResponse& from);
  GetUserMetadataResponse(GetUserMetadataResponse&& from) noexcept
    : GetUserMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetUserMetadataResponse& operator=(const GetUserMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserMetadataResponse& operator=(GetUserMetadataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserMetadataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserMetadataResponse*>(
               &_GetUserMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserMetadataResponse& a, GetUserMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserMetadataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserMetadataResponse* New() const final {
    return CreateMaybeMessage<GetUserMetadataResponse>(nullptr);
  }

  GetUserMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserMetadataResponse& from);
  void MergeFrom(const GetUserMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserMetadataResponse";
  }
  protected:
  explicit GetUserMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fprofile_2eproto);
    return ::descriptor_table_chat_2fv1_2fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // string metadata = 1;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metadata(
      std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fprofile_2eproto;
};
// -------------------------------------------------------------------

class ProfileUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.ProfileUpdateRequest) */ {
 public:
  inline ProfileUpdateRequest() : ProfileUpdateRequest(nullptr) {};
  virtual ~ProfileUpdateRequest();

  ProfileUpdateRequest(const ProfileUpdateRequest& from);
  ProfileUpdateRequest(ProfileUpdateRequest&& from) noexcept
    : ProfileUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ProfileUpdateRequest& operator=(const ProfileUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileUpdateRequest& operator=(ProfileUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileUpdateRequest*>(
               &_ProfileUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfileUpdateRequest& a, ProfileUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileUpdateRequest* New() const final {
    return CreateMaybeMessage<ProfileUpdateRequest>(nullptr);
  }

  ProfileUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileUpdateRequest& from);
  void MergeFrom(const ProfileUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.ProfileUpdateRequest";
  }
  protected:
  explicit ProfileUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fprofile_2eproto);
    return ::descriptor_table_chat_2fv1_2fprofile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewUsernameFieldNumber = 1,
    kNewAvatarFieldNumber = 3,
    kUpdateUsernameFieldNumber = 2,
    kUpdateAvatarFieldNumber = 4,
    kUpdateStatusFieldNumber = 6,
    kIsBotFieldNumber = 7,
    kNewStatusFieldNumber = 5,
    kUpdateIsBotFieldNumber = 8,
  };
  // string new_username = 1;
  void clear_new_username();
  const std::string& new_username() const;
  void set_new_username(const std::string& value);
  void set_new_username(std::string&& value);
  void set_new_username(const char* value);
  void set_new_username(const char* value, size_t size);
  std::string* mutable_new_username();
  std::string* release_new_username();
  void set_allocated_new_username(std::string* new_username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_username(
      std::string* new_username);
  private:
  const std::string& _internal_new_username() const;
  void _internal_set_new_username(const std::string& value);
  std::string* _internal_mutable_new_username();
  public:

  // string new_avatar = 3;
  void clear_new_avatar();
  const std::string& new_avatar() const;
  void set_new_avatar(const std::string& value);
  void set_new_avatar(std::string&& value);
  void set_new_avatar(const char* value);
  void set_new_avatar(const char* value, size_t size);
  std::string* mutable_new_avatar();
  std::string* release_new_avatar();
  void set_allocated_new_avatar(std::string* new_avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_avatar(
      std::string* new_avatar);
  private:
  const std::string& _internal_new_avatar() const;
  void _internal_set_new_avatar(const std::string& value);
  std::string* _internal_mutable_new_avatar();
  public:

  // bool update_username = 2;
  void clear_update_username();
  bool update_username() const;
  void set_update_username(bool value);
  private:
  bool _internal_update_username() const;
  void _internal_set_update_username(bool value);
  public:

  // bool update_avatar = 4;
  void clear_update_avatar();
  bool update_avatar() const;
  void set_update_avatar(bool value);
  private:
  bool _internal_update_avatar() const;
  void _internal_set_update_avatar(bool value);
  public:

  // bool update_status = 6;
  void clear_update_status();
  bool update_status() const;
  void set_update_status(bool value);
  private:
  bool _internal_update_status() const;
  void _internal_set_update_status(bool value);
  public:

  // bool is_bot = 7;
  void clear_is_bot();
  bool is_bot() const;
  void set_is_bot(bool value);
  private:
  bool _internal_is_bot() const;
  void _internal_set_is_bot(bool value);
  public:

  // .protocol.harmonytypes.v1.UserStatus new_status = 5;
  void clear_new_status();
  ::protocol::harmonytypes::v1::UserStatus new_status() const;
  void set_new_status(::protocol::harmonytypes::v1::UserStatus value);
  private:
  ::protocol::harmonytypes::v1::UserStatus _internal_new_status() const;
  void _internal_set_new_status(::protocol::harmonytypes::v1::UserStatus value);
  public:

  // bool update_is_bot = 8;
  void clear_update_is_bot();
  bool update_is_bot() const;
  void set_update_is_bot(bool value);
  private:
  bool _internal_update_is_bot() const;
  void _internal_set_update_is_bot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.ProfileUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_avatar_;
  bool update_username_;
  bool update_avatar_;
  bool update_status_;
  bool is_bot_;
  int new_status_;
  bool update_is_bot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetUserRequest

// uint64 user_id = 1 [jstype = JS_STRING];
inline void GetUserRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserRequest.user_id)
  return _internal_user_id();
}
inline void GetUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void GetUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserRequest.user_id)
}

// -------------------------------------------------------------------

// GetUserResponse

// string user_name = 1;
inline void GetUserResponse::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserResponse::user_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserResponse.user_name)
  return _internal_user_name();
}
inline void GetUserResponse::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserResponse.user_name)
}
inline std::string* GetUserResponse::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetUserResponse.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& GetUserResponse::_internal_user_name() const {
  return user_name_.Get();
}
inline void GetUserResponse::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserResponse::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetUserResponse.user_name)
}
inline void GetUserResponse::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetUserResponse.user_name)
}
inline void GetUserResponse::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetUserResponse.user_name)
}
inline std::string* GetUserResponse::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserResponse::release_user_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetUserResponse.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserResponse::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetUserResponse.user_name)
}
inline std::string* GetUserResponse::unsafe_arena_release_user_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetUserResponse.user_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserResponse::unsafe_arena_set_allocated_user_name(
    std::string* user_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetUserResponse.user_name)
}

// string user_avatar = 2;
inline void GetUserResponse::clear_user_avatar() {
  user_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserResponse::user_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserResponse.user_avatar)
  return _internal_user_avatar();
}
inline void GetUserResponse::set_user_avatar(const std::string& value) {
  _internal_set_user_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserResponse.user_avatar)
}
inline std::string* GetUserResponse::mutable_user_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetUserResponse.user_avatar)
  return _internal_mutable_user_avatar();
}
inline const std::string& GetUserResponse::_internal_user_avatar() const {
  return user_avatar_.Get();
}
inline void GetUserResponse::_internal_set_user_avatar(const std::string& value) {
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserResponse::set_user_avatar(std::string&& value) {
  
  user_avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetUserResponse.user_avatar)
}
inline void GetUserResponse::set_user_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetUserResponse.user_avatar)
}
inline void GetUserResponse::set_user_avatar(const char* value,
    size_t size) {
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetUserResponse.user_avatar)
}
inline std::string* GetUserResponse::_internal_mutable_user_avatar() {
  
  return user_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserResponse::release_user_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetUserResponse.user_avatar)
  return user_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserResponse::set_allocated_user_avatar(std::string* user_avatar) {
  if (user_avatar != nullptr) {
    
  } else {
    
  }
  user_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetUserResponse.user_avatar)
}
inline std::string* GetUserResponse::unsafe_arena_release_user_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetUserResponse.user_avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserResponse::unsafe_arena_set_allocated_user_avatar(
    std::string* user_avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_avatar != nullptr) {
    
  } else {
    
  }
  user_avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetUserResponse.user_avatar)
}

// .protocol.harmonytypes.v1.UserStatus user_status = 3;
inline void GetUserResponse::clear_user_status() {
  user_status_ = 0;
}
inline ::protocol::harmonytypes::v1::UserStatus GetUserResponse::_internal_user_status() const {
  return static_cast< ::protocol::harmonytypes::v1::UserStatus >(user_status_);
}
inline ::protocol::harmonytypes::v1::UserStatus GetUserResponse::user_status() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserResponse.user_status)
  return _internal_user_status();
}
inline void GetUserResponse::_internal_set_user_status(::protocol::harmonytypes::v1::UserStatus value) {
  
  user_status_ = value;
}
inline void GetUserResponse::set_user_status(::protocol::harmonytypes::v1::UserStatus value) {
  _internal_set_user_status(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserResponse.user_status)
}

// bool is_bot = 4;
inline void GetUserResponse::clear_is_bot() {
  is_bot_ = false;
}
inline bool GetUserResponse::_internal_is_bot() const {
  return is_bot_;
}
inline bool GetUserResponse::is_bot() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserResponse.is_bot)
  return _internal_is_bot();
}
inline void GetUserResponse::_internal_set_is_bot(bool value) {
  
  is_bot_ = value;
}
inline void GetUserResponse::set_is_bot(bool value) {
  _internal_set_is_bot(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserResponse.is_bot)
}

// -------------------------------------------------------------------

// GetUserMetadataRequest

// string app_id = 1;
inline void GetUserMetadataRequest::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserMetadataRequest::app_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserMetadataRequest.app_id)
  return _internal_app_id();
}
inline void GetUserMetadataRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserMetadataRequest.app_id)
}
inline std::string* GetUserMetadataRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetUserMetadataRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& GetUserMetadataRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void GetUserMetadataRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserMetadataRequest::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetUserMetadataRequest.app_id)
}
inline void GetUserMetadataRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetUserMetadataRequest.app_id)
}
inline void GetUserMetadataRequest::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetUserMetadataRequest.app_id)
}
inline std::string* GetUserMetadataRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserMetadataRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetUserMetadataRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserMetadataRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetUserMetadataRequest.app_id)
}
inline std::string* GetUserMetadataRequest::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetUserMetadataRequest.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserMetadataRequest::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetUserMetadataRequest.app_id)
}

// -------------------------------------------------------------------

// GetUserMetadataResponse

// string metadata = 1;
inline void GetUserMetadataResponse::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserMetadataResponse::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserMetadataResponse.metadata)
  return _internal_metadata();
}
inline void GetUserMetadataResponse::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserMetadataResponse.metadata)
}
inline std::string* GetUserMetadataResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetUserMetadataResponse.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& GetUserMetadataResponse::_internal_metadata() const {
  return metadata_.Get();
}
inline void GetUserMetadataResponse::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserMetadataResponse::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetUserMetadataResponse.metadata)
}
inline void GetUserMetadataResponse::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetUserMetadataResponse.metadata)
}
inline void GetUserMetadataResponse::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetUserMetadataResponse.metadata)
}
inline std::string* GetUserMetadataResponse::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserMetadataResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetUserMetadataResponse.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserMetadataResponse::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetUserMetadataResponse.metadata)
}
inline std::string* GetUserMetadataResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetUserMetadataResponse.metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserMetadataResponse::unsafe_arena_set_allocated_metadata(
    std::string* metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetUserMetadataResponse.metadata)
}

// -------------------------------------------------------------------

// ProfileUpdateRequest

// string new_username = 1;
inline void ProfileUpdateRequest::clear_new_username() {
  new_username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfileUpdateRequest::new_username() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.new_username)
  return _internal_new_username();
}
inline void ProfileUpdateRequest::set_new_username(const std::string& value) {
  _internal_set_new_username(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.new_username)
}
inline std::string* ProfileUpdateRequest::mutable_new_username() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.ProfileUpdateRequest.new_username)
  return _internal_mutable_new_username();
}
inline const std::string& ProfileUpdateRequest::_internal_new_username() const {
  return new_username_.Get();
}
inline void ProfileUpdateRequest::_internal_set_new_username(const std::string& value) {
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfileUpdateRequest::set_new_username(std::string&& value) {
  
  new_username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.ProfileUpdateRequest.new_username)
}
inline void ProfileUpdateRequest::set_new_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.ProfileUpdateRequest.new_username)
}
inline void ProfileUpdateRequest::set_new_username(const char* value,
    size_t size) {
  
  new_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.ProfileUpdateRequest.new_username)
}
inline std::string* ProfileUpdateRequest::_internal_mutable_new_username() {
  
  return new_username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfileUpdateRequest::release_new_username() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.ProfileUpdateRequest.new_username)
  return new_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileUpdateRequest::set_allocated_new_username(std::string* new_username) {
  if (new_username != nullptr) {
    
  } else {
    
  }
  new_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.ProfileUpdateRequest.new_username)
}
inline std::string* ProfileUpdateRequest::unsafe_arena_release_new_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.ProfileUpdateRequest.new_username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProfileUpdateRequest::unsafe_arena_set_allocated_new_username(
    std::string* new_username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_username != nullptr) {
    
  } else {
    
  }
  new_username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.ProfileUpdateRequest.new_username)
}

// bool update_username = 2;
inline void ProfileUpdateRequest::clear_update_username() {
  update_username_ = false;
}
inline bool ProfileUpdateRequest::_internal_update_username() const {
  return update_username_;
}
inline bool ProfileUpdateRequest::update_username() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.update_username)
  return _internal_update_username();
}
inline void ProfileUpdateRequest::_internal_set_update_username(bool value) {
  
  update_username_ = value;
}
inline void ProfileUpdateRequest::set_update_username(bool value) {
  _internal_set_update_username(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.update_username)
}

// string new_avatar = 3;
inline void ProfileUpdateRequest::clear_new_avatar() {
  new_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfileUpdateRequest::new_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
  return _internal_new_avatar();
}
inline void ProfileUpdateRequest::set_new_avatar(const std::string& value) {
  _internal_set_new_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}
inline std::string* ProfileUpdateRequest::mutable_new_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
  return _internal_mutable_new_avatar();
}
inline const std::string& ProfileUpdateRequest::_internal_new_avatar() const {
  return new_avatar_.Get();
}
inline void ProfileUpdateRequest::_internal_set_new_avatar(const std::string& value) {
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfileUpdateRequest::set_new_avatar(std::string&& value) {
  
  new_avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}
inline void ProfileUpdateRequest::set_new_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}
inline void ProfileUpdateRequest::set_new_avatar(const char* value,
    size_t size) {
  
  new_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}
inline std::string* ProfileUpdateRequest::_internal_mutable_new_avatar() {
  
  return new_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfileUpdateRequest::release_new_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
  return new_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileUpdateRequest::set_allocated_new_avatar(std::string* new_avatar) {
  if (new_avatar != nullptr) {
    
  } else {
    
  }
  new_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}
inline std::string* ProfileUpdateRequest::unsafe_arena_release_new_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProfileUpdateRequest::unsafe_arena_set_allocated_new_avatar(
    std::string* new_avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_avatar != nullptr) {
    
  } else {
    
  }
  new_avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.ProfileUpdateRequest.new_avatar)
}

// bool update_avatar = 4;
inline void ProfileUpdateRequest::clear_update_avatar() {
  update_avatar_ = false;
}
inline bool ProfileUpdateRequest::_internal_update_avatar() const {
  return update_avatar_;
}
inline bool ProfileUpdateRequest::update_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.update_avatar)
  return _internal_update_avatar();
}
inline void ProfileUpdateRequest::_internal_set_update_avatar(bool value) {
  
  update_avatar_ = value;
}
inline void ProfileUpdateRequest::set_update_avatar(bool value) {
  _internal_set_update_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.update_avatar)
}

// .protocol.harmonytypes.v1.UserStatus new_status = 5;
inline void ProfileUpdateRequest::clear_new_status() {
  new_status_ = 0;
}
inline ::protocol::harmonytypes::v1::UserStatus ProfileUpdateRequest::_internal_new_status() const {
  return static_cast< ::protocol::harmonytypes::v1::UserStatus >(new_status_);
}
inline ::protocol::harmonytypes::v1::UserStatus ProfileUpdateRequest::new_status() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.new_status)
  return _internal_new_status();
}
inline void ProfileUpdateRequest::_internal_set_new_status(::protocol::harmonytypes::v1::UserStatus value) {
  
  new_status_ = value;
}
inline void ProfileUpdateRequest::set_new_status(::protocol::harmonytypes::v1::UserStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.new_status)
}

// bool update_status = 6;
inline void ProfileUpdateRequest::clear_update_status() {
  update_status_ = false;
}
inline bool ProfileUpdateRequest::_internal_update_status() const {
  return update_status_;
}
inline bool ProfileUpdateRequest::update_status() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.update_status)
  return _internal_update_status();
}
inline void ProfileUpdateRequest::_internal_set_update_status(bool value) {
  
  update_status_ = value;
}
inline void ProfileUpdateRequest::set_update_status(bool value) {
  _internal_set_update_status(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.update_status)
}

// bool is_bot = 7;
inline void ProfileUpdateRequest::clear_is_bot() {
  is_bot_ = false;
}
inline bool ProfileUpdateRequest::_internal_is_bot() const {
  return is_bot_;
}
inline bool ProfileUpdateRequest::is_bot() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.is_bot)
  return _internal_is_bot();
}
inline void ProfileUpdateRequest::_internal_set_is_bot(bool value) {
  
  is_bot_ = value;
}
inline void ProfileUpdateRequest::set_is_bot(bool value) {
  _internal_set_is_bot(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.is_bot)
}

// bool update_is_bot = 8;
inline void ProfileUpdateRequest::clear_update_is_bot() {
  update_is_bot_ = false;
}
inline bool ProfileUpdateRequest::_internal_update_is_bot() const {
  return update_is_bot_;
}
inline bool ProfileUpdateRequest::update_is_bot() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ProfileUpdateRequest.update_is_bot)
  return _internal_update_is_bot();
}
inline void ProfileUpdateRequest::_internal_set_update_is_bot(bool value) {
  
  update_is_bot_ = value;
}
inline void ProfileUpdateRequest::set_update_is_bot(bool value) {
  _internal_set_update_is_bot(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ProfileUpdateRequest.update_is_bot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fprofile_2eproto
