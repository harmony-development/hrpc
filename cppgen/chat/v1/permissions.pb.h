// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/permissions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpermissions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpermissions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fpermissions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fpermissions_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class AddGuildRoleRequest;
class AddGuildRoleRequestDefaultTypeInternal;
extern AddGuildRoleRequestDefaultTypeInternal _AddGuildRoleRequest_default_instance_;
class AddGuildRoleResponse;
class AddGuildRoleResponseDefaultTypeInternal;
extern AddGuildRoleResponseDefaultTypeInternal _AddGuildRoleResponse_default_instance_;
class DeleteGuildRoleRequest;
class DeleteGuildRoleRequestDefaultTypeInternal;
extern DeleteGuildRoleRequestDefaultTypeInternal _DeleteGuildRoleRequest_default_instance_;
class GetGuildRolesRequest;
class GetGuildRolesRequestDefaultTypeInternal;
extern GetGuildRolesRequestDefaultTypeInternal _GetGuildRolesRequest_default_instance_;
class GetGuildRolesResponse;
class GetGuildRolesResponseDefaultTypeInternal;
extern GetGuildRolesResponseDefaultTypeInternal _GetGuildRolesResponse_default_instance_;
class GetPermissionsRequest;
class GetPermissionsRequestDefaultTypeInternal;
extern GetPermissionsRequestDefaultTypeInternal _GetPermissionsRequest_default_instance_;
class GetPermissionsResponse;
class GetPermissionsResponseDefaultTypeInternal;
extern GetPermissionsResponseDefaultTypeInternal _GetPermissionsResponse_default_instance_;
class GetUserRolesRequest;
class GetUserRolesRequestDefaultTypeInternal;
extern GetUserRolesRequestDefaultTypeInternal _GetUserRolesRequest_default_instance_;
class GetUserRolesResponse;
class GetUserRolesResponseDefaultTypeInternal;
extern GetUserRolesResponseDefaultTypeInternal _GetUserRolesResponse_default_instance_;
class ManageUserRolesRequest;
class ManageUserRolesRequestDefaultTypeInternal;
extern ManageUserRolesRequestDefaultTypeInternal _ManageUserRolesRequest_default_instance_;
class ModifyGuildRoleRequest;
class ModifyGuildRoleRequestDefaultTypeInternal;
extern ModifyGuildRoleRequestDefaultTypeInternal _ModifyGuildRoleRequest_default_instance_;
class MoveRoleRequest;
class MoveRoleRequestDefaultTypeInternal;
extern MoveRoleRequestDefaultTypeInternal _MoveRoleRequest_default_instance_;
class MoveRoleResponse;
class MoveRoleResponseDefaultTypeInternal;
extern MoveRoleResponseDefaultTypeInternal _MoveRoleResponse_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class PermissionList;
class PermissionListDefaultTypeInternal;
extern PermissionListDefaultTypeInternal _PermissionList_default_instance_;
class QueryPermissionsRequest;
class QueryPermissionsRequestDefaultTypeInternal;
extern QueryPermissionsRequestDefaultTypeInternal _QueryPermissionsRequest_default_instance_;
class QueryPermissionsResponse;
class QueryPermissionsResponseDefaultTypeInternal;
extern QueryPermissionsResponseDefaultTypeInternal _QueryPermissionsResponse_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SetPermissionsRequest;
class SetPermissionsRequestDefaultTypeInternal;
extern SetPermissionsRequestDefaultTypeInternal _SetPermissionsRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::AddGuildRoleRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::AddGuildRoleRequest>(Arena*);
template<> ::protocol::chat::v1::AddGuildRoleResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::AddGuildRoleResponse>(Arena*);
template<> ::protocol::chat::v1::DeleteGuildRoleRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteGuildRoleRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildRolesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildRolesRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildRolesResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildRolesResponse>(Arena*);
template<> ::protocol::chat::v1::GetPermissionsRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetPermissionsRequest>(Arena*);
template<> ::protocol::chat::v1::GetPermissionsResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetPermissionsResponse>(Arena*);
template<> ::protocol::chat::v1::GetUserRolesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserRolesRequest>(Arena*);
template<> ::protocol::chat::v1::GetUserRolesResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetUserRolesResponse>(Arena*);
template<> ::protocol::chat::v1::ManageUserRolesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::ManageUserRolesRequest>(Arena*);
template<> ::protocol::chat::v1::ModifyGuildRoleRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::ModifyGuildRoleRequest>(Arena*);
template<> ::protocol::chat::v1::MoveRoleRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::MoveRoleRequest>(Arena*);
template<> ::protocol::chat::v1::MoveRoleResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::MoveRoleResponse>(Arena*);
template<> ::protocol::chat::v1::Permission* Arena::CreateMaybeMessage<::protocol::chat::v1::Permission>(Arena*);
template<> ::protocol::chat::v1::PermissionList* Arena::CreateMaybeMessage<::protocol::chat::v1::PermissionList>(Arena*);
template<> ::protocol::chat::v1::QueryPermissionsRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::QueryPermissionsRequest>(Arena*);
template<> ::protocol::chat::v1::QueryPermissionsResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::QueryPermissionsResponse>(Arena*);
template<> ::protocol::chat::v1::Role* Arena::CreateMaybeMessage<::protocol::chat::v1::Role>(Arena*);
template<> ::protocol::chat::v1::SetPermissionsRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::SetPermissionsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

enum Permission_Mode : int {
  Permission_Mode_Allow = 0,
  Permission_Mode_Deny = 1,
  Permission_Mode_Permission_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Permission_Mode_Permission_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Permission_Mode_IsValid(int value);
constexpr Permission_Mode Permission_Mode_Mode_MIN = Permission_Mode_Allow;
constexpr Permission_Mode Permission_Mode_Mode_MAX = Permission_Mode_Deny;
constexpr int Permission_Mode_Mode_ARRAYSIZE = Permission_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_Mode_descriptor();
template<typename T>
inline const std::string& Permission_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Permission_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Permission_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Permission_Mode_descriptor(), enum_t_value);
}
inline bool Permission_Mode_Parse(
    const std::string& name, Permission_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Permission_Mode>(
    Permission_Mode_descriptor(), name, value);
}
// ===================================================================

class QueryPermissionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.QueryPermissionsRequest) */ {
 public:
  inline QueryPermissionsRequest() : QueryPermissionsRequest(nullptr) {};
  virtual ~QueryPermissionsRequest();

  QueryPermissionsRequest(const QueryPermissionsRequest& from);
  QueryPermissionsRequest(QueryPermissionsRequest&& from) noexcept
    : QueryPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline QueryPermissionsRequest& operator=(const QueryPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPermissionsRequest& operator=(QueryPermissionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPermissionsRequest*>(
               &_QueryPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryPermissionsRequest& a, QueryPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPermissionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPermissionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPermissionsRequest* New() const final {
    return CreateMaybeMessage<QueryPermissionsRequest>(nullptr);
  }

  QueryPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPermissionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPermissionsRequest& from);
  void MergeFrom(const QueryPermissionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPermissionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.QueryPermissionsRequest";
  }
  protected:
  explicit QueryPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckForFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kAsFieldNumber = 4,
  };
  // string check_for = 3;
  void clear_check_for();
  const std::string& check_for() const;
  void set_check_for(const std::string& value);
  void set_check_for(std::string&& value);
  void set_check_for(const char* value);
  void set_check_for(const char* value, size_t size);
  std::string* mutable_check_for();
  std::string* release_check_for();
  void set_allocated_check_for(std::string* check_for);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_check_for();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_check_for(
      std::string* check_for);
  private:
  const std::string& _internal_check_for() const;
  void _internal_set_check_for(const std::string& value);
  std::string* _internal_mutable_check_for();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 as = 4;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint64 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.QueryPermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_for_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class QueryPermissionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.QueryPermissionsResponse) */ {
 public:
  inline QueryPermissionsResponse() : QueryPermissionsResponse(nullptr) {};
  virtual ~QueryPermissionsResponse();

  QueryPermissionsResponse(const QueryPermissionsResponse& from);
  QueryPermissionsResponse(QueryPermissionsResponse&& from) noexcept
    : QueryPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline QueryPermissionsResponse& operator=(const QueryPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPermissionsResponse& operator=(QueryPermissionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryPermissionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPermissionsResponse*>(
               &_QueryPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryPermissionsResponse& a, QueryPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPermissionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPermissionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPermissionsResponse* New() const final {
    return CreateMaybeMessage<QueryPermissionsResponse>(nullptr);
  }

  QueryPermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPermissionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryPermissionsResponse& from);
  void MergeFrom(const QueryPermissionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPermissionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.QueryPermissionsResponse";
  }
  protected:
  explicit QueryPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.QueryPermissionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class Permission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {};
  virtual ~Permission();

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(nullptr);
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Permission_Mode Mode;
  static constexpr Mode Allow =
    Permission_Mode_Allow;
  static constexpr Mode Deny =
    Permission_Mode_Deny;
  static inline bool Mode_IsValid(int value) {
    return Permission_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    Permission_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    Permission_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    Permission_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return Permission_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return Permission_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return Permission_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string matches = 1;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const char* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matches();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matches(
      std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // .protocol.chat.v1.Permission.Mode mode = 2;
  void clear_mode();
  ::protocol::chat::v1::Permission_Mode mode() const;
  void set_mode(::protocol::chat::v1::Permission_Mode value);
  private:
  ::protocol::chat::v1::Permission_Mode _internal_mode() const;
  void _internal_set_mode(::protocol::chat::v1::Permission_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Permission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class PermissionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.PermissionList) */ {
 public:
  inline PermissionList() : PermissionList(nullptr) {};
  virtual ~PermissionList();

  PermissionList(const PermissionList& from);
  PermissionList(PermissionList&& from) noexcept
    : PermissionList() {
    *this = ::std::move(from);
  }

  inline PermissionList& operator=(const PermissionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionList& operator=(PermissionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PermissionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PermissionList* internal_default_instance() {
    return reinterpret_cast<const PermissionList*>(
               &_PermissionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PermissionList& a, PermissionList& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PermissionList* New() const final {
    return CreateMaybeMessage<PermissionList>(nullptr);
  }

  PermissionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PermissionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PermissionList& from);
  void MergeFrom(const PermissionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.PermissionList";
  }
  protected:
  explicit PermissionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.Permission permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::protocol::chat::v1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Permission >*
      mutable_permissions();
  private:
  const ::protocol::chat::v1::Permission& _internal_permissions(int index) const;
  ::protocol::chat::v1::Permission* _internal_add_permissions();
  public:
  const ::protocol::chat::v1::Permission& permissions(int index) const;
  ::protocol::chat::v1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Permission >&
      permissions() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.PermissionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Permission > permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class SetPermissionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SetPermissionsRequest) */ {
 public:
  inline SetPermissionsRequest() : SetPermissionsRequest(nullptr) {};
  virtual ~SetPermissionsRequest();

  SetPermissionsRequest(const SetPermissionsRequest& from);
  SetPermissionsRequest(SetPermissionsRequest&& from) noexcept
    : SetPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline SetPermissionsRequest& operator=(const SetPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPermissionsRequest& operator=(SetPermissionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const SetPermissionsRequest*>(
               &_SetPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetPermissionsRequest& a, SetPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPermissionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPermissionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPermissionsRequest* New() const final {
    return CreateMaybeMessage<SetPermissionsRequest>(nullptr);
  }

  SetPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPermissionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPermissionsRequest& from);
  void MergeFrom(const SetPermissionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPermissionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SetPermissionsRequest";
  }
  protected:
  explicit SetPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermsFieldNumber = 4,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kRoleIdFieldNumber = 3,
  };
  // .protocol.chat.v1.PermissionList perms = 4;
  bool has_perms() const;
  private:
  bool _internal_has_perms() const;
  public:
  void clear_perms();
  const ::protocol::chat::v1::PermissionList& perms() const;
  ::protocol::chat::v1::PermissionList* release_perms();
  ::protocol::chat::v1::PermissionList* mutable_perms();
  void set_allocated_perms(::protocol::chat::v1::PermissionList* perms);
  private:
  const ::protocol::chat::v1::PermissionList& _internal_perms() const;
  ::protocol::chat::v1::PermissionList* _internal_mutable_perms();
  public:
  void unsafe_arena_set_allocated_perms(
      ::protocol::chat::v1::PermissionList* perms);
  ::protocol::chat::v1::PermissionList* unsafe_arena_release_perms();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 3 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SetPermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::PermissionList* perms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetPermissionsRequest) */ {
 public:
  inline GetPermissionsRequest() : GetPermissionsRequest(nullptr) {};
  virtual ~GetPermissionsRequest();

  GetPermissionsRequest(const GetPermissionsRequest& from);
  GetPermissionsRequest(GetPermissionsRequest&& from) noexcept
    : GetPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline GetPermissionsRequest& operator=(const GetPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsRequest& operator=(GetPermissionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsRequest*>(
               &_GetPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPermissionsRequest& a, GetPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsRequest* New() const final {
    return CreateMaybeMessage<GetPermissionsRequest>(nullptr);
  }

  GetPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsRequest& from);
  void MergeFrom(const GetPermissionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetPermissionsRequest";
  }
  protected:
  explicit GetPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kRoleIdFieldNumber = 3,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 3 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetPermissionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetPermissionsResponse) */ {
 public:
  inline GetPermissionsResponse() : GetPermissionsResponse(nullptr) {};
  virtual ~GetPermissionsResponse();

  GetPermissionsResponse(const GetPermissionsResponse& from);
  GetPermissionsResponse(GetPermissionsResponse&& from) noexcept
    : GetPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline GetPermissionsResponse& operator=(const GetPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionsResponse& operator=(GetPermissionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPermissionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPermissionsResponse*>(
               &_GetPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPermissionsResponse& a, GetPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPermissionsResponse* New() const final {
    return CreateMaybeMessage<GetPermissionsResponse>(nullptr);
  }

  GetPermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPermissionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPermissionsResponse& from);
  void MergeFrom(const GetPermissionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetPermissionsResponse";
  }
  protected:
  explicit GetPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermsFieldNumber = 1,
  };
  // .protocol.chat.v1.PermissionList perms = 1;
  bool has_perms() const;
  private:
  bool _internal_has_perms() const;
  public:
  void clear_perms();
  const ::protocol::chat::v1::PermissionList& perms() const;
  ::protocol::chat::v1::PermissionList* release_perms();
  ::protocol::chat::v1::PermissionList* mutable_perms();
  void set_allocated_perms(::protocol::chat::v1::PermissionList* perms);
  private:
  const ::protocol::chat::v1::PermissionList& _internal_perms() const;
  ::protocol::chat::v1::PermissionList* _internal_mutable_perms();
  public:
  void unsafe_arena_set_allocated_perms(
      ::protocol::chat::v1::PermissionList* perms);
  ::protocol::chat::v1::PermissionList* unsafe_arena_release_perms();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetPermissionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::PermissionList* perms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class Role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.Role) */ {
 public:
  inline Role() : Role(nullptr) {};
  virtual ~Role();

  Role(const Role& from);
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(nullptr);
  }

  Role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.Role";
  }
  protected:
  explicit Role(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kColorFieldNumber = 3,
    kHoistFieldNumber = 4,
    kPingableFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 role_id = 1 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool hoist = 4;
  void clear_hoist();
  bool hoist() const;
  void set_hoist(bool value);
  private:
  bool _internal_hoist() const;
  void _internal_set_hoist(bool value);
  public:

  // bool pingable = 5;
  void clear_pingable();
  bool pingable() const;
  void set_pingable(bool value);
  private:
  bool _internal_pingable() const;
  void _internal_set_pingable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.Role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  bool hoist_;
  bool pingable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class MoveRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.MoveRoleRequest) */ {
 public:
  inline MoveRoleRequest() : MoveRoleRequest(nullptr) {};
  virtual ~MoveRoleRequest();

  MoveRoleRequest(const MoveRoleRequest& from);
  MoveRoleRequest(MoveRoleRequest&& from) noexcept
    : MoveRoleRequest() {
    *this = ::std::move(from);
  }

  inline MoveRoleRequest& operator=(const MoveRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRoleRequest& operator=(MoveRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveRoleRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRoleRequest*>(
               &_MoveRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveRoleRequest& a, MoveRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRoleRequest* New() const final {
    return CreateMaybeMessage<MoveRoleRequest>(nullptr);
  }

  MoveRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveRoleRequest& from);
  void MergeFrom(const MoveRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.MoveRoleRequest";
  }
  protected:
  explicit MoveRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kBeforeIdFieldNumber = 3,
    kAfterIdFieldNumber = 4,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 before_id = 3 [jstype = JS_STRING];
  void clear_before_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 before_id() const;
  void set_before_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_before_id() const;
  void _internal_set_before_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 after_id = 4 [jstype = JS_STRING];
  void clear_after_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 after_id() const;
  void set_after_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_after_id() const;
  void _internal_set_after_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.MoveRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 before_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 after_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class MoveRoleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.MoveRoleResponse) */ {
 public:
  inline MoveRoleResponse() : MoveRoleResponse(nullptr) {};
  virtual ~MoveRoleResponse();

  MoveRoleResponse(const MoveRoleResponse& from);
  MoveRoleResponse(MoveRoleResponse&& from) noexcept
    : MoveRoleResponse() {
    *this = ::std::move(from);
  }

  inline MoveRoleResponse& operator=(const MoveRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRoleResponse& operator=(MoveRoleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveRoleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveRoleResponse* internal_default_instance() {
    return reinterpret_cast<const MoveRoleResponse*>(
               &_MoveRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MoveRoleResponse& a, MoveRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRoleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRoleResponse* New() const final {
    return CreateMaybeMessage<MoveRoleResponse>(nullptr);
  }

  MoveRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveRoleResponse& from);
  void MergeFrom(const MoveRoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.MoveRoleResponse";
  }
  protected:
  explicit MoveRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.MoveRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetGuildRolesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildRolesRequest) */ {
 public:
  inline GetGuildRolesRequest() : GetGuildRolesRequest(nullptr) {};
  virtual ~GetGuildRolesRequest();

  GetGuildRolesRequest(const GetGuildRolesRequest& from);
  GetGuildRolesRequest(GetGuildRolesRequest&& from) noexcept
    : GetGuildRolesRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildRolesRequest& operator=(const GetGuildRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildRolesRequest& operator=(GetGuildRolesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildRolesRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildRolesRequest*>(
               &_GetGuildRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetGuildRolesRequest& a, GetGuildRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildRolesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildRolesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildRolesRequest* New() const final {
    return CreateMaybeMessage<GetGuildRolesRequest>(nullptr);
  }

  GetGuildRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildRolesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildRolesRequest& from);
  void MergeFrom(const GetGuildRolesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildRolesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildRolesRequest";
  }
  protected:
  explicit GetGuildRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetGuildRolesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildRolesResponse) */ {
 public:
  inline GetGuildRolesResponse() : GetGuildRolesResponse(nullptr) {};
  virtual ~GetGuildRolesResponse();

  GetGuildRolesResponse(const GetGuildRolesResponse& from);
  GetGuildRolesResponse(GetGuildRolesResponse&& from) noexcept
    : GetGuildRolesResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildRolesResponse& operator=(const GetGuildRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildRolesResponse& operator=(GetGuildRolesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildRolesResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildRolesResponse*>(
               &_GetGuildRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetGuildRolesResponse& a, GetGuildRolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildRolesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildRolesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildRolesResponse* New() const final {
    return CreateMaybeMessage<GetGuildRolesResponse>(nullptr);
  }

  GetGuildRolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildRolesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildRolesResponse& from);
  void MergeFrom(const GetGuildRolesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildRolesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildRolesResponse";
  }
  protected:
  explicit GetGuildRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.Role roles = 1;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::protocol::chat::v1::Role* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Role >*
      mutable_roles();
  private:
  const ::protocol::chat::v1::Role& _internal_roles(int index) const;
  ::protocol::chat::v1::Role* _internal_add_roles();
  public:
  const ::protocol::chat::v1::Role& roles(int index) const;
  ::protocol::chat::v1::Role* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Role >&
      roles() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildRolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Role > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class AddGuildRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.AddGuildRoleRequest) */ {
 public:
  inline AddGuildRoleRequest() : AddGuildRoleRequest(nullptr) {};
  virtual ~AddGuildRoleRequest();

  AddGuildRoleRequest(const AddGuildRoleRequest& from);
  AddGuildRoleRequest(AddGuildRoleRequest&& from) noexcept
    : AddGuildRoleRequest() {
    *this = ::std::move(from);
  }

  inline AddGuildRoleRequest& operator=(const AddGuildRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGuildRoleRequest& operator=(AddGuildRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGuildRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGuildRoleRequest* internal_default_instance() {
    return reinterpret_cast<const AddGuildRoleRequest*>(
               &_AddGuildRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddGuildRoleRequest& a, AddGuildRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGuildRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGuildRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGuildRoleRequest* New() const final {
    return CreateMaybeMessage<AddGuildRoleRequest>(nullptr);
  }

  AddGuildRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGuildRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGuildRoleRequest& from);
  void MergeFrom(const AddGuildRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGuildRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.AddGuildRoleRequest";
  }
  protected:
  explicit AddGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // .protocol.chat.v1.Role role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::protocol::chat::v1::Role& role() const;
  ::protocol::chat::v1::Role* release_role();
  ::protocol::chat::v1::Role* mutable_role();
  void set_allocated_role(::protocol::chat::v1::Role* role);
  private:
  const ::protocol::chat::v1::Role& _internal_role() const;
  ::protocol::chat::v1::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::protocol::chat::v1::Role* role);
  ::protocol::chat::v1::Role* unsafe_arena_release_role();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.AddGuildRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::Role* role_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class AddGuildRoleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.AddGuildRoleResponse) */ {
 public:
  inline AddGuildRoleResponse() : AddGuildRoleResponse(nullptr) {};
  virtual ~AddGuildRoleResponse();

  AddGuildRoleResponse(const AddGuildRoleResponse& from);
  AddGuildRoleResponse(AddGuildRoleResponse&& from) noexcept
    : AddGuildRoleResponse() {
    *this = ::std::move(from);
  }

  inline AddGuildRoleResponse& operator=(const AddGuildRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGuildRoleResponse& operator=(AddGuildRoleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGuildRoleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGuildRoleResponse* internal_default_instance() {
    return reinterpret_cast<const AddGuildRoleResponse*>(
               &_AddGuildRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddGuildRoleResponse& a, AddGuildRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGuildRoleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGuildRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGuildRoleResponse* New() const final {
    return CreateMaybeMessage<AddGuildRoleResponse>(nullptr);
  }

  AddGuildRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGuildRoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGuildRoleResponse& from);
  void MergeFrom(const AddGuildRoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGuildRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.AddGuildRoleResponse";
  }
  protected:
  explicit AddGuildRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // uint64 role_id = 1 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.AddGuildRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class DeleteGuildRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteGuildRoleRequest) */ {
 public:
  inline DeleteGuildRoleRequest() : DeleteGuildRoleRequest(nullptr) {};
  virtual ~DeleteGuildRoleRequest();

  DeleteGuildRoleRequest(const DeleteGuildRoleRequest& from);
  DeleteGuildRoleRequest(DeleteGuildRoleRequest&& from) noexcept
    : DeleteGuildRoleRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGuildRoleRequest& operator=(const DeleteGuildRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGuildRoleRequest& operator=(DeleteGuildRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGuildRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGuildRoleRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGuildRoleRequest*>(
               &_DeleteGuildRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteGuildRoleRequest& a, DeleteGuildRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGuildRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGuildRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGuildRoleRequest* New() const final {
    return CreateMaybeMessage<DeleteGuildRoleRequest>(nullptr);
  }

  DeleteGuildRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGuildRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGuildRoleRequest& from);
  void MergeFrom(const DeleteGuildRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGuildRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteGuildRoleRequest";
  }
  protected:
  explicit DeleteGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2 [jstype = JS_STRING];
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteGuildRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class ModifyGuildRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.ModifyGuildRoleRequest) */ {
 public:
  inline ModifyGuildRoleRequest() : ModifyGuildRoleRequest(nullptr) {};
  virtual ~ModifyGuildRoleRequest();

  ModifyGuildRoleRequest(const ModifyGuildRoleRequest& from);
  ModifyGuildRoleRequest(ModifyGuildRoleRequest&& from) noexcept
    : ModifyGuildRoleRequest() {
    *this = ::std::move(from);
  }

  inline ModifyGuildRoleRequest& operator=(const ModifyGuildRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyGuildRoleRequest& operator=(ModifyGuildRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyGuildRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyGuildRoleRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyGuildRoleRequest*>(
               &_ModifyGuildRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ModifyGuildRoleRequest& a, ModifyGuildRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyGuildRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyGuildRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyGuildRoleRequest* New() const final {
    return CreateMaybeMessage<ModifyGuildRoleRequest>(nullptr);
  }

  ModifyGuildRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyGuildRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyGuildRoleRequest& from);
  void MergeFrom(const ModifyGuildRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyGuildRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.ModifyGuildRoleRequest";
  }
  protected:
  explicit ModifyGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 2,
    kGuildIdFieldNumber = 1,
    kModifyNameFieldNumber = 3,
    kModifyColorFieldNumber = 4,
    kModifyHoistFieldNumber = 5,
    kModifyPingableFieldNumber = 6,
  };
  // .protocol.chat.v1.Role role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::protocol::chat::v1::Role& role() const;
  ::protocol::chat::v1::Role* release_role();
  ::protocol::chat::v1::Role* mutable_role();
  void set_allocated_role(::protocol::chat::v1::Role* role);
  private:
  const ::protocol::chat::v1::Role& _internal_role() const;
  ::protocol::chat::v1::Role* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::protocol::chat::v1::Role* role);
  ::protocol::chat::v1::Role* unsafe_arena_release_role();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool modify_name = 3;
  void clear_modify_name();
  bool modify_name() const;
  void set_modify_name(bool value);
  private:
  bool _internal_modify_name() const;
  void _internal_set_modify_name(bool value);
  public:

  // bool modify_color = 4;
  void clear_modify_color();
  bool modify_color() const;
  void set_modify_color(bool value);
  private:
  bool _internal_modify_color() const;
  void _internal_set_modify_color(bool value);
  public:

  // bool modify_hoist = 5;
  void clear_modify_hoist();
  bool modify_hoist() const;
  void set_modify_hoist(bool value);
  private:
  bool _internal_modify_hoist() const;
  void _internal_set_modify_hoist(bool value);
  public:

  // bool modify_pingable = 6;
  void clear_modify_pingable();
  bool modify_pingable() const;
  void set_modify_pingable(bool value);
  private:
  bool _internal_modify_pingable() const;
  void _internal_set_modify_pingable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.ModifyGuildRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::chat::v1::Role* role_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  bool modify_name_;
  bool modify_color_;
  bool modify_hoist_;
  bool modify_pingable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class ManageUserRolesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.ManageUserRolesRequest) */ {
 public:
  inline ManageUserRolesRequest() : ManageUserRolesRequest(nullptr) {};
  virtual ~ManageUserRolesRequest();

  ManageUserRolesRequest(const ManageUserRolesRequest& from);
  ManageUserRolesRequest(ManageUserRolesRequest&& from) noexcept
    : ManageUserRolesRequest() {
    *this = ::std::move(from);
  }

  inline ManageUserRolesRequest& operator=(const ManageUserRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageUserRolesRequest& operator=(ManageUserRolesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManageUserRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManageUserRolesRequest* internal_default_instance() {
    return reinterpret_cast<const ManageUserRolesRequest*>(
               &_ManageUserRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ManageUserRolesRequest& a, ManageUserRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageUserRolesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageUserRolesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManageUserRolesRequest* New() const final {
    return CreateMaybeMessage<ManageUserRolesRequest>(nullptr);
  }

  ManageUserRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManageUserRolesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManageUserRolesRequest& from);
  void MergeFrom(const ManageUserRolesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManageUserRolesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.ManageUserRolesRequest";
  }
  protected:
  explicit ManageUserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGiveRoleIdsFieldNumber = 3,
    kTakeRoleIdsFieldNumber = 4,
    kGuildIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // repeated uint64 give_role_ids = 3 [jstype = JS_STRING];
  int give_role_ids_size() const;
  private:
  int _internal_give_role_ids_size() const;
  public:
  void clear_give_role_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_give_role_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_give_role_ids() const;
  void _internal_add_give_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_give_role_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 give_role_ids(int index) const;
  void set_give_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_give_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      give_role_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_give_role_ids();

  // repeated uint64 take_role_ids = 4 [jstype = JS_STRING];
  int take_role_ids_size() const;
  private:
  int _internal_take_role_ids_size() const;
  public:
  void clear_take_role_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_take_role_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_take_role_ids() const;
  void _internal_add_take_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_take_role_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 take_role_ids(int index) const;
  void set_take_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_take_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      take_role_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_take_role_ids();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2 [jstype = JS_STRING];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.ManageUserRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > give_role_ids_;
  mutable std::atomic<int> _give_role_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > take_role_ids_;
  mutable std::atomic<int> _take_role_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetUserRolesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserRolesRequest) */ {
 public:
  inline GetUserRolesRequest() : GetUserRolesRequest(nullptr) {};
  virtual ~GetUserRolesRequest();

  GetUserRolesRequest(const GetUserRolesRequest& from);
  GetUserRolesRequest(GetUserRolesRequest&& from) noexcept
    : GetUserRolesRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRolesRequest& operator=(const GetUserRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRolesRequest& operator=(GetUserRolesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserRolesRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRolesRequest*>(
               &_GetUserRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetUserRolesRequest& a, GetUserRolesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRolesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRolesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRolesRequest* New() const final {
    return CreateMaybeMessage<GetUserRolesRequest>(nullptr);
  }

  GetUserRolesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRolesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRolesRequest& from);
  void MergeFrom(const GetUserRolesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRolesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserRolesRequest";
  }
  protected:
  explicit GetUserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2 [jstype = JS_STRING];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserRolesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// -------------------------------------------------------------------

class GetUserRolesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetUserRolesResponse) */ {
 public:
  inline GetUserRolesResponse() : GetUserRolesResponse(nullptr) {};
  virtual ~GetUserRolesResponse();

  GetUserRolesResponse(const GetUserRolesResponse& from);
  GetUserRolesResponse(GetUserRolesResponse&& from) noexcept
    : GetUserRolesResponse() {
    *this = ::std::move(from);
  }

  inline GetUserRolesResponse& operator=(const GetUserRolesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRolesResponse& operator=(GetUserRolesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRolesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserRolesResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserRolesResponse*>(
               &_GetUserRolesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetUserRolesResponse& a, GetUserRolesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRolesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRolesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRolesResponse* New() const final {
    return CreateMaybeMessage<GetUserRolesResponse>(nullptr);
  }

  GetUserRolesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRolesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRolesResponse& from);
  void MergeFrom(const GetUserRolesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRolesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetUserRolesResponse";
  }
  protected:
  explicit GetUserRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpermissions_2eproto);
    return ::descriptor_table_chat_2fv1_2fpermissions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated uint64 roles = 1 [jstype = JS_STRING];
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_roles() const;
  void _internal_add_roles(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_roles();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 roles(int index) const;
  void set_roles(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_roles(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetUserRolesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > roles_;
  mutable std::atomic<int> _roles_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpermissions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryPermissionsRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void QueryPermissionsRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.QueryPermissionsRequest.guild_id)
  return _internal_guild_id();
}
inline void QueryPermissionsRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void QueryPermissionsRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.QueryPermissionsRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void QueryPermissionsRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.QueryPermissionsRequest.channel_id)
  return _internal_channel_id();
}
inline void QueryPermissionsRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void QueryPermissionsRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.QueryPermissionsRequest.channel_id)
}

// string check_for = 3;
inline void QueryPermissionsRequest::clear_check_for() {
  check_for_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryPermissionsRequest::check_for() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.QueryPermissionsRequest.check_for)
  return _internal_check_for();
}
inline void QueryPermissionsRequest::set_check_for(const std::string& value) {
  _internal_set_check_for(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.QueryPermissionsRequest.check_for)
}
inline std::string* QueryPermissionsRequest::mutable_check_for() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.QueryPermissionsRequest.check_for)
  return _internal_mutable_check_for();
}
inline const std::string& QueryPermissionsRequest::_internal_check_for() const {
  return check_for_.Get();
}
inline void QueryPermissionsRequest::_internal_set_check_for(const std::string& value) {
  
  check_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryPermissionsRequest::set_check_for(std::string&& value) {
  
  check_for_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.QueryPermissionsRequest.check_for)
}
inline void QueryPermissionsRequest::set_check_for(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  check_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.QueryPermissionsRequest.check_for)
}
inline void QueryPermissionsRequest::set_check_for(const char* value,
    size_t size) {
  
  check_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.QueryPermissionsRequest.check_for)
}
inline std::string* QueryPermissionsRequest::_internal_mutable_check_for() {
  
  return check_for_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryPermissionsRequest::release_check_for() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.QueryPermissionsRequest.check_for)
  return check_for_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryPermissionsRequest::set_allocated_check_for(std::string* check_for) {
  if (check_for != nullptr) {
    
  } else {
    
  }
  check_for_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), check_for,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.QueryPermissionsRequest.check_for)
}
inline std::string* QueryPermissionsRequest::unsafe_arena_release_check_for() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.QueryPermissionsRequest.check_for)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return check_for_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryPermissionsRequest::unsafe_arena_set_allocated_check_for(
    std::string* check_for) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (check_for != nullptr) {
    
  } else {
    
  }
  check_for_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      check_for, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.QueryPermissionsRequest.check_for)
}

// uint64 as = 4;
inline void QueryPermissionsRequest::clear_as() {
  as_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPermissionsRequest::as() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.QueryPermissionsRequest.as)
  return _internal_as();
}
inline void QueryPermissionsRequest::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  as_ = value;
}
inline void QueryPermissionsRequest::set_as(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.QueryPermissionsRequest.as)
}

// -------------------------------------------------------------------

// QueryPermissionsResponse

// bool ok = 1;
inline void QueryPermissionsResponse::clear_ok() {
  ok_ = false;
}
inline bool QueryPermissionsResponse::_internal_ok() const {
  return ok_;
}
inline bool QueryPermissionsResponse::ok() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.QueryPermissionsResponse.ok)
  return _internal_ok();
}
inline void QueryPermissionsResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void QueryPermissionsResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.QueryPermissionsResponse.ok)
}

// -------------------------------------------------------------------

// Permission

// string matches = 1;
inline void Permission::clear_matches() {
  matches_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Permission::matches() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Permission.matches)
  return _internal_matches();
}
inline void Permission::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Permission.matches)
}
inline std::string* Permission::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Permission.matches)
  return _internal_mutable_matches();
}
inline const std::string& Permission::_internal_matches() const {
  return matches_.Get();
}
inline void Permission::_internal_set_matches(const std::string& value) {
  
  matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Permission::set_matches(std::string&& value) {
  
  matches_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Permission.matches)
}
inline void Permission::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Permission.matches)
}
inline void Permission::set_matches(const char* value,
    size_t size) {
  
  matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Permission.matches)
}
inline std::string* Permission::_internal_mutable_matches() {
  
  return matches_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Permission::release_matches() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Permission.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Permission::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Permission.matches)
}
inline std::string* Permission::unsafe_arena_release_matches() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Permission.matches)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matches_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Permission::unsafe_arena_set_allocated_matches(
    std::string* matches) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matches, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Permission.matches)
}

// .protocol.chat.v1.Permission.Mode mode = 2;
inline void Permission::clear_mode() {
  mode_ = 0;
}
inline ::protocol::chat::v1::Permission_Mode Permission::_internal_mode() const {
  return static_cast< ::protocol::chat::v1::Permission_Mode >(mode_);
}
inline ::protocol::chat::v1::Permission_Mode Permission::mode() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Permission.mode)
  return _internal_mode();
}
inline void Permission::_internal_set_mode(::protocol::chat::v1::Permission_Mode value) {
  
  mode_ = value;
}
inline void Permission::set_mode(::protocol::chat::v1::Permission_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Permission.mode)
}

// -------------------------------------------------------------------

// PermissionList

// repeated .protocol.chat.v1.Permission permissions = 1;
inline int PermissionList::_internal_permissions_size() const {
  return permissions_.size();
}
inline int PermissionList::permissions_size() const {
  return _internal_permissions_size();
}
inline void PermissionList::clear_permissions() {
  permissions_.Clear();
}
inline ::protocol::chat::v1::Permission* PermissionList::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.PermissionList.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Permission >*
PermissionList::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.PermissionList.permissions)
  return &permissions_;
}
inline const ::protocol::chat::v1::Permission& PermissionList::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::protocol::chat::v1::Permission& PermissionList::permissions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.PermissionList.permissions)
  return _internal_permissions(index);
}
inline ::protocol::chat::v1::Permission* PermissionList::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::protocol::chat::v1::Permission* PermissionList::add_permissions() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.PermissionList.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Permission >&
PermissionList::permissions() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.PermissionList.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// SetPermissionsRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void SetPermissionsRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SetPermissionsRequest.guild_id)
  return _internal_guild_id();
}
inline void SetPermissionsRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void SetPermissionsRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SetPermissionsRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void SetPermissionsRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SetPermissionsRequest.channel_id)
  return _internal_channel_id();
}
inline void SetPermissionsRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void SetPermissionsRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SetPermissionsRequest.channel_id)
}

// uint64 role_id = 3 [jstype = JS_STRING];
inline void SetPermissionsRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetPermissionsRequest::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SetPermissionsRequest.role_id)
  return _internal_role_id();
}
inline void SetPermissionsRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void SetPermissionsRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SetPermissionsRequest.role_id)
}

// .protocol.chat.v1.PermissionList perms = 4;
inline bool SetPermissionsRequest::_internal_has_perms() const {
  return this != internal_default_instance() && perms_ != nullptr;
}
inline bool SetPermissionsRequest::has_perms() const {
  return _internal_has_perms();
}
inline void SetPermissionsRequest::clear_perms() {
  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
}
inline const ::protocol::chat::v1::PermissionList& SetPermissionsRequest::_internal_perms() const {
  const ::protocol::chat::v1::PermissionList* p = perms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::PermissionList*>(
      &::protocol::chat::v1::_PermissionList_default_instance_);
}
inline const ::protocol::chat::v1::PermissionList& SetPermissionsRequest::perms() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SetPermissionsRequest.perms)
  return _internal_perms();
}
inline void SetPermissionsRequest::unsafe_arena_set_allocated_perms(
    ::protocol::chat::v1::PermissionList* perms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perms_);
  }
  perms_ = perms;
  if (perms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SetPermissionsRequest.perms)
}
inline ::protocol::chat::v1::PermissionList* SetPermissionsRequest::release_perms() {
  auto temp = unsafe_arena_release_perms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::PermissionList* SetPermissionsRequest::unsafe_arena_release_perms() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SetPermissionsRequest.perms)
  
  ::protocol::chat::v1::PermissionList* temp = perms_;
  perms_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::PermissionList* SetPermissionsRequest::_internal_mutable_perms() {
  
  if (perms_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::PermissionList>(GetArena());
    perms_ = p;
  }
  return perms_;
}
inline ::protocol::chat::v1::PermissionList* SetPermissionsRequest::mutable_perms() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SetPermissionsRequest.perms)
  return _internal_mutable_perms();
}
inline void SetPermissionsRequest::set_allocated_perms(::protocol::chat::v1::PermissionList* perms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete perms_;
  }
  if (perms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(perms);
    if (message_arena != submessage_arena) {
      perms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perms, submessage_arena);
    }
    
  } else {
    
  }
  perms_ = perms;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SetPermissionsRequest.perms)
}

// -------------------------------------------------------------------

// GetPermissionsRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetPermissionsRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetPermissionsRequest.guild_id)
  return _internal_guild_id();
}
inline void GetPermissionsRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetPermissionsRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetPermissionsRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void GetPermissionsRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetPermissionsRequest.channel_id)
  return _internal_channel_id();
}
inline void GetPermissionsRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetPermissionsRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetPermissionsRequest.channel_id)
}

// uint64 role_id = 3 [jstype = JS_STRING];
inline void GetPermissionsRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPermissionsRequest::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetPermissionsRequest.role_id)
  return _internal_role_id();
}
inline void GetPermissionsRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void GetPermissionsRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetPermissionsRequest.role_id)
}

// -------------------------------------------------------------------

// GetPermissionsResponse

// .protocol.chat.v1.PermissionList perms = 1;
inline bool GetPermissionsResponse::_internal_has_perms() const {
  return this != internal_default_instance() && perms_ != nullptr;
}
inline bool GetPermissionsResponse::has_perms() const {
  return _internal_has_perms();
}
inline void GetPermissionsResponse::clear_perms() {
  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
}
inline const ::protocol::chat::v1::PermissionList& GetPermissionsResponse::_internal_perms() const {
  const ::protocol::chat::v1::PermissionList* p = perms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::PermissionList*>(
      &::protocol::chat::v1::_PermissionList_default_instance_);
}
inline const ::protocol::chat::v1::PermissionList& GetPermissionsResponse::perms() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetPermissionsResponse.perms)
  return _internal_perms();
}
inline void GetPermissionsResponse::unsafe_arena_set_allocated_perms(
    ::protocol::chat::v1::PermissionList* perms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perms_);
  }
  perms_ = perms;
  if (perms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetPermissionsResponse.perms)
}
inline ::protocol::chat::v1::PermissionList* GetPermissionsResponse::release_perms() {
  auto temp = unsafe_arena_release_perms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::PermissionList* GetPermissionsResponse::unsafe_arena_release_perms() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetPermissionsResponse.perms)
  
  ::protocol::chat::v1::PermissionList* temp = perms_;
  perms_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::PermissionList* GetPermissionsResponse::_internal_mutable_perms() {
  
  if (perms_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::PermissionList>(GetArena());
    perms_ = p;
  }
  return perms_;
}
inline ::protocol::chat::v1::PermissionList* GetPermissionsResponse::mutable_perms() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetPermissionsResponse.perms)
  return _internal_mutable_perms();
}
inline void GetPermissionsResponse::set_allocated_perms(::protocol::chat::v1::PermissionList* perms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete perms_;
  }
  if (perms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(perms);
    if (message_arena != submessage_arena) {
      perms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perms, submessage_arena);
    }
    
  } else {
    
  }
  perms_ = perms;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetPermissionsResponse.perms)
}

// -------------------------------------------------------------------

// Role

// uint64 role_id = 1 [jstype = JS_STRING];
inline void Role::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Role::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Role.role_id)
  return _internal_role_id();
}
inline void Role::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void Role::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Role.role_id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Role.name)
  return _internal_name();
}
inline void Role::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Role.name)
}
inline std::string* Role::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.Role.name)
  return _internal_mutable_name();
}
inline const std::string& Role::_internal_name() const {
  return name_.Get();
}
inline void Role::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Role::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.Role.name)
}
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.Role.name)
}
inline void Role::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.Role.name)
}
inline std::string* Role::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.Role.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Role::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.Role.name)
}
inline std::string* Role::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.Role.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Role::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.Role.name)
}

// int32 color = 3;
inline void Role::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Role::color() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Role.color)
  return _internal_color();
}
inline void Role::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void Role::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Role.color)
}

// bool hoist = 4;
inline void Role::clear_hoist() {
  hoist_ = false;
}
inline bool Role::_internal_hoist() const {
  return hoist_;
}
inline bool Role::hoist() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Role.hoist)
  return _internal_hoist();
}
inline void Role::_internal_set_hoist(bool value) {
  
  hoist_ = value;
}
inline void Role::set_hoist(bool value) {
  _internal_set_hoist(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Role.hoist)
}

// bool pingable = 5;
inline void Role::clear_pingable() {
  pingable_ = false;
}
inline bool Role::_internal_pingable() const {
  return pingable_;
}
inline bool Role::pingable() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.Role.pingable)
  return _internal_pingable();
}
inline void Role::_internal_set_pingable(bool value) {
  
  pingable_ = value;
}
inline void Role::set_pingable(bool value) {
  _internal_set_pingable(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.Role.pingable)
}

// -------------------------------------------------------------------

// MoveRoleRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void MoveRoleRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.MoveRoleRequest.guild_id)
  return _internal_guild_id();
}
inline void MoveRoleRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void MoveRoleRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.MoveRoleRequest.guild_id)
}

// uint64 role_id = 2 [jstype = JS_STRING];
inline void MoveRoleRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.MoveRoleRequest.role_id)
  return _internal_role_id();
}
inline void MoveRoleRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void MoveRoleRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.MoveRoleRequest.role_id)
}

// uint64 before_id = 3 [jstype = JS_STRING];
inline void MoveRoleRequest::clear_before_id() {
  before_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::_internal_before_id() const {
  return before_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::before_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.MoveRoleRequest.before_id)
  return _internal_before_id();
}
inline void MoveRoleRequest::_internal_set_before_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  before_id_ = value;
}
inline void MoveRoleRequest::set_before_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_before_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.MoveRoleRequest.before_id)
}

// uint64 after_id = 4 [jstype = JS_STRING];
inline void MoveRoleRequest::clear_after_id() {
  after_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::_internal_after_id() const {
  return after_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleRequest::after_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.MoveRoleRequest.after_id)
  return _internal_after_id();
}
inline void MoveRoleRequest::_internal_set_after_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  after_id_ = value;
}
inline void MoveRoleRequest::set_after_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_after_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.MoveRoleRequest.after_id)
}

// -------------------------------------------------------------------

// MoveRoleResponse

// -------------------------------------------------------------------

// GetGuildRolesRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildRolesRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildRolesRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildRolesRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildRolesRequest.guild_id)
  return _internal_guild_id();
}
inline void GetGuildRolesRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildRolesRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildRolesRequest.guild_id)
}

// -------------------------------------------------------------------

// GetGuildRolesResponse

// repeated .protocol.chat.v1.Role roles = 1;
inline int GetGuildRolesResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetGuildRolesResponse::roles_size() const {
  return _internal_roles_size();
}
inline void GetGuildRolesResponse::clear_roles() {
  roles_.Clear();
}
inline ::protocol::chat::v1::Role* GetGuildRolesResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildRolesResponse.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Role >*
GetGuildRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetGuildRolesResponse.roles)
  return &roles_;
}
inline const ::protocol::chat::v1::Role& GetGuildRolesResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::protocol::chat::v1::Role& GetGuildRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildRolesResponse.roles)
  return _internal_roles(index);
}
inline ::protocol::chat::v1::Role* GetGuildRolesResponse::_internal_add_roles() {
  return roles_.Add();
}
inline ::protocol::chat::v1::Role* GetGuildRolesResponse::add_roles() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetGuildRolesResponse.roles)
  return _internal_add_roles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::Role >&
GetGuildRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetGuildRolesResponse.roles)
  return roles_;
}

// -------------------------------------------------------------------

// AddGuildRoleRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void AddGuildRoleRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildRoleRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddGuildRoleRequest.guild_id)
  return _internal_guild_id();
}
inline void AddGuildRoleRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void AddGuildRoleRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddGuildRoleRequest.guild_id)
}

// .protocol.chat.v1.Role role = 2;
inline bool AddGuildRoleRequest::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool AddGuildRoleRequest::has_role() const {
  return _internal_has_role();
}
inline void AddGuildRoleRequest::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::protocol::chat::v1::Role& AddGuildRoleRequest::_internal_role() const {
  const ::protocol::chat::v1::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::Role*>(
      &::protocol::chat::v1::_Role_default_instance_);
}
inline const ::protocol::chat::v1::Role& AddGuildRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddGuildRoleRequest.role)
  return _internal_role();
}
inline void AddGuildRoleRequest::unsafe_arena_set_allocated_role(
    ::protocol::chat::v1::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.AddGuildRoleRequest.role)
}
inline ::protocol::chat::v1::Role* AddGuildRoleRequest::release_role() {
  auto temp = unsafe_arena_release_role();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::Role* AddGuildRoleRequest::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.AddGuildRoleRequest.role)
  
  ::protocol::chat::v1::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::Role* AddGuildRoleRequest::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::protocol::chat::v1::Role* AddGuildRoleRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.AddGuildRoleRequest.role)
  return _internal_mutable_role();
}
inline void AddGuildRoleRequest::set_allocated_role(::protocol::chat::v1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.AddGuildRoleRequest.role)
}

// -------------------------------------------------------------------

// AddGuildRoleResponse

// uint64 role_id = 1 [jstype = JS_STRING];
inline void AddGuildRoleResponse::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildRoleResponse::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildRoleResponse::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddGuildRoleResponse.role_id)
  return _internal_role_id();
}
inline void AddGuildRoleResponse::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void AddGuildRoleResponse::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddGuildRoleResponse.role_id)
}

// -------------------------------------------------------------------

// DeleteGuildRoleRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void DeleteGuildRoleRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRoleRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteGuildRoleRequest.guild_id)
  return _internal_guild_id();
}
inline void DeleteGuildRoleRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void DeleteGuildRoleRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteGuildRoleRequest.guild_id)
}

// uint64 role_id = 2 [jstype = JS_STRING];
inline void DeleteGuildRoleRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRoleRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRoleRequest::role_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteGuildRoleRequest.role_id)
  return _internal_role_id();
}
inline void DeleteGuildRoleRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void DeleteGuildRoleRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteGuildRoleRequest.role_id)
}

// -------------------------------------------------------------------

// ModifyGuildRoleRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void ModifyGuildRoleRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyGuildRoleRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModifyGuildRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.guild_id)
  return _internal_guild_id();
}
inline void ModifyGuildRoleRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void ModifyGuildRoleRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ModifyGuildRoleRequest.guild_id)
}

// .protocol.chat.v1.Role role = 2;
inline bool ModifyGuildRoleRequest::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool ModifyGuildRoleRequest::has_role() const {
  return _internal_has_role();
}
inline void ModifyGuildRoleRequest::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::protocol::chat::v1::Role& ModifyGuildRoleRequest::_internal_role() const {
  const ::protocol::chat::v1::Role* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::chat::v1::Role*>(
      &::protocol::chat::v1::_Role_default_instance_);
}
inline const ::protocol::chat::v1::Role& ModifyGuildRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.role)
  return _internal_role();
}
inline void ModifyGuildRoleRequest::unsafe_arena_set_allocated_role(
    ::protocol::chat::v1::Role* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.ModifyGuildRoleRequest.role)
}
inline ::protocol::chat::v1::Role* ModifyGuildRoleRequest::release_role() {
  auto temp = unsafe_arena_release_role();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::chat::v1::Role* ModifyGuildRoleRequest::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.ModifyGuildRoleRequest.role)
  
  ::protocol::chat::v1::Role* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::protocol::chat::v1::Role* ModifyGuildRoleRequest::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::chat::v1::Role>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::protocol::chat::v1::Role* ModifyGuildRoleRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.ModifyGuildRoleRequest.role)
  return _internal_mutable_role();
}
inline void ModifyGuildRoleRequest::set_allocated_role(::protocol::chat::v1::Role* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.ModifyGuildRoleRequest.role)
}

// bool modify_name = 3;
inline void ModifyGuildRoleRequest::clear_modify_name() {
  modify_name_ = false;
}
inline bool ModifyGuildRoleRequest::_internal_modify_name() const {
  return modify_name_;
}
inline bool ModifyGuildRoleRequest::modify_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.modify_name)
  return _internal_modify_name();
}
inline void ModifyGuildRoleRequest::_internal_set_modify_name(bool value) {
  
  modify_name_ = value;
}
inline void ModifyGuildRoleRequest::set_modify_name(bool value) {
  _internal_set_modify_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ModifyGuildRoleRequest.modify_name)
}

// bool modify_color = 4;
inline void ModifyGuildRoleRequest::clear_modify_color() {
  modify_color_ = false;
}
inline bool ModifyGuildRoleRequest::_internal_modify_color() const {
  return modify_color_;
}
inline bool ModifyGuildRoleRequest::modify_color() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.modify_color)
  return _internal_modify_color();
}
inline void ModifyGuildRoleRequest::_internal_set_modify_color(bool value) {
  
  modify_color_ = value;
}
inline void ModifyGuildRoleRequest::set_modify_color(bool value) {
  _internal_set_modify_color(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ModifyGuildRoleRequest.modify_color)
}

// bool modify_hoist = 5;
inline void ModifyGuildRoleRequest::clear_modify_hoist() {
  modify_hoist_ = false;
}
inline bool ModifyGuildRoleRequest::_internal_modify_hoist() const {
  return modify_hoist_;
}
inline bool ModifyGuildRoleRequest::modify_hoist() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.modify_hoist)
  return _internal_modify_hoist();
}
inline void ModifyGuildRoleRequest::_internal_set_modify_hoist(bool value) {
  
  modify_hoist_ = value;
}
inline void ModifyGuildRoleRequest::set_modify_hoist(bool value) {
  _internal_set_modify_hoist(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ModifyGuildRoleRequest.modify_hoist)
}

// bool modify_pingable = 6;
inline void ModifyGuildRoleRequest::clear_modify_pingable() {
  modify_pingable_ = false;
}
inline bool ModifyGuildRoleRequest::_internal_modify_pingable() const {
  return modify_pingable_;
}
inline bool ModifyGuildRoleRequest::modify_pingable() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ModifyGuildRoleRequest.modify_pingable)
  return _internal_modify_pingable();
}
inline void ModifyGuildRoleRequest::_internal_set_modify_pingable(bool value) {
  
  modify_pingable_ = value;
}
inline void ModifyGuildRoleRequest::set_modify_pingable(bool value) {
  _internal_set_modify_pingable(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ModifyGuildRoleRequest.modify_pingable)
}

// -------------------------------------------------------------------

// ManageUserRolesRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void ManageUserRolesRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ManageUserRolesRequest.guild_id)
  return _internal_guild_id();
}
inline void ManageUserRolesRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void ManageUserRolesRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ManageUserRolesRequest.guild_id)
}

// uint64 user_id = 2 [jstype = JS_STRING];
inline void ManageUserRolesRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ManageUserRolesRequest.user_id)
  return _internal_user_id();
}
inline void ManageUserRolesRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void ManageUserRolesRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ManageUserRolesRequest.user_id)
}

// repeated uint64 give_role_ids = 3 [jstype = JS_STRING];
inline int ManageUserRolesRequest::_internal_give_role_ids_size() const {
  return give_role_ids_.size();
}
inline int ManageUserRolesRequest::give_role_ids_size() const {
  return _internal_give_role_ids_size();
}
inline void ManageUserRolesRequest::clear_give_role_ids() {
  give_role_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::_internal_give_role_ids(int index) const {
  return give_role_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::give_role_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ManageUserRolesRequest.give_role_ids)
  return _internal_give_role_ids(index);
}
inline void ManageUserRolesRequest::set_give_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  give_role_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ManageUserRolesRequest.give_role_ids)
}
inline void ManageUserRolesRequest::_internal_add_give_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  give_role_ids_.Add(value);
}
inline void ManageUserRolesRequest::add_give_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_give_role_ids(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.ManageUserRolesRequest.give_role_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ManageUserRolesRequest::_internal_give_role_ids() const {
  return give_role_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ManageUserRolesRequest::give_role_ids() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.ManageUserRolesRequest.give_role_ids)
  return _internal_give_role_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ManageUserRolesRequest::_internal_mutable_give_role_ids() {
  return &give_role_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ManageUserRolesRequest::mutable_give_role_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.ManageUserRolesRequest.give_role_ids)
  return _internal_mutable_give_role_ids();
}

// repeated uint64 take_role_ids = 4 [jstype = JS_STRING];
inline int ManageUserRolesRequest::_internal_take_role_ids_size() const {
  return take_role_ids_.size();
}
inline int ManageUserRolesRequest::take_role_ids_size() const {
  return _internal_take_role_ids_size();
}
inline void ManageUserRolesRequest::clear_take_role_ids() {
  take_role_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::_internal_take_role_ids(int index) const {
  return take_role_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ManageUserRolesRequest::take_role_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.ManageUserRolesRequest.take_role_ids)
  return _internal_take_role_ids(index);
}
inline void ManageUserRolesRequest::set_take_role_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  take_role_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.ManageUserRolesRequest.take_role_ids)
}
inline void ManageUserRolesRequest::_internal_add_take_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  take_role_ids_.Add(value);
}
inline void ManageUserRolesRequest::add_take_role_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_take_role_ids(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.ManageUserRolesRequest.take_role_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ManageUserRolesRequest::_internal_take_role_ids() const {
  return take_role_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ManageUserRolesRequest::take_role_ids() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.ManageUserRolesRequest.take_role_ids)
  return _internal_take_role_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ManageUserRolesRequest::_internal_mutable_take_role_ids() {
  return &take_role_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ManageUserRolesRequest::mutable_take_role_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.ManageUserRolesRequest.take_role_ids)
  return _internal_mutable_take_role_ids();
}

// -------------------------------------------------------------------

// GetUserRolesRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetUserRolesRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserRolesRequest.guild_id)
  return _internal_guild_id();
}
inline void GetUserRolesRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetUserRolesRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserRolesRequest.guild_id)
}

// uint64 user_id = 2 [jstype = JS_STRING];
inline void GetUserRolesRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserRolesRequest.user_id)
  return _internal_user_id();
}
inline void GetUserRolesRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void GetUserRolesRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserRolesRequest.user_id)
}

// -------------------------------------------------------------------

// GetUserRolesResponse

// repeated uint64 roles = 1 [jstype = JS_STRING];
inline int GetUserRolesResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int GetUserRolesResponse::roles_size() const {
  return _internal_roles_size();
}
inline void GetUserRolesResponse::clear_roles() {
  roles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetUserRolesResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetUserRolesResponse.roles)
  return _internal_roles(index);
}
inline void GetUserRolesResponse::set_roles(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  roles_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetUserRolesResponse.roles)
}
inline void GetUserRolesResponse::_internal_add_roles(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  roles_.Add(value);
}
inline void GetUserRolesResponse::add_roles(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_roles(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetUserRolesResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetUserRolesResponse::_internal_roles() const {
  return roles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetUserRolesResponse::roles() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetUserRolesResponse.roles)
  return _internal_roles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetUserRolesResponse::_internal_mutable_roles() {
  return &roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetUserRolesResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetUserRolesResponse.roles)
  return _internal_mutable_roles();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::chat::v1::Permission_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::chat::v1::Permission_Mode>() {
  return ::protocol::chat::v1::Permission_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpermissions_2eproto
