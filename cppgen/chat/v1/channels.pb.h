// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/channels.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fchannels_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fchannels_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fchannels_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fchannels_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fchannels_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class CreateChannelRequest;
class CreateChannelRequestDefaultTypeInternal;
extern CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
class CreateChannelResponse;
class CreateChannelResponseDefaultTypeInternal;
extern CreateChannelResponseDefaultTypeInternal _CreateChannelResponse_default_instance_;
class DeleteChannelRequest;
class DeleteChannelRequestDefaultTypeInternal;
extern DeleteChannelRequestDefaultTypeInternal _DeleteChannelRequest_default_instance_;
class GetGuildChannelsRequest;
class GetGuildChannelsRequestDefaultTypeInternal;
extern GetGuildChannelsRequestDefaultTypeInternal _GetGuildChannelsRequest_default_instance_;
class GetGuildChannelsResponse;
class GetGuildChannelsResponseDefaultTypeInternal;
extern GetGuildChannelsResponseDefaultTypeInternal _GetGuildChannelsResponse_default_instance_;
class GetGuildChannelsResponse_Channel;
class GetGuildChannelsResponse_ChannelDefaultTypeInternal;
extern GetGuildChannelsResponse_ChannelDefaultTypeInternal _GetGuildChannelsResponse_Channel_default_instance_;
class TypingRequest;
class TypingRequestDefaultTypeInternal;
extern TypingRequestDefaultTypeInternal _TypingRequest_default_instance_;
class UpdateChannelInformationRequest;
class UpdateChannelInformationRequestDefaultTypeInternal;
extern UpdateChannelInformationRequestDefaultTypeInternal _UpdateChannelInformationRequest_default_instance_;
class UpdateChannelOrderRequest;
class UpdateChannelOrderRequestDefaultTypeInternal;
extern UpdateChannelOrderRequestDefaultTypeInternal _UpdateChannelOrderRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::CreateChannelRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateChannelRequest>(Arena*);
template<> ::protocol::chat::v1::CreateChannelResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateChannelResponse>(Arena*);
template<> ::protocol::chat::v1::DeleteChannelRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteChannelRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildChannelsRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildChannelsRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildChannelsResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildChannelsResponse>(Arena*);
template<> ::protocol::chat::v1::GetGuildChannelsResponse_Channel* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildChannelsResponse_Channel>(Arena*);
template<> ::protocol::chat::v1::TypingRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::TypingRequest>(Arena*);
template<> ::protocol::chat::v1::UpdateChannelInformationRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::UpdateChannelInformationRequest>(Arena*);
template<> ::protocol::chat::v1::UpdateChannelOrderRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::UpdateChannelOrderRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class CreateChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateChannelRequest) */ {
 public:
  inline CreateChannelRequest() : CreateChannelRequest(nullptr) {};
  virtual ~CreateChannelRequest();

  CreateChannelRequest(const CreateChannelRequest& from);
  CreateChannelRequest(CreateChannelRequest&& from) noexcept
    : CreateChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelRequest& operator=(CreateChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelRequest*>(
               &_CreateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateChannelRequest& a, CreateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelRequest* New() const final {
    return CreateMaybeMessage<CreateChannelRequest>(nullptr);
  }

  CreateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChannelRequest& from);
  void MergeFrom(const CreateChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateChannelRequest";
  }
  protected:
  explicit CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 2,
    kMetadataFieldNumber = 6,
    kGuildIdFieldNumber = 1,
    kNextIdFieldNumber = 4,
    kPreviousIdFieldNumber = 5,
    kIsCategoryFieldNumber = 3,
  };
  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel_name(
      std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 4 [jstype = JS_STRING];
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 previous_id = 5 [jstype = JS_STRING];
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_category = 3;
  void clear_is_category();
  bool is_category() const;
  void set_is_category(bool value);
  private:
  bool _internal_is_category() const;
  void _internal_set_is_category(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  bool is_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateChannelResponse) */ {
 public:
  inline CreateChannelResponse() : CreateChannelResponse(nullptr) {};
  virtual ~CreateChannelResponse();

  CreateChannelResponse(const CreateChannelResponse& from);
  CreateChannelResponse(CreateChannelResponse&& from) noexcept
    : CreateChannelResponse() {
    *this = ::std::move(from);
  }

  inline CreateChannelResponse& operator=(const CreateChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelResponse& operator=(CreateChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResponse*>(
               &_CreateChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateChannelResponse& a, CreateChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResponse* New() const final {
    return CreateMaybeMessage<CreateChannelResponse>(nullptr);
  }

  CreateChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChannelResponse& from);
  void MergeFrom(const CreateChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateChannelResponse";
  }
  protected:
  explicit CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class GetGuildChannelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildChannelsRequest) */ {
 public:
  inline GetGuildChannelsRequest() : GetGuildChannelsRequest(nullptr) {};
  virtual ~GetGuildChannelsRequest();

  GetGuildChannelsRequest(const GetGuildChannelsRequest& from);
  GetGuildChannelsRequest(GetGuildChannelsRequest&& from) noexcept
    : GetGuildChannelsRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildChannelsRequest& operator=(const GetGuildChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildChannelsRequest& operator=(GetGuildChannelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildChannelsRequest*>(
               &_GetGuildChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetGuildChannelsRequest& a, GetGuildChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildChannelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildChannelsRequest* New() const final {
    return CreateMaybeMessage<GetGuildChannelsRequest>(nullptr);
  }

  GetGuildChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildChannelsRequest& from);
  void MergeFrom(const GetGuildChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildChannelsRequest";
  }
  protected:
  explicit GetGuildChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class GetGuildChannelsResponse_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildChannelsResponse.Channel) */ {
 public:
  inline GetGuildChannelsResponse_Channel() : GetGuildChannelsResponse_Channel(nullptr) {};
  virtual ~GetGuildChannelsResponse_Channel();

  GetGuildChannelsResponse_Channel(const GetGuildChannelsResponse_Channel& from);
  GetGuildChannelsResponse_Channel(GetGuildChannelsResponse_Channel&& from) noexcept
    : GetGuildChannelsResponse_Channel() {
    *this = ::std::move(from);
  }

  inline GetGuildChannelsResponse_Channel& operator=(const GetGuildChannelsResponse_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildChannelsResponse_Channel& operator=(GetGuildChannelsResponse_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildChannelsResponse_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildChannelsResponse_Channel* internal_default_instance() {
    return reinterpret_cast<const GetGuildChannelsResponse_Channel*>(
               &_GetGuildChannelsResponse_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetGuildChannelsResponse_Channel& a, GetGuildChannelsResponse_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildChannelsResponse_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildChannelsResponse_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildChannelsResponse_Channel* New() const final {
    return CreateMaybeMessage<GetGuildChannelsResponse_Channel>(nullptr);
  }

  GetGuildChannelsResponse_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildChannelsResponse_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildChannelsResponse_Channel& from);
  void MergeFrom(const GetGuildChannelsResponse_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildChannelsResponse_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildChannelsResponse.Channel";
  }
  protected:
  explicit GetGuildChannelsResponse_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kChannelIdFieldNumber = 1,
    kIsCategoryFieldNumber = 3,
  };
  // string channel_name = 2;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_channel_name(
      std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 channel_id = 1 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_category = 3;
  void clear_is_category();
  bool is_category() const;
  void set_is_category(bool value);
  private:
  bool _internal_is_category() const;
  void _internal_set_is_category(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildChannelsResponse.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  bool is_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class GetGuildChannelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildChannelsResponse) */ {
 public:
  inline GetGuildChannelsResponse() : GetGuildChannelsResponse(nullptr) {};
  virtual ~GetGuildChannelsResponse();

  GetGuildChannelsResponse(const GetGuildChannelsResponse& from);
  GetGuildChannelsResponse(GetGuildChannelsResponse&& from) noexcept
    : GetGuildChannelsResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildChannelsResponse& operator=(const GetGuildChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildChannelsResponse& operator=(GetGuildChannelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildChannelsResponse*>(
               &_GetGuildChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetGuildChannelsResponse& a, GetGuildChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildChannelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildChannelsResponse* New() const final {
    return CreateMaybeMessage<GetGuildChannelsResponse>(nullptr);
  }

  GetGuildChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildChannelsResponse& from);
  void MergeFrom(const GetGuildChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildChannelsResponse";
  }
  protected:
  explicit GetGuildChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGuildChannelsResponse_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.GetGuildChannelsResponse.Channel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::protocol::chat::v1::GetGuildChannelsResponse_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >*
      mutable_channels();
  private:
  const ::protocol::chat::v1::GetGuildChannelsResponse_Channel& _internal_channels(int index) const;
  ::protocol::chat::v1::GetGuildChannelsResponse_Channel* _internal_add_channels();
  public:
  const ::protocol::chat::v1::GetGuildChannelsResponse_Channel& channels(int index) const;
  ::protocol::chat::v1::GetGuildChannelsResponse_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildChannelsResponse_Channel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class UpdateChannelInformationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.UpdateChannelInformationRequest) */ {
 public:
  inline UpdateChannelInformationRequest() : UpdateChannelInformationRequest(nullptr) {};
  virtual ~UpdateChannelInformationRequest();

  UpdateChannelInformationRequest(const UpdateChannelInformationRequest& from);
  UpdateChannelInformationRequest(UpdateChannelInformationRequest&& from) noexcept
    : UpdateChannelInformationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChannelInformationRequest& operator=(const UpdateChannelInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChannelInformationRequest& operator=(UpdateChannelInformationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateChannelInformationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChannelInformationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChannelInformationRequest*>(
               &_UpdateChannelInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateChannelInformationRequest& a, UpdateChannelInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChannelInformationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChannelInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateChannelInformationRequest* New() const final {
    return CreateMaybeMessage<UpdateChannelInformationRequest>(nullptr);
  }

  UpdateChannelInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateChannelInformationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateChannelInformationRequest& from);
  void MergeFrom(const UpdateChannelInformationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChannelInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.UpdateChannelInformationRequest";
  }
  protected:
  explicit UpdateChannelInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kMetadataFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kUpdateNameFieldNumber = 4,
    kUpdateMetadataFieldNumber = 6,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_name = 4;
  void clear_update_name();
  bool update_name() const;
  void set_update_name(bool value);
  private:
  bool _internal_update_name() const;
  void _internal_set_update_name(bool value);
  public:

  // bool update_metadata = 6;
  void clear_update_metadata();
  bool update_metadata() const;
  void set_update_metadata(bool value);
  private:
  bool _internal_update_metadata() const;
  void _internal_set_update_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.UpdateChannelInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  bool update_name_;
  bool update_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class UpdateChannelOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.UpdateChannelOrderRequest) */ {
 public:
  inline UpdateChannelOrderRequest() : UpdateChannelOrderRequest(nullptr) {};
  virtual ~UpdateChannelOrderRequest();

  UpdateChannelOrderRequest(const UpdateChannelOrderRequest& from);
  UpdateChannelOrderRequest(UpdateChannelOrderRequest&& from) noexcept
    : UpdateChannelOrderRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChannelOrderRequest& operator=(const UpdateChannelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChannelOrderRequest& operator=(UpdateChannelOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateChannelOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChannelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChannelOrderRequest*>(
               &_UpdateChannelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateChannelOrderRequest& a, UpdateChannelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChannelOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChannelOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateChannelOrderRequest* New() const final {
    return CreateMaybeMessage<UpdateChannelOrderRequest>(nullptr);
  }

  UpdateChannelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateChannelOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateChannelOrderRequest& from);
  void MergeFrom(const UpdateChannelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChannelOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.UpdateChannelOrderRequest";
  }
  protected:
  explicit UpdateChannelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kPreviousIdFieldNumber = 3,
    kNextIdFieldNumber = 4,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 previous_id = 3 [jstype = JS_STRING];
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 4 [jstype = JS_STRING];
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.UpdateChannelOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class DeleteChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteChannelRequest) */ {
 public:
  inline DeleteChannelRequest() : DeleteChannelRequest(nullptr) {};
  virtual ~DeleteChannelRequest();

  DeleteChannelRequest(const DeleteChannelRequest& from);
  DeleteChannelRequest(DeleteChannelRequest&& from) noexcept
    : DeleteChannelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteChannelRequest& operator=(const DeleteChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteChannelRequest& operator=(DeleteChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteChannelRequest*>(
               &_DeleteChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteChannelRequest& a, DeleteChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteChannelRequest* New() const final {
    return CreateMaybeMessage<DeleteChannelRequest>(nullptr);
  }

  DeleteChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteChannelRequest& from);
  void MergeFrom(const DeleteChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteChannelRequest";
  }
  protected:
  explicit DeleteChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// -------------------------------------------------------------------

class TypingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.TypingRequest) */ {
 public:
  inline TypingRequest() : TypingRequest(nullptr) {};
  virtual ~TypingRequest();

  TypingRequest(const TypingRequest& from);
  TypingRequest(TypingRequest&& from) noexcept
    : TypingRequest() {
    *this = ::std::move(from);
  }

  inline TypingRequest& operator=(const TypingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypingRequest& operator=(TypingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypingRequest* internal_default_instance() {
    return reinterpret_cast<const TypingRequest*>(
               &_TypingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TypingRequest& a, TypingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TypingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypingRequest* New() const final {
    return CreateMaybeMessage<TypingRequest>(nullptr);
  }

  TypingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypingRequest& from);
  void MergeFrom(const TypingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.TypingRequest";
  }
  protected:
  explicit TypingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fchannels_2eproto);
    return ::descriptor_table_chat_2fv1_2fchannels_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.TypingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fchannels_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateChannelRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void CreateChannelRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.guild_id)
  return _internal_guild_id();
}
inline void CreateChannelRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void CreateChannelRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelRequest.guild_id)
}

// string channel_name = 2;
inline void CreateChannelRequest::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateChannelRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.channel_name)
  return _internal_channel_name();
}
inline void CreateChannelRequest::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelRequest.channel_name)
}
inline std::string* CreateChannelRequest::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateChannelRequest.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& CreateChannelRequest::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void CreateChannelRequest::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateChannelRequest::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateChannelRequest.channel_name)
}
inline void CreateChannelRequest::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateChannelRequest.channel_name)
}
inline void CreateChannelRequest::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateChannelRequest.channel_name)
}
inline std::string* CreateChannelRequest::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateChannelRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateChannelRequest.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateChannelRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateChannelRequest.channel_name)
}
inline std::string* CreateChannelRequest::unsafe_arena_release_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateChannelRequest.channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateChannelRequest::unsafe_arena_set_allocated_channel_name(
    std::string* channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateChannelRequest.channel_name)
}

// bool is_category = 3;
inline void CreateChannelRequest::clear_is_category() {
  is_category_ = false;
}
inline bool CreateChannelRequest::_internal_is_category() const {
  return is_category_;
}
inline bool CreateChannelRequest::is_category() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.is_category)
  return _internal_is_category();
}
inline void CreateChannelRequest::_internal_set_is_category(bool value) {
  
  is_category_ = value;
}
inline void CreateChannelRequest::set_is_category(bool value) {
  _internal_set_is_category(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelRequest.is_category)
}

// uint64 previous_id = 5 [jstype = JS_STRING];
inline void CreateChannelRequest::clear_previous_id() {
  previous_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::_internal_previous_id() const {
  return previous_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::previous_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.previous_id)
  return _internal_previous_id();
}
inline void CreateChannelRequest::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  previous_id_ = value;
}
inline void CreateChannelRequest::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelRequest.previous_id)
}

// uint64 next_id = 4 [jstype = JS_STRING];
inline void CreateChannelRequest::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelRequest::next_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.next_id)
  return _internal_next_id();
}
inline void CreateChannelRequest::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void CreateChannelRequest::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelRequest.next_id)
}

// .protocol.harmonytypes.v1.Metadata metadata = 6;
inline bool CreateChannelRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool CreateChannelRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& CreateChannelRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& CreateChannelRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelRequest.metadata)
  return _internal_metadata();
}
inline void CreateChannelRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateChannelRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* CreateChannelRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateChannelRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateChannelRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateChannelRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateChannelRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateChannelRequest.metadata)
  return _internal_mutable_metadata();
}
inline void CreateChannelRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateChannelRequest.metadata)
}

// -------------------------------------------------------------------

// CreateChannelResponse

// uint64 channel_id = 1 [jstype = JS_STRING];
inline void CreateChannelResponse::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelResponse::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateChannelResponse.channel_id)
  return _internal_channel_id();
}
inline void CreateChannelResponse::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void CreateChannelResponse::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateChannelResponse.channel_id)
}

// -------------------------------------------------------------------

// GetGuildChannelsRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildChannelsRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildChannelsRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildChannelsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsRequest.guild_id)
  return _internal_guild_id();
}
inline void GetGuildChannelsRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildChannelsRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildChannelsRequest.guild_id)
}

// -------------------------------------------------------------------

// GetGuildChannelsResponse_Channel

// .protocol.harmonytypes.v1.Metadata metadata = 4;
inline bool GetGuildChannelsResponse_Channel::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetGuildChannelsResponse_Channel::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& GetGuildChannelsResponse_Channel::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& GetGuildChannelsResponse_Channel::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsResponse.Channel.metadata)
  return _internal_metadata();
}
inline void GetGuildChannelsResponse_Channel::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildChannelsResponse.Channel.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildChannelsResponse_Channel::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildChannelsResponse_Channel::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildChannelsResponse.Channel.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildChannelsResponse_Channel::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildChannelsResponse_Channel::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildChannelsResponse.Channel.metadata)
  return _internal_mutable_metadata();
}
inline void GetGuildChannelsResponse_Channel::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildChannelsResponse.Channel.metadata)
}

// uint64 channel_id = 1 [jstype = JS_STRING];
inline void GetGuildChannelsResponse_Channel::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildChannelsResponse_Channel::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildChannelsResponse_Channel::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_id)
  return _internal_channel_id();
}
inline void GetGuildChannelsResponse_Channel::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetGuildChannelsResponse_Channel::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_id)
}

// string channel_name = 2;
inline void GetGuildChannelsResponse_Channel::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGuildChannelsResponse_Channel::channel_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
  return _internal_channel_name();
}
inline void GetGuildChannelsResponse_Channel::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}
inline std::string* GetGuildChannelsResponse_Channel::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& GetGuildChannelsResponse_Channel::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void GetGuildChannelsResponse_Channel::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGuildChannelsResponse_Channel::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}
inline void GetGuildChannelsResponse_Channel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}
inline void GetGuildChannelsResponse_Channel::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}
inline std::string* GetGuildChannelsResponse_Channel::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGuildChannelsResponse_Channel::release_channel_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGuildChannelsResponse_Channel::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}
inline std::string* GetGuildChannelsResponse_Channel::unsafe_arena_release_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetGuildChannelsResponse_Channel::unsafe_arena_set_allocated_channel_name(
    std::string* channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name)
}

// bool is_category = 3;
inline void GetGuildChannelsResponse_Channel::clear_is_category() {
  is_category_ = false;
}
inline bool GetGuildChannelsResponse_Channel::_internal_is_category() const {
  return is_category_;
}
inline bool GetGuildChannelsResponse_Channel::is_category() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsResponse.Channel.is_category)
  return _internal_is_category();
}
inline void GetGuildChannelsResponse_Channel::_internal_set_is_category(bool value) {
  
  is_category_ = value;
}
inline void GetGuildChannelsResponse_Channel::set_is_category(bool value) {
  _internal_set_is_category(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildChannelsResponse.Channel.is_category)
}

// -------------------------------------------------------------------

// GetGuildChannelsResponse

// repeated .protocol.chat.v1.GetGuildChannelsResponse.Channel channels = 1;
inline int GetGuildChannelsResponse::_internal_channels_size() const {
  return channels_.size();
}
inline int GetGuildChannelsResponse::channels_size() const {
  return _internal_channels_size();
}
inline void GetGuildChannelsResponse::clear_channels() {
  channels_.Clear();
}
inline ::protocol::chat::v1::GetGuildChannelsResponse_Channel* GetGuildChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildChannelsResponse.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >*
GetGuildChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetGuildChannelsResponse.channels)
  return &channels_;
}
inline const ::protocol::chat::v1::GetGuildChannelsResponse_Channel& GetGuildChannelsResponse::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::protocol::chat::v1::GetGuildChannelsResponse_Channel& GetGuildChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildChannelsResponse.channels)
  return _internal_channels(index);
}
inline ::protocol::chat::v1::GetGuildChannelsResponse_Channel* GetGuildChannelsResponse::_internal_add_channels() {
  return channels_.Add();
}
inline ::protocol::chat::v1::GetGuildChannelsResponse_Channel* GetGuildChannelsResponse::add_channels() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetGuildChannelsResponse.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >&
GetGuildChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetGuildChannelsResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// UpdateChannelInformationRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void UpdateChannelInformationRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelInformationRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelInformationRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.guild_id)
  return _internal_guild_id();
}
inline void UpdateChannelInformationRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void UpdateChannelInformationRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelInformationRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void UpdateChannelInformationRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelInformationRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelInformationRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.channel_id)
  return _internal_channel_id();
}
inline void UpdateChannelInformationRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void UpdateChannelInformationRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelInformationRequest.channel_id)
}

// string name = 3;
inline void UpdateChannelInformationRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateChannelInformationRequest::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.name)
  return _internal_name();
}
inline void UpdateChannelInformationRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelInformationRequest.name)
}
inline std::string* UpdateChannelInformationRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateChannelInformationRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateChannelInformationRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateChannelInformationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateChannelInformationRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.UpdateChannelInformationRequest.name)
}
inline void UpdateChannelInformationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.UpdateChannelInformationRequest.name)
}
inline void UpdateChannelInformationRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.UpdateChannelInformationRequest.name)
}
inline std::string* UpdateChannelInformationRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateChannelInformationRequest::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateChannelInformationRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateChannelInformationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateChannelInformationRequest.name)
}
inline std::string* UpdateChannelInformationRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.UpdateChannelInformationRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateChannelInformationRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateChannelInformationRequest.name)
}

// bool update_name = 4;
inline void UpdateChannelInformationRequest::clear_update_name() {
  update_name_ = false;
}
inline bool UpdateChannelInformationRequest::_internal_update_name() const {
  return update_name_;
}
inline bool UpdateChannelInformationRequest::update_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.update_name)
  return _internal_update_name();
}
inline void UpdateChannelInformationRequest::_internal_set_update_name(bool value) {
  
  update_name_ = value;
}
inline void UpdateChannelInformationRequest::set_update_name(bool value) {
  _internal_set_update_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelInformationRequest.update_name)
}

// .protocol.harmonytypes.v1.Metadata metadata = 5;
inline bool UpdateChannelInformationRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool UpdateChannelInformationRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateChannelInformationRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateChannelInformationRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.metadata)
  return _internal_metadata();
}
inline void UpdateChannelInformationRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateChannelInformationRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateChannelInformationRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateChannelInformationRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateChannelInformationRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateChannelInformationRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateChannelInformationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateChannelInformationRequest.metadata)
  return _internal_mutable_metadata();
}
inline void UpdateChannelInformationRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateChannelInformationRequest.metadata)
}

// bool update_metadata = 6;
inline void UpdateChannelInformationRequest::clear_update_metadata() {
  update_metadata_ = false;
}
inline bool UpdateChannelInformationRequest::_internal_update_metadata() const {
  return update_metadata_;
}
inline bool UpdateChannelInformationRequest::update_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelInformationRequest.update_metadata)
  return _internal_update_metadata();
}
inline void UpdateChannelInformationRequest::_internal_set_update_metadata(bool value) {
  
  update_metadata_ = value;
}
inline void UpdateChannelInformationRequest::set_update_metadata(bool value) {
  _internal_set_update_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelInformationRequest.update_metadata)
}

// -------------------------------------------------------------------

// UpdateChannelOrderRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void UpdateChannelOrderRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelOrderRequest.guild_id)
  return _internal_guild_id();
}
inline void UpdateChannelOrderRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void UpdateChannelOrderRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelOrderRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void UpdateChannelOrderRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelOrderRequest.channel_id)
  return _internal_channel_id();
}
inline void UpdateChannelOrderRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void UpdateChannelOrderRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelOrderRequest.channel_id)
}

// uint64 previous_id = 3 [jstype = JS_STRING];
inline void UpdateChannelOrderRequest::clear_previous_id() {
  previous_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::_internal_previous_id() const {
  return previous_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::previous_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelOrderRequest.previous_id)
  return _internal_previous_id();
}
inline void UpdateChannelOrderRequest::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  previous_id_ = value;
}
inline void UpdateChannelOrderRequest::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelOrderRequest.previous_id)
}

// uint64 next_id = 4 [jstype = JS_STRING];
inline void UpdateChannelOrderRequest::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateChannelOrderRequest::next_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateChannelOrderRequest.next_id)
  return _internal_next_id();
}
inline void UpdateChannelOrderRequest::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void UpdateChannelOrderRequest::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateChannelOrderRequest.next_id)
}

// -------------------------------------------------------------------

// DeleteChannelRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void DeleteChannelRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteChannelRequest.guild_id)
  return _internal_guild_id();
}
inline void DeleteChannelRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void DeleteChannelRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteChannelRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void DeleteChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void DeleteChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void DeleteChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// TypingRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void TypingRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TypingRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TypingRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TypingRequest.guild_id)
  return _internal_guild_id();
}
inline void TypingRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void TypingRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TypingRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void TypingRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TypingRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TypingRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TypingRequest.channel_id)
  return _internal_channel_id();
}
inline void TypingRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void TypingRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TypingRequest.channel_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fchannels_2eproto
