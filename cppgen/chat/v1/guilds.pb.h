// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/guilds.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fguilds_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fguilds_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fguilds_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fguilds_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fguilds_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class AddGuildToGuildListRequest;
class AddGuildToGuildListRequestDefaultTypeInternal;
extern AddGuildToGuildListRequestDefaultTypeInternal _AddGuildToGuildListRequest_default_instance_;
class AddGuildToGuildListResponse;
class AddGuildToGuildListResponseDefaultTypeInternal;
extern AddGuildToGuildListResponseDefaultTypeInternal _AddGuildToGuildListResponse_default_instance_;
class CreateGuildRequest;
class CreateGuildRequestDefaultTypeInternal;
extern CreateGuildRequestDefaultTypeInternal _CreateGuildRequest_default_instance_;
class CreateGuildResponse;
class CreateGuildResponseDefaultTypeInternal;
extern CreateGuildResponseDefaultTypeInternal _CreateGuildResponse_default_instance_;
class CreateInviteRequest;
class CreateInviteRequestDefaultTypeInternal;
extern CreateInviteRequestDefaultTypeInternal _CreateInviteRequest_default_instance_;
class CreateInviteResponse;
class CreateInviteResponseDefaultTypeInternal;
extern CreateInviteResponseDefaultTypeInternal _CreateInviteResponse_default_instance_;
class DeleteGuildRequest;
class DeleteGuildRequestDefaultTypeInternal;
extern DeleteGuildRequestDefaultTypeInternal _DeleteGuildRequest_default_instance_;
class DeleteInviteRequest;
class DeleteInviteRequestDefaultTypeInternal;
extern DeleteInviteRequestDefaultTypeInternal _DeleteInviteRequest_default_instance_;
class GetGuildInvitesRequest;
class GetGuildInvitesRequestDefaultTypeInternal;
extern GetGuildInvitesRequestDefaultTypeInternal _GetGuildInvitesRequest_default_instance_;
class GetGuildInvitesResponse;
class GetGuildInvitesResponseDefaultTypeInternal;
extern GetGuildInvitesResponseDefaultTypeInternal _GetGuildInvitesResponse_default_instance_;
class GetGuildInvitesResponse_Invite;
class GetGuildInvitesResponse_InviteDefaultTypeInternal;
extern GetGuildInvitesResponse_InviteDefaultTypeInternal _GetGuildInvitesResponse_Invite_default_instance_;
class GetGuildListRequest;
class GetGuildListRequestDefaultTypeInternal;
extern GetGuildListRequestDefaultTypeInternal _GetGuildListRequest_default_instance_;
class GetGuildListResponse;
class GetGuildListResponseDefaultTypeInternal;
extern GetGuildListResponseDefaultTypeInternal _GetGuildListResponse_default_instance_;
class GetGuildListResponse_GuildListEntry;
class GetGuildListResponse_GuildListEntryDefaultTypeInternal;
extern GetGuildListResponse_GuildListEntryDefaultTypeInternal _GetGuildListResponse_GuildListEntry_default_instance_;
class GetGuildMembersRequest;
class GetGuildMembersRequestDefaultTypeInternal;
extern GetGuildMembersRequestDefaultTypeInternal _GetGuildMembersRequest_default_instance_;
class GetGuildMembersResponse;
class GetGuildMembersResponseDefaultTypeInternal;
extern GetGuildMembersResponseDefaultTypeInternal _GetGuildMembersResponse_default_instance_;
class GetGuildRequest;
class GetGuildRequestDefaultTypeInternal;
extern GetGuildRequestDefaultTypeInternal _GetGuildRequest_default_instance_;
class GetGuildResponse;
class GetGuildResponseDefaultTypeInternal;
extern GetGuildResponseDefaultTypeInternal _GetGuildResponse_default_instance_;
class JoinGuildRequest;
class JoinGuildRequestDefaultTypeInternal;
extern JoinGuildRequestDefaultTypeInternal _JoinGuildRequest_default_instance_;
class JoinGuildResponse;
class JoinGuildResponseDefaultTypeInternal;
extern JoinGuildResponseDefaultTypeInternal _JoinGuildResponse_default_instance_;
class LeaveGuildRequest;
class LeaveGuildRequestDefaultTypeInternal;
extern LeaveGuildRequestDefaultTypeInternal _LeaveGuildRequest_default_instance_;
class PreviewGuildRequest;
class PreviewGuildRequestDefaultTypeInternal;
extern PreviewGuildRequestDefaultTypeInternal _PreviewGuildRequest_default_instance_;
class PreviewGuildResponse;
class PreviewGuildResponseDefaultTypeInternal;
extern PreviewGuildResponseDefaultTypeInternal _PreviewGuildResponse_default_instance_;
class RemoveGuildFromGuildListRequest;
class RemoveGuildFromGuildListRequestDefaultTypeInternal;
extern RemoveGuildFromGuildListRequestDefaultTypeInternal _RemoveGuildFromGuildListRequest_default_instance_;
class RemoveGuildFromGuildListResponse;
class RemoveGuildFromGuildListResponseDefaultTypeInternal;
extern RemoveGuildFromGuildListResponseDefaultTypeInternal _RemoveGuildFromGuildListResponse_default_instance_;
class UpdateGuildInformationRequest;
class UpdateGuildInformationRequestDefaultTypeInternal;
extern UpdateGuildInformationRequestDefaultTypeInternal _UpdateGuildInformationRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::AddGuildToGuildListRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::AddGuildToGuildListRequest>(Arena*);
template<> ::protocol::chat::v1::AddGuildToGuildListResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::AddGuildToGuildListResponse>(Arena*);
template<> ::protocol::chat::v1::CreateGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateGuildRequest>(Arena*);
template<> ::protocol::chat::v1::CreateGuildResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateGuildResponse>(Arena*);
template<> ::protocol::chat::v1::CreateInviteRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateInviteRequest>(Arena*);
template<> ::protocol::chat::v1::CreateInviteResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateInviteResponse>(Arena*);
template<> ::protocol::chat::v1::DeleteGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteGuildRequest>(Arena*);
template<> ::protocol::chat::v1::DeleteInviteRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteInviteRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildInvitesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildInvitesRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildInvitesResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildInvitesResponse>(Arena*);
template<> ::protocol::chat::v1::GetGuildInvitesResponse_Invite* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildInvitesResponse_Invite>(Arena*);
template<> ::protocol::chat::v1::GetGuildListRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildListRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildListResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildListResponse>(Arena*);
template<> ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildListResponse_GuildListEntry>(Arena*);
template<> ::protocol::chat::v1::GetGuildMembersRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildMembersRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildMembersResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildMembersResponse>(Arena*);
template<> ::protocol::chat::v1::GetGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildRequest>(Arena*);
template<> ::protocol::chat::v1::GetGuildResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetGuildResponse>(Arena*);
template<> ::protocol::chat::v1::JoinGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::JoinGuildRequest>(Arena*);
template<> ::protocol::chat::v1::JoinGuildResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::JoinGuildResponse>(Arena*);
template<> ::protocol::chat::v1::LeaveGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::LeaveGuildRequest>(Arena*);
template<> ::protocol::chat::v1::PreviewGuildRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::PreviewGuildRequest>(Arena*);
template<> ::protocol::chat::v1::PreviewGuildResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::PreviewGuildResponse>(Arena*);
template<> ::protocol::chat::v1::RemoveGuildFromGuildListRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::RemoveGuildFromGuildListRequest>(Arena*);
template<> ::protocol::chat::v1::RemoveGuildFromGuildListResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::RemoveGuildFromGuildListResponse>(Arena*);
template<> ::protocol::chat::v1::UpdateGuildInformationRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::UpdateGuildInformationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class CreateGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateGuildRequest) */ {
 public:
  inline CreateGuildRequest() : CreateGuildRequest(nullptr) {};
  virtual ~CreateGuildRequest();

  CreateGuildRequest(const CreateGuildRequest& from);
  CreateGuildRequest(CreateGuildRequest&& from) noexcept
    : CreateGuildRequest() {
    *this = ::std::move(from);
  }

  inline CreateGuildRequest& operator=(const CreateGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGuildRequest& operator=(CreateGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGuildRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGuildRequest*>(
               &_CreateGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateGuildRequest& a, CreateGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGuildRequest* New() const final {
    return CreateMaybeMessage<CreateGuildRequest>(nullptr);
  }

  CreateGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGuildRequest& from);
  void MergeFrom(const CreateGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateGuildRequest";
  }
  protected:
  explicit CreateGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildNameFieldNumber = 1,
    kPictureUrlFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string guild_name = 1;
  void clear_guild_name();
  const std::string& guild_name() const;
  void set_guild_name(const std::string& value);
  void set_guild_name(std::string&& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  std::string* mutable_guild_name();
  std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_guild_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_name(
      std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // string picture_url = 2;
  void clear_picture_url();
  const std::string& picture_url() const;
  void set_picture_url(const std::string& value);
  void set_picture_url(std::string&& value);
  void set_picture_url(const char* value);
  void set_picture_url(const char* value, size_t size);
  std::string* mutable_picture_url();
  std::string* release_picture_url();
  void set_allocated_picture_url(std::string* picture_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_picture_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_picture_url(
      std::string* picture_url);
  private:
  const std::string& _internal_picture_url() const;
  void _internal_set_picture_url(const std::string& value);
  std::string* _internal_mutable_picture_url();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_url_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class CreateGuildResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateGuildResponse) */ {
 public:
  inline CreateGuildResponse() : CreateGuildResponse(nullptr) {};
  virtual ~CreateGuildResponse();

  CreateGuildResponse(const CreateGuildResponse& from);
  CreateGuildResponse(CreateGuildResponse&& from) noexcept
    : CreateGuildResponse() {
    *this = ::std::move(from);
  }

  inline CreateGuildResponse& operator=(const CreateGuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGuildResponse& operator=(CreateGuildResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGuildResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGuildResponse*>(
               &_CreateGuildResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateGuildResponse& a, CreateGuildResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGuildResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGuildResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGuildResponse* New() const final {
    return CreateMaybeMessage<CreateGuildResponse>(nullptr);
  }

  CreateGuildResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGuildResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGuildResponse& from);
  void MergeFrom(const CreateGuildResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGuildResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateGuildResponse";
  }
  protected:
  explicit CreateGuildResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateGuildResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class CreateInviteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateInviteRequest) */ {
 public:
  inline CreateInviteRequest() : CreateInviteRequest(nullptr) {};
  virtual ~CreateInviteRequest();

  CreateInviteRequest(const CreateInviteRequest& from);
  CreateInviteRequest(CreateInviteRequest&& from) noexcept
    : CreateInviteRequest() {
    *this = ::std::move(from);
  }

  inline CreateInviteRequest& operator=(const CreateInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInviteRequest& operator=(CreateInviteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateInviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInviteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInviteRequest*>(
               &_CreateInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateInviteRequest& a, CreateInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInviteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInviteRequest* New() const final {
    return CreateMaybeMessage<CreateInviteRequest>(nullptr);
  }

  CreateInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInviteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateInviteRequest& from);
  void MergeFrom(const CreateInviteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInviteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateInviteRequest";
  }
  protected:
  explicit CreateInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGuildIdFieldNumber = 1,
    kPossibleUsesFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 possible_uses = 3;
  void clear_possible_uses();
  ::PROTOBUF_NAMESPACE_ID::int32 possible_uses() const;
  void set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possible_uses() const;
  void _internal_set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 possible_uses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class CreateInviteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateInviteResponse) */ {
 public:
  inline CreateInviteResponse() : CreateInviteResponse(nullptr) {};
  virtual ~CreateInviteResponse();

  CreateInviteResponse(const CreateInviteResponse& from);
  CreateInviteResponse(CreateInviteResponse&& from) noexcept
    : CreateInviteResponse() {
    *this = ::std::move(from);
  }

  inline CreateInviteResponse& operator=(const CreateInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInviteResponse& operator=(CreateInviteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateInviteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInviteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInviteResponse*>(
               &_CreateInviteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateInviteResponse& a, CreateInviteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInviteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInviteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInviteResponse* New() const final {
    return CreateMaybeMessage<CreateInviteResponse>(nullptr);
  }

  CreateInviteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInviteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateInviteResponse& from);
  void MergeFrom(const CreateInviteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInviteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateInviteResponse";
  }
  protected:
  explicit CreateInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateInviteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildListRequest) */ {
 public:
  inline GetGuildListRequest() : GetGuildListRequest(nullptr) {};
  virtual ~GetGuildListRequest();

  GetGuildListRequest(const GetGuildListRequest& from);
  GetGuildListRequest(GetGuildListRequest&& from) noexcept
    : GetGuildListRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildListRequest& operator=(const GetGuildListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildListRequest& operator=(GetGuildListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildListRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildListRequest*>(
               &_GetGuildListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetGuildListRequest& a, GetGuildListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildListRequest* New() const final {
    return CreateMaybeMessage<GetGuildListRequest>(nullptr);
  }

  GetGuildListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildListRequest& from);
  void MergeFrom(const GetGuildListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildListRequest";
  }
  protected:
  explicit GetGuildListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildListResponse_GuildListEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildListResponse.GuildListEntry) */ {
 public:
  inline GetGuildListResponse_GuildListEntry() : GetGuildListResponse_GuildListEntry(nullptr) {};
  virtual ~GetGuildListResponse_GuildListEntry();

  GetGuildListResponse_GuildListEntry(const GetGuildListResponse_GuildListEntry& from);
  GetGuildListResponse_GuildListEntry(GetGuildListResponse_GuildListEntry&& from) noexcept
    : GetGuildListResponse_GuildListEntry() {
    *this = ::std::move(from);
  }

  inline GetGuildListResponse_GuildListEntry& operator=(const GetGuildListResponse_GuildListEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildListResponse_GuildListEntry& operator=(GetGuildListResponse_GuildListEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildListResponse_GuildListEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildListResponse_GuildListEntry* internal_default_instance() {
    return reinterpret_cast<const GetGuildListResponse_GuildListEntry*>(
               &_GetGuildListResponse_GuildListEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetGuildListResponse_GuildListEntry& a, GetGuildListResponse_GuildListEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildListResponse_GuildListEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildListResponse_GuildListEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildListResponse_GuildListEntry* New() const final {
    return CreateMaybeMessage<GetGuildListResponse_GuildListEntry>(nullptr);
  }

  GetGuildListResponse_GuildListEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildListResponse_GuildListEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildListResponse_GuildListEntry& from);
  void MergeFrom(const GetGuildListResponse_GuildListEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildListResponse_GuildListEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildListResponse.GuildListEntry";
  }
  protected:
  explicit GetGuildListResponse_GuildListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildListResponse.GuildListEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildListResponse) */ {
 public:
  inline GetGuildListResponse() : GetGuildListResponse(nullptr) {};
  virtual ~GetGuildListResponse();

  GetGuildListResponse(const GetGuildListResponse& from);
  GetGuildListResponse(GetGuildListResponse&& from) noexcept
    : GetGuildListResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildListResponse& operator=(const GetGuildListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildListResponse& operator=(GetGuildListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildListResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildListResponse*>(
               &_GetGuildListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetGuildListResponse& a, GetGuildListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildListResponse* New() const final {
    return CreateMaybeMessage<GetGuildListResponse>(nullptr);
  }

  GetGuildListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildListResponse& from);
  void MergeFrom(const GetGuildListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildListResponse";
  }
  protected:
  explicit GetGuildListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGuildListResponse_GuildListEntry GuildListEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kGuildsFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.GetGuildListResponse.GuildListEntry guilds = 1;
  int guilds_size() const;
  private:
  int _internal_guilds_size() const;
  public:
  void clear_guilds();
  ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* mutable_guilds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildListResponse_GuildListEntry >*
      mutable_guilds();
  private:
  const ::protocol::chat::v1::GetGuildListResponse_GuildListEntry& _internal_guilds(int index) const;
  ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* _internal_add_guilds();
  public:
  const ::protocol::chat::v1::GetGuildListResponse_GuildListEntry& guilds(int index) const;
  ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* add_guilds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildListResponse_GuildListEntry >&
      guilds() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildListResponse_GuildListEntry > guilds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildRequest) */ {
 public:
  inline GetGuildRequest() : GetGuildRequest(nullptr) {};
  virtual ~GetGuildRequest();

  GetGuildRequest(const GetGuildRequest& from);
  GetGuildRequest(GetGuildRequest&& from) noexcept
    : GetGuildRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildRequest& operator=(const GetGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildRequest& operator=(GetGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildRequest*>(
               &_GetGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetGuildRequest& a, GetGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildRequest* New() const final {
    return CreateMaybeMessage<GetGuildRequest>(nullptr);
  }

  GetGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildRequest& from);
  void MergeFrom(const GetGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildRequest";
  }
  protected:
  explicit GetGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildResponse) */ {
 public:
  inline GetGuildResponse() : GetGuildResponse(nullptr) {};
  virtual ~GetGuildResponse();

  GetGuildResponse(const GetGuildResponse& from);
  GetGuildResponse(GetGuildResponse&& from) noexcept
    : GetGuildResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildResponse& operator=(const GetGuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildResponse& operator=(GetGuildResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildResponse*>(
               &_GetGuildResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetGuildResponse& a, GetGuildResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildResponse* New() const final {
    return CreateMaybeMessage<GetGuildResponse>(nullptr);
  }

  GetGuildResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildResponse& from);
  void MergeFrom(const GetGuildResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildResponse";
  }
  protected:
  explicit GetGuildResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildNameFieldNumber = 1,
    kGuildPictureFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kGuildOwnerFieldNumber = 2,
  };
  // string guild_name = 1;
  void clear_guild_name();
  const std::string& guild_name() const;
  void set_guild_name(const std::string& value);
  void set_guild_name(std::string&& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  std::string* mutable_guild_name();
  std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_guild_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_name(
      std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // string guild_picture = 3;
  void clear_guild_picture();
  const std::string& guild_picture() const;
  void set_guild_picture(const std::string& value);
  void set_guild_picture(std::string&& value);
  void set_guild_picture(const char* value);
  void set_guild_picture(const char* value, size_t size);
  std::string* mutable_guild_picture();
  std::string* release_guild_picture();
  void set_allocated_guild_picture(std::string* guild_picture);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_guild_picture();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_guild_picture(
      std::string* guild_picture);
  private:
  const std::string& _internal_guild_picture() const;
  void _internal_set_guild_picture(const std::string& value);
  std::string* _internal_mutable_guild_picture();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_owner = 2 [jstype = JS_STRING];
  void clear_guild_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_owner() const;
  void set_guild_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_owner() const;
  void _internal_set_guild_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_picture_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildInvitesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildInvitesRequest) */ {
 public:
  inline GetGuildInvitesRequest() : GetGuildInvitesRequest(nullptr) {};
  virtual ~GetGuildInvitesRequest();

  GetGuildInvitesRequest(const GetGuildInvitesRequest& from);
  GetGuildInvitesRequest(GetGuildInvitesRequest&& from) noexcept
    : GetGuildInvitesRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildInvitesRequest& operator=(const GetGuildInvitesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildInvitesRequest& operator=(GetGuildInvitesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildInvitesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildInvitesRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildInvitesRequest*>(
               &_GetGuildInvitesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetGuildInvitesRequest& a, GetGuildInvitesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildInvitesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildInvitesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildInvitesRequest* New() const final {
    return CreateMaybeMessage<GetGuildInvitesRequest>(nullptr);
  }

  GetGuildInvitesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildInvitesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildInvitesRequest& from);
  void MergeFrom(const GetGuildInvitesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildInvitesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildInvitesRequest";
  }
  protected:
  explicit GetGuildInvitesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildInvitesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildInvitesResponse_Invite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildInvitesResponse.Invite) */ {
 public:
  inline GetGuildInvitesResponse_Invite() : GetGuildInvitesResponse_Invite(nullptr) {};
  virtual ~GetGuildInvitesResponse_Invite();

  GetGuildInvitesResponse_Invite(const GetGuildInvitesResponse_Invite& from);
  GetGuildInvitesResponse_Invite(GetGuildInvitesResponse_Invite&& from) noexcept
    : GetGuildInvitesResponse_Invite() {
    *this = ::std::move(from);
  }

  inline GetGuildInvitesResponse_Invite& operator=(const GetGuildInvitesResponse_Invite& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildInvitesResponse_Invite& operator=(GetGuildInvitesResponse_Invite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildInvitesResponse_Invite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildInvitesResponse_Invite* internal_default_instance() {
    return reinterpret_cast<const GetGuildInvitesResponse_Invite*>(
               &_GetGuildInvitesResponse_Invite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetGuildInvitesResponse_Invite& a, GetGuildInvitesResponse_Invite& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildInvitesResponse_Invite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildInvitesResponse_Invite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildInvitesResponse_Invite* New() const final {
    return CreateMaybeMessage<GetGuildInvitesResponse_Invite>(nullptr);
  }

  GetGuildInvitesResponse_Invite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildInvitesResponse_Invite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildInvitesResponse_Invite& from);
  void MergeFrom(const GetGuildInvitesResponse_Invite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildInvitesResponse_Invite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildInvitesResponse.Invite";
  }
  protected:
  explicit GetGuildInvitesResponse_Invite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteIdFieldNumber = 1,
    kPossibleUsesFieldNumber = 2,
    kUseCountFieldNumber = 3,
  };
  // string invite_id = 1;
  void clear_invite_id();
  const std::string& invite_id() const;
  void set_invite_id(const std::string& value);
  void set_invite_id(std::string&& value);
  void set_invite_id(const char* value);
  void set_invite_id(const char* value, size_t size);
  std::string* mutable_invite_id();
  std::string* release_invite_id();
  void set_allocated_invite_id(std::string* invite_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invite_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invite_id(
      std::string* invite_id);
  private:
  const std::string& _internal_invite_id() const;
  void _internal_set_invite_id(const std::string& value);
  std::string* _internal_mutable_invite_id();
  public:

  // int32 possible_uses = 2;
  void clear_possible_uses();
  ::PROTOBUF_NAMESPACE_ID::int32 possible_uses() const;
  void set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possible_uses() const;
  void _internal_set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 use_count = 3;
  void clear_use_count();
  ::PROTOBUF_NAMESPACE_ID::int32 use_count() const;
  void set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_count() const;
  void _internal_set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildInvitesResponse.Invite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 possible_uses_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildInvitesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildInvitesResponse) */ {
 public:
  inline GetGuildInvitesResponse() : GetGuildInvitesResponse(nullptr) {};
  virtual ~GetGuildInvitesResponse();

  GetGuildInvitesResponse(const GetGuildInvitesResponse& from);
  GetGuildInvitesResponse(GetGuildInvitesResponse&& from) noexcept
    : GetGuildInvitesResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildInvitesResponse& operator=(const GetGuildInvitesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildInvitesResponse& operator=(GetGuildInvitesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildInvitesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildInvitesResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildInvitesResponse*>(
               &_GetGuildInvitesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetGuildInvitesResponse& a, GetGuildInvitesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildInvitesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildInvitesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildInvitesResponse* New() const final {
    return CreateMaybeMessage<GetGuildInvitesResponse>(nullptr);
  }

  GetGuildInvitesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildInvitesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildInvitesResponse& from);
  void MergeFrom(const GetGuildInvitesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildInvitesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildInvitesResponse";
  }
  protected:
  explicit GetGuildInvitesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetGuildInvitesResponse_Invite Invite;

  // accessors -------------------------------------------------------

  enum : int {
    kInvitesFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.GetGuildInvitesResponse.Invite invites = 1;
  int invites_size() const;
  private:
  int _internal_invites_size() const;
  public:
  void clear_invites();
  ::protocol::chat::v1::GetGuildInvitesResponse_Invite* mutable_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildInvitesResponse_Invite >*
      mutable_invites();
  private:
  const ::protocol::chat::v1::GetGuildInvitesResponse_Invite& _internal_invites(int index) const;
  ::protocol::chat::v1::GetGuildInvitesResponse_Invite* _internal_add_invites();
  public:
  const ::protocol::chat::v1::GetGuildInvitesResponse_Invite& invites(int index) const;
  ::protocol::chat::v1::GetGuildInvitesResponse_Invite* add_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildInvitesResponse_Invite >&
      invites() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildInvitesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildInvitesResponse_Invite > invites_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildMembersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildMembersRequest) */ {
 public:
  inline GetGuildMembersRequest() : GetGuildMembersRequest(nullptr) {};
  virtual ~GetGuildMembersRequest();

  GetGuildMembersRequest(const GetGuildMembersRequest& from);
  GetGuildMembersRequest(GetGuildMembersRequest&& from) noexcept
    : GetGuildMembersRequest() {
    *this = ::std::move(from);
  }

  inline GetGuildMembersRequest& operator=(const GetGuildMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildMembersRequest& operator=(GetGuildMembersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildMembersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildMembersRequest* internal_default_instance() {
    return reinterpret_cast<const GetGuildMembersRequest*>(
               &_GetGuildMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetGuildMembersRequest& a, GetGuildMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildMembersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildMembersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildMembersRequest* New() const final {
    return CreateMaybeMessage<GetGuildMembersRequest>(nullptr);
  }

  GetGuildMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildMembersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildMembersRequest& from);
  void MergeFrom(const GetGuildMembersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildMembersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildMembersRequest";
  }
  protected:
  explicit GetGuildMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildMembersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class GetGuildMembersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetGuildMembersResponse) */ {
 public:
  inline GetGuildMembersResponse() : GetGuildMembersResponse(nullptr) {};
  virtual ~GetGuildMembersResponse();

  GetGuildMembersResponse(const GetGuildMembersResponse& from);
  GetGuildMembersResponse(GetGuildMembersResponse&& from) noexcept
    : GetGuildMembersResponse() {
    *this = ::std::move(from);
  }

  inline GetGuildMembersResponse& operator=(const GetGuildMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGuildMembersResponse& operator=(GetGuildMembersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGuildMembersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGuildMembersResponse* internal_default_instance() {
    return reinterpret_cast<const GetGuildMembersResponse*>(
               &_GetGuildMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetGuildMembersResponse& a, GetGuildMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGuildMembersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGuildMembersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGuildMembersResponse* New() const final {
    return CreateMaybeMessage<GetGuildMembersResponse>(nullptr);
  }

  GetGuildMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGuildMembersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGuildMembersResponse& from);
  void MergeFrom(const GetGuildMembersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGuildMembersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetGuildMembersResponse";
  }
  protected:
  explicit GetGuildMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated uint64 members = 1 [jstype = JS_STRING];
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_members() const;
  void _internal_add_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_members();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 members(int index) const;
  void set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetGuildMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > members_;
  mutable std::atomic<int> _members_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class UpdateGuildInformationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.UpdateGuildInformationRequest) */ {
 public:
  inline UpdateGuildInformationRequest() : UpdateGuildInformationRequest(nullptr) {};
  virtual ~UpdateGuildInformationRequest();

  UpdateGuildInformationRequest(const UpdateGuildInformationRequest& from);
  UpdateGuildInformationRequest(UpdateGuildInformationRequest&& from) noexcept
    : UpdateGuildInformationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGuildInformationRequest& operator=(const UpdateGuildInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGuildInformationRequest& operator=(UpdateGuildInformationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGuildInformationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGuildInformationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGuildInformationRequest*>(
               &_UpdateGuildInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateGuildInformationRequest& a, UpdateGuildInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGuildInformationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGuildInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateGuildInformationRequest* New() const final {
    return CreateMaybeMessage<UpdateGuildInformationRequest>(nullptr);
  }

  UpdateGuildInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGuildInformationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGuildInformationRequest& from);
  void MergeFrom(const UpdateGuildInformationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGuildInformationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.UpdateGuildInformationRequest";
  }
  protected:
  explicit UpdateGuildInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewGuildNameFieldNumber = 2,
    kNewGuildPictureFieldNumber = 4,
    kMetadataFieldNumber = 6,
    kGuildIdFieldNumber = 1,
    kUpdateGuildNameFieldNumber = 3,
    kUpdateGuildPictureFieldNumber = 5,
    kUpdateMetadataFieldNumber = 7,
  };
  // string new_guild_name = 2;
  void clear_new_guild_name();
  const std::string& new_guild_name() const;
  void set_new_guild_name(const std::string& value);
  void set_new_guild_name(std::string&& value);
  void set_new_guild_name(const char* value);
  void set_new_guild_name(const char* value, size_t size);
  std::string* mutable_new_guild_name();
  std::string* release_new_guild_name();
  void set_allocated_new_guild_name(std::string* new_guild_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_guild_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_guild_name(
      std::string* new_guild_name);
  private:
  const std::string& _internal_new_guild_name() const;
  void _internal_set_new_guild_name(const std::string& value);
  std::string* _internal_mutable_new_guild_name();
  public:

  // string new_guild_picture = 4;
  void clear_new_guild_picture();
  const std::string& new_guild_picture() const;
  void set_new_guild_picture(const std::string& value);
  void set_new_guild_picture(std::string&& value);
  void set_new_guild_picture(const char* value);
  void set_new_guild_picture(const char* value, size_t size);
  std::string* mutable_new_guild_picture();
  std::string* release_new_guild_picture();
  void set_allocated_new_guild_picture(std::string* new_guild_picture);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_guild_picture();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_guild_picture(
      std::string* new_guild_picture);
  private:
  const std::string& _internal_new_guild_picture() const;
  void _internal_set_new_guild_picture(const std::string& value);
  std::string* _internal_mutable_new_guild_picture();
  public:

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_guild_name = 3;
  void clear_update_guild_name();
  bool update_guild_name() const;
  void set_update_guild_name(bool value);
  private:
  bool _internal_update_guild_name() const;
  void _internal_set_update_guild_name(bool value);
  public:

  // bool update_guild_picture = 5;
  void clear_update_guild_picture();
  bool update_guild_picture() const;
  void set_update_guild_picture(bool value);
  private:
  bool _internal_update_guild_picture() const;
  void _internal_set_update_guild_picture(bool value);
  public:

  // bool update_metadata = 7;
  void clear_update_metadata();
  bool update_metadata() const;
  void set_update_metadata(bool value);
  private:
  bool _internal_update_metadata() const;
  void _internal_set_update_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.UpdateGuildInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_guild_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_guild_picture_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  bool update_guild_name_;
  bool update_guild_picture_;
  bool update_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class DeleteGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteGuildRequest) */ {
 public:
  inline DeleteGuildRequest() : DeleteGuildRequest(nullptr) {};
  virtual ~DeleteGuildRequest();

  DeleteGuildRequest(const DeleteGuildRequest& from);
  DeleteGuildRequest(DeleteGuildRequest&& from) noexcept
    : DeleteGuildRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGuildRequest& operator=(const DeleteGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGuildRequest& operator=(DeleteGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGuildRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGuildRequest*>(
               &_DeleteGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteGuildRequest& a, DeleteGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGuildRequest* New() const final {
    return CreateMaybeMessage<DeleteGuildRequest>(nullptr);
  }

  DeleteGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGuildRequest& from);
  void MergeFrom(const DeleteGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteGuildRequest";
  }
  protected:
  explicit DeleteGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class DeleteInviteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteInviteRequest) */ {
 public:
  inline DeleteInviteRequest() : DeleteInviteRequest(nullptr) {};
  virtual ~DeleteInviteRequest();

  DeleteInviteRequest(const DeleteInviteRequest& from);
  DeleteInviteRequest(DeleteInviteRequest&& from) noexcept
    : DeleteInviteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteInviteRequest& operator=(const DeleteInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteInviteRequest& operator=(DeleteInviteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteInviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteInviteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteInviteRequest*>(
               &_DeleteInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteInviteRequest& a, DeleteInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteInviteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteInviteRequest* New() const final {
    return CreateMaybeMessage<DeleteInviteRequest>(nullptr);
  }

  DeleteInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteInviteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteInviteRequest& from);
  void MergeFrom(const DeleteInviteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteInviteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteInviteRequest";
  }
  protected:
  explicit DeleteInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteIdFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string invite_id = 2;
  void clear_invite_id();
  const std::string& invite_id() const;
  void set_invite_id(const std::string& value);
  void set_invite_id(std::string&& value);
  void set_invite_id(const char* value);
  void set_invite_id(const char* value, size_t size);
  std::string* mutable_invite_id();
  std::string* release_invite_id();
  void set_allocated_invite_id(std::string* invite_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invite_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invite_id(
      std::string* invite_id);
  private:
  const std::string& _internal_invite_id() const;
  void _internal_set_invite_id(const std::string& value);
  std::string* _internal_mutable_invite_id();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class JoinGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.JoinGuildRequest) */ {
 public:
  inline JoinGuildRequest() : JoinGuildRequest(nullptr) {};
  virtual ~JoinGuildRequest();

  JoinGuildRequest(const JoinGuildRequest& from);
  JoinGuildRequest(JoinGuildRequest&& from) noexcept
    : JoinGuildRequest() {
    *this = ::std::move(from);
  }

  inline JoinGuildRequest& operator=(const JoinGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGuildRequest& operator=(JoinGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGuildRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGuildRequest*>(
               &_JoinGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JoinGuildRequest& a, JoinGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGuildRequest* New() const final {
    return CreateMaybeMessage<JoinGuildRequest>(nullptr);
  }

  JoinGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGuildRequest& from);
  void MergeFrom(const JoinGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.JoinGuildRequest";
  }
  protected:
  explicit JoinGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteIdFieldNumber = 1,
  };
  // string invite_id = 1;
  void clear_invite_id();
  const std::string& invite_id() const;
  void set_invite_id(const std::string& value);
  void set_invite_id(std::string&& value);
  void set_invite_id(const char* value);
  void set_invite_id(const char* value, size_t size);
  std::string* mutable_invite_id();
  std::string* release_invite_id();
  void set_allocated_invite_id(std::string* invite_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invite_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invite_id(
      std::string* invite_id);
  private:
  const std::string& _internal_invite_id() const;
  void _internal_set_invite_id(const std::string& value);
  std::string* _internal_mutable_invite_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.JoinGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class JoinGuildResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.JoinGuildResponse) */ {
 public:
  inline JoinGuildResponse() : JoinGuildResponse(nullptr) {};
  virtual ~JoinGuildResponse();

  JoinGuildResponse(const JoinGuildResponse& from);
  JoinGuildResponse(JoinGuildResponse&& from) noexcept
    : JoinGuildResponse() {
    *this = ::std::move(from);
  }

  inline JoinGuildResponse& operator=(const JoinGuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGuildResponse& operator=(JoinGuildResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGuildResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGuildResponse*>(
               &_JoinGuildResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(JoinGuildResponse& a, JoinGuildResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGuildResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGuildResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGuildResponse* New() const final {
    return CreateMaybeMessage<JoinGuildResponse>(nullptr);
  }

  JoinGuildResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGuildResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGuildResponse& from);
  void MergeFrom(const JoinGuildResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGuildResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.JoinGuildResponse";
  }
  protected:
  explicit JoinGuildResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.JoinGuildResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class PreviewGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.PreviewGuildRequest) */ {
 public:
  inline PreviewGuildRequest() : PreviewGuildRequest(nullptr) {};
  virtual ~PreviewGuildRequest();

  PreviewGuildRequest(const PreviewGuildRequest& from);
  PreviewGuildRequest(PreviewGuildRequest&& from) noexcept
    : PreviewGuildRequest() {
    *this = ::std::move(from);
  }

  inline PreviewGuildRequest& operator=(const PreviewGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewGuildRequest& operator=(PreviewGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreviewGuildRequest* internal_default_instance() {
    return reinterpret_cast<const PreviewGuildRequest*>(
               &_PreviewGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PreviewGuildRequest& a, PreviewGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewGuildRequest* New() const final {
    return CreateMaybeMessage<PreviewGuildRequest>(nullptr);
  }

  PreviewGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewGuildRequest& from);
  void MergeFrom(const PreviewGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.PreviewGuildRequest";
  }
  protected:
  explicit PreviewGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteIdFieldNumber = 1,
  };
  // string invite_id = 1;
  void clear_invite_id();
  const std::string& invite_id() const;
  void set_invite_id(const std::string& value);
  void set_invite_id(std::string&& value);
  void set_invite_id(const char* value);
  void set_invite_id(const char* value, size_t size);
  std::string* mutable_invite_id();
  std::string* release_invite_id();
  void set_allocated_invite_id(std::string* invite_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invite_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invite_id(
      std::string* invite_id);
  private:
  const std::string& _internal_invite_id() const;
  void _internal_set_invite_id(const std::string& value);
  std::string* _internal_mutable_invite_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.PreviewGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class PreviewGuildResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.PreviewGuildResponse) */ {
 public:
  inline PreviewGuildResponse() : PreviewGuildResponse(nullptr) {};
  virtual ~PreviewGuildResponse();

  PreviewGuildResponse(const PreviewGuildResponse& from);
  PreviewGuildResponse(PreviewGuildResponse&& from) noexcept
    : PreviewGuildResponse() {
    *this = ::std::move(from);
  }

  inline PreviewGuildResponse& operator=(const PreviewGuildResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewGuildResponse& operator=(PreviewGuildResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewGuildResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreviewGuildResponse* internal_default_instance() {
    return reinterpret_cast<const PreviewGuildResponse*>(
               &_PreviewGuildResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PreviewGuildResponse& a, PreviewGuildResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewGuildResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewGuildResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewGuildResponse* New() const final {
    return CreateMaybeMessage<PreviewGuildResponse>(nullptr);
  }

  PreviewGuildResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewGuildResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewGuildResponse& from);
  void MergeFrom(const PreviewGuildResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewGuildResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.PreviewGuildResponse";
  }
  protected:
  explicit PreviewGuildResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kMemberCountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar = 2;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avatar(
      std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // uint64 member_count = 3 [jstype = JS_STRING];
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.PreviewGuildResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class LeaveGuildRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.LeaveGuildRequest) */ {
 public:
  inline LeaveGuildRequest() : LeaveGuildRequest(nullptr) {};
  virtual ~LeaveGuildRequest();

  LeaveGuildRequest(const LeaveGuildRequest& from);
  LeaveGuildRequest(LeaveGuildRequest&& from) noexcept
    : LeaveGuildRequest() {
    *this = ::std::move(from);
  }

  inline LeaveGuildRequest& operator=(const LeaveGuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGuildRequest& operator=(LeaveGuildRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveGuildRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGuildRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveGuildRequest*>(
               &_LeaveGuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LeaveGuildRequest& a, LeaveGuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGuildRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveGuildRequest* New() const final {
    return CreateMaybeMessage<LeaveGuildRequest>(nullptr);
  }

  LeaveGuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveGuildRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveGuildRequest& from);
  void MergeFrom(const LeaveGuildRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGuildRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.LeaveGuildRequest";
  }
  protected:
  explicit LeaveGuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.LeaveGuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class AddGuildToGuildListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.AddGuildToGuildListRequest) */ {
 public:
  inline AddGuildToGuildListRequest() : AddGuildToGuildListRequest(nullptr) {};
  virtual ~AddGuildToGuildListRequest();

  AddGuildToGuildListRequest(const AddGuildToGuildListRequest& from);
  AddGuildToGuildListRequest(AddGuildToGuildListRequest&& from) noexcept
    : AddGuildToGuildListRequest() {
    *this = ::std::move(from);
  }

  inline AddGuildToGuildListRequest& operator=(const AddGuildToGuildListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGuildToGuildListRequest& operator=(AddGuildToGuildListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGuildToGuildListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGuildToGuildListRequest* internal_default_instance() {
    return reinterpret_cast<const AddGuildToGuildListRequest*>(
               &_AddGuildToGuildListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddGuildToGuildListRequest& a, AddGuildToGuildListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGuildToGuildListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGuildToGuildListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGuildToGuildListRequest* New() const final {
    return CreateMaybeMessage<AddGuildToGuildListRequest>(nullptr);
  }

  AddGuildToGuildListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGuildToGuildListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGuildToGuildListRequest& from);
  void MergeFrom(const AddGuildToGuildListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGuildToGuildListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.AddGuildToGuildListRequest";
  }
  protected:
  explicit AddGuildToGuildListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeserverFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string homeserver = 2;
  void clear_homeserver();
  const std::string& homeserver() const;
  void set_homeserver(const std::string& value);
  void set_homeserver(std::string&& value);
  void set_homeserver(const char* value);
  void set_homeserver(const char* value, size_t size);
  std::string* mutable_homeserver();
  std::string* release_homeserver();
  void set_allocated_homeserver(std::string* homeserver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homeserver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homeserver(
      std::string* homeserver);
  private:
  const std::string& _internal_homeserver() const;
  void _internal_set_homeserver(const std::string& value);
  std::string* _internal_mutable_homeserver();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.AddGuildToGuildListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeserver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class AddGuildToGuildListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.AddGuildToGuildListResponse) */ {
 public:
  inline AddGuildToGuildListResponse() : AddGuildToGuildListResponse(nullptr) {};
  virtual ~AddGuildToGuildListResponse();

  AddGuildToGuildListResponse(const AddGuildToGuildListResponse& from);
  AddGuildToGuildListResponse(AddGuildToGuildListResponse&& from) noexcept
    : AddGuildToGuildListResponse() {
    *this = ::std::move(from);
  }

  inline AddGuildToGuildListResponse& operator=(const AddGuildToGuildListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGuildToGuildListResponse& operator=(AddGuildToGuildListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGuildToGuildListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGuildToGuildListResponse* internal_default_instance() {
    return reinterpret_cast<const AddGuildToGuildListResponse*>(
               &_AddGuildToGuildListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AddGuildToGuildListResponse& a, AddGuildToGuildListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGuildToGuildListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGuildToGuildListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGuildToGuildListResponse* New() const final {
    return CreateMaybeMessage<AddGuildToGuildListResponse>(nullptr);
  }

  AddGuildToGuildListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGuildToGuildListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGuildToGuildListResponse& from);
  void MergeFrom(const AddGuildToGuildListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGuildToGuildListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.AddGuildToGuildListResponse";
  }
  protected:
  explicit AddGuildToGuildListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.AddGuildToGuildListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class RemoveGuildFromGuildListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.RemoveGuildFromGuildListRequest) */ {
 public:
  inline RemoveGuildFromGuildListRequest() : RemoveGuildFromGuildListRequest(nullptr) {};
  virtual ~RemoveGuildFromGuildListRequest();

  RemoveGuildFromGuildListRequest(const RemoveGuildFromGuildListRequest& from);
  RemoveGuildFromGuildListRequest(RemoveGuildFromGuildListRequest&& from) noexcept
    : RemoveGuildFromGuildListRequest() {
    *this = ::std::move(from);
  }

  inline RemoveGuildFromGuildListRequest& operator=(const RemoveGuildFromGuildListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGuildFromGuildListRequest& operator=(RemoveGuildFromGuildListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveGuildFromGuildListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGuildFromGuildListRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveGuildFromGuildListRequest*>(
               &_RemoveGuildFromGuildListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RemoveGuildFromGuildListRequest& a, RemoveGuildFromGuildListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGuildFromGuildListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGuildFromGuildListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveGuildFromGuildListRequest* New() const final {
    return CreateMaybeMessage<RemoveGuildFromGuildListRequest>(nullptr);
  }

  RemoveGuildFromGuildListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGuildFromGuildListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveGuildFromGuildListRequest& from);
  void MergeFrom(const RemoveGuildFromGuildListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGuildFromGuildListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.RemoveGuildFromGuildListRequest";
  }
  protected:
  explicit RemoveGuildFromGuildListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeserverFieldNumber = 2,
    kGuildIdFieldNumber = 1,
  };
  // string homeserver = 2;
  void clear_homeserver();
  const std::string& homeserver() const;
  void set_homeserver(const std::string& value);
  void set_homeserver(std::string&& value);
  void set_homeserver(const char* value);
  void set_homeserver(const char* value, size_t size);
  std::string* mutable_homeserver();
  std::string* release_homeserver();
  void set_allocated_homeserver(std::string* homeserver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homeserver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homeserver(
      std::string* homeserver);
  private:
  const std::string& _internal_homeserver() const;
  void _internal_set_homeserver(const std::string& value);
  std::string* _internal_mutable_homeserver();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.RemoveGuildFromGuildListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeserver_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// -------------------------------------------------------------------

class RemoveGuildFromGuildListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.RemoveGuildFromGuildListResponse) */ {
 public:
  inline RemoveGuildFromGuildListResponse() : RemoveGuildFromGuildListResponse(nullptr) {};
  virtual ~RemoveGuildFromGuildListResponse();

  RemoveGuildFromGuildListResponse(const RemoveGuildFromGuildListResponse& from);
  RemoveGuildFromGuildListResponse(RemoveGuildFromGuildListResponse&& from) noexcept
    : RemoveGuildFromGuildListResponse() {
    *this = ::std::move(from);
  }

  inline RemoveGuildFromGuildListResponse& operator=(const RemoveGuildFromGuildListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGuildFromGuildListResponse& operator=(RemoveGuildFromGuildListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveGuildFromGuildListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGuildFromGuildListResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveGuildFromGuildListResponse*>(
               &_RemoveGuildFromGuildListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RemoveGuildFromGuildListResponse& a, RemoveGuildFromGuildListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGuildFromGuildListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGuildFromGuildListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveGuildFromGuildListResponse* New() const final {
    return CreateMaybeMessage<RemoveGuildFromGuildListResponse>(nullptr);
  }

  RemoveGuildFromGuildListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGuildFromGuildListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveGuildFromGuildListResponse& from);
  void MergeFrom(const RemoveGuildFromGuildListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGuildFromGuildListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.RemoveGuildFromGuildListResponse";
  }
  protected:
  explicit RemoveGuildFromGuildListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fguilds_2eproto);
    return ::descriptor_table_chat_2fv1_2fguilds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.RemoveGuildFromGuildListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fguilds_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateGuildRequest

// .protocol.harmonytypes.v1.Metadata metadata = 3;
inline bool CreateGuildRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool CreateGuildRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& CreateGuildRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& CreateGuildRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateGuildRequest.metadata)
  return _internal_metadata();
}
inline void CreateGuildRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateGuildRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* CreateGuildRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateGuildRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateGuildRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateGuildRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* CreateGuildRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateGuildRequest.metadata)
  return _internal_mutable_metadata();
}
inline void CreateGuildRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateGuildRequest.metadata)
}

// string guild_name = 1;
inline void CreateGuildRequest::clear_guild_name() {
  guild_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateGuildRequest::guild_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateGuildRequest.guild_name)
  return _internal_guild_name();
}
inline void CreateGuildRequest::set_guild_name(const std::string& value) {
  _internal_set_guild_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateGuildRequest.guild_name)
}
inline std::string* CreateGuildRequest::mutable_guild_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateGuildRequest.guild_name)
  return _internal_mutable_guild_name();
}
inline const std::string& CreateGuildRequest::_internal_guild_name() const {
  return guild_name_.Get();
}
inline void CreateGuildRequest::_internal_set_guild_name(const std::string& value) {
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateGuildRequest::set_guild_name(std::string&& value) {
  
  guild_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateGuildRequest.guild_name)
}
inline void CreateGuildRequest::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateGuildRequest.guild_name)
}
inline void CreateGuildRequest::set_guild_name(const char* value,
    size_t size) {
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateGuildRequest.guild_name)
}
inline std::string* CreateGuildRequest::_internal_mutable_guild_name() {
  
  return guild_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateGuildRequest::release_guild_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateGuildRequest.guild_name)
  return guild_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGuildRequest::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  guild_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateGuildRequest.guild_name)
}
inline std::string* CreateGuildRequest::unsafe_arena_release_guild_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateGuildRequest.guild_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return guild_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateGuildRequest::unsafe_arena_set_allocated_guild_name(
    std::string* guild_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (guild_name != nullptr) {
    
  } else {
    
  }
  guild_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      guild_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateGuildRequest.guild_name)
}

// string picture_url = 2;
inline void CreateGuildRequest::clear_picture_url() {
  picture_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateGuildRequest::picture_url() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateGuildRequest.picture_url)
  return _internal_picture_url();
}
inline void CreateGuildRequest::set_picture_url(const std::string& value) {
  _internal_set_picture_url(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateGuildRequest.picture_url)
}
inline std::string* CreateGuildRequest::mutable_picture_url() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateGuildRequest.picture_url)
  return _internal_mutable_picture_url();
}
inline const std::string& CreateGuildRequest::_internal_picture_url() const {
  return picture_url_.Get();
}
inline void CreateGuildRequest::_internal_set_picture_url(const std::string& value) {
  
  picture_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateGuildRequest::set_picture_url(std::string&& value) {
  
  picture_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateGuildRequest.picture_url)
}
inline void CreateGuildRequest::set_picture_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateGuildRequest.picture_url)
}
inline void CreateGuildRequest::set_picture_url(const char* value,
    size_t size) {
  
  picture_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateGuildRequest.picture_url)
}
inline std::string* CreateGuildRequest::_internal_mutable_picture_url() {
  
  return picture_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateGuildRequest::release_picture_url() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateGuildRequest.picture_url)
  return picture_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateGuildRequest::set_allocated_picture_url(std::string* picture_url) {
  if (picture_url != nullptr) {
    
  } else {
    
  }
  picture_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateGuildRequest.picture_url)
}
inline std::string* CreateGuildRequest::unsafe_arena_release_picture_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateGuildRequest.picture_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return picture_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateGuildRequest::unsafe_arena_set_allocated_picture_url(
    std::string* picture_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (picture_url != nullptr) {
    
  } else {
    
  }
  picture_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      picture_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateGuildRequest.picture_url)
}

// -------------------------------------------------------------------

// CreateGuildResponse

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void CreateGuildResponse::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateGuildResponse::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateGuildResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateGuildResponse.guild_id)
  return _internal_guild_id();
}
inline void CreateGuildResponse::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void CreateGuildResponse::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateGuildResponse.guild_id)
}

// -------------------------------------------------------------------

// CreateInviteRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void CreateInviteRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateInviteRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateInviteRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateInviteRequest.guild_id)
  return _internal_guild_id();
}
inline void CreateInviteRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void CreateInviteRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateInviteRequest.guild_id)
}

// string name = 2;
inline void CreateInviteRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInviteRequest::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateInviteRequest.name)
  return _internal_name();
}
inline void CreateInviteRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateInviteRequest.name)
}
inline std::string* CreateInviteRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateInviteRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateInviteRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateInviteRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInviteRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateInviteRequest.name)
}
inline void CreateInviteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateInviteRequest.name)
}
inline void CreateInviteRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateInviteRequest.name)
}
inline std::string* CreateInviteRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInviteRequest::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateInviteRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInviteRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateInviteRequest.name)
}
inline std::string* CreateInviteRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateInviteRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInviteRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateInviteRequest.name)
}

// int32 possible_uses = 3;
inline void CreateInviteRequest::clear_possible_uses() {
  possible_uses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateInviteRequest::_internal_possible_uses() const {
  return possible_uses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateInviteRequest::possible_uses() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateInviteRequest.possible_uses)
  return _internal_possible_uses();
}
inline void CreateInviteRequest::_internal_set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  possible_uses_ = value;
}
inline void CreateInviteRequest::set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_possible_uses(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateInviteRequest.possible_uses)
}

// -------------------------------------------------------------------

// CreateInviteResponse

// string name = 1;
inline void CreateInviteResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInviteResponse::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateInviteResponse.name)
  return _internal_name();
}
inline void CreateInviteResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateInviteResponse.name)
}
inline std::string* CreateInviteResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateInviteResponse.name)
  return _internal_mutable_name();
}
inline const std::string& CreateInviteResponse::_internal_name() const {
  return name_.Get();
}
inline void CreateInviteResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInviteResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateInviteResponse.name)
}
inline void CreateInviteResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateInviteResponse.name)
}
inline void CreateInviteResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateInviteResponse.name)
}
inline std::string* CreateInviteResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInviteResponse::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateInviteResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInviteResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateInviteResponse.name)
}
inline std::string* CreateInviteResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateInviteResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInviteResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateInviteResponse.name)
}

// -------------------------------------------------------------------

// GetGuildListRequest

// -------------------------------------------------------------------

// GetGuildListResponse_GuildListEntry

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildListResponse_GuildListEntry::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildListResponse_GuildListEntry::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildListResponse_GuildListEntry::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildListResponse.GuildListEntry.guild_id)
  return _internal_guild_id();
}
inline void GetGuildListResponse_GuildListEntry::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildListResponse_GuildListEntry::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildListResponse.GuildListEntry.guild_id)
}

// string host = 2;
inline void GetGuildListResponse_GuildListEntry::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGuildListResponse_GuildListEntry::host() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
  return _internal_host();
}
inline void GetGuildListResponse_GuildListEntry::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}
inline std::string* GetGuildListResponse_GuildListEntry::mutable_host() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
  return _internal_mutable_host();
}
inline const std::string& GetGuildListResponse_GuildListEntry::_internal_host() const {
  return host_.Get();
}
inline void GetGuildListResponse_GuildListEntry::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGuildListResponse_GuildListEntry::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}
inline void GetGuildListResponse_GuildListEntry::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}
inline void GetGuildListResponse_GuildListEntry::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}
inline std::string* GetGuildListResponse_GuildListEntry::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGuildListResponse_GuildListEntry::release_host() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGuildListResponse_GuildListEntry::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}
inline std::string* GetGuildListResponse_GuildListEntry::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetGuildListResponse_GuildListEntry::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildListResponse.GuildListEntry.host)
}

// -------------------------------------------------------------------

// GetGuildListResponse

// repeated .protocol.chat.v1.GetGuildListResponse.GuildListEntry guilds = 1;
inline int GetGuildListResponse::_internal_guilds_size() const {
  return guilds_.size();
}
inline int GetGuildListResponse::guilds_size() const {
  return _internal_guilds_size();
}
inline void GetGuildListResponse::clear_guilds() {
  guilds_.Clear();
}
inline ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* GetGuildListResponse::mutable_guilds(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildListResponse.guilds)
  return guilds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildListResponse_GuildListEntry >*
GetGuildListResponse::mutable_guilds() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetGuildListResponse.guilds)
  return &guilds_;
}
inline const ::protocol::chat::v1::GetGuildListResponse_GuildListEntry& GetGuildListResponse::_internal_guilds(int index) const {
  return guilds_.Get(index);
}
inline const ::protocol::chat::v1::GetGuildListResponse_GuildListEntry& GetGuildListResponse::guilds(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildListResponse.guilds)
  return _internal_guilds(index);
}
inline ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* GetGuildListResponse::_internal_add_guilds() {
  return guilds_.Add();
}
inline ::protocol::chat::v1::GetGuildListResponse_GuildListEntry* GetGuildListResponse::add_guilds() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetGuildListResponse.guilds)
  return _internal_add_guilds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildListResponse_GuildListEntry >&
GetGuildListResponse::guilds() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetGuildListResponse.guilds)
  return guilds_;
}

// -------------------------------------------------------------------

// GetGuildRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildRequest.guild_id)
  return _internal_guild_id();
}
inline void GetGuildRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildRequest.guild_id)
}

// -------------------------------------------------------------------

// GetGuildResponse

// .protocol.harmonytypes.v1.Metadata metadata = 4;
inline bool GetGuildResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetGuildResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& GetGuildResponse::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& GetGuildResponse::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildResponse.metadata)
  return _internal_metadata();
}
inline void GetGuildResponse::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildResponse.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildResponse::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildResponse.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* GetGuildResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildResponse.metadata)
  return _internal_mutable_metadata();
}
inline void GetGuildResponse::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildResponse.metadata)
}

// string guild_name = 1;
inline void GetGuildResponse::clear_guild_name() {
  guild_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGuildResponse::guild_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildResponse.guild_name)
  return _internal_guild_name();
}
inline void GetGuildResponse::set_guild_name(const std::string& value) {
  _internal_set_guild_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildResponse.guild_name)
}
inline std::string* GetGuildResponse::mutable_guild_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildResponse.guild_name)
  return _internal_mutable_guild_name();
}
inline const std::string& GetGuildResponse::_internal_guild_name() const {
  return guild_name_.Get();
}
inline void GetGuildResponse::_internal_set_guild_name(const std::string& value) {
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGuildResponse::set_guild_name(std::string&& value) {
  
  guild_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetGuildResponse.guild_name)
}
inline void GetGuildResponse::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetGuildResponse.guild_name)
}
inline void GetGuildResponse::set_guild_name(const char* value,
    size_t size) {
  
  guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetGuildResponse.guild_name)
}
inline std::string* GetGuildResponse::_internal_mutable_guild_name() {
  
  return guild_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGuildResponse::release_guild_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildResponse.guild_name)
  return guild_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGuildResponse::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  guild_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildResponse.guild_name)
}
inline std::string* GetGuildResponse::unsafe_arena_release_guild_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetGuildResponse.guild_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return guild_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetGuildResponse::unsafe_arena_set_allocated_guild_name(
    std::string* guild_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (guild_name != nullptr) {
    
  } else {
    
  }
  guild_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      guild_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildResponse.guild_name)
}

// uint64 guild_owner = 2 [jstype = JS_STRING];
inline void GetGuildResponse::clear_guild_owner() {
  guild_owner_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildResponse::_internal_guild_owner() const {
  return guild_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildResponse::guild_owner() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildResponse.guild_owner)
  return _internal_guild_owner();
}
inline void GetGuildResponse::_internal_set_guild_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_owner_ = value;
}
inline void GetGuildResponse::set_guild_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_owner(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildResponse.guild_owner)
}

// string guild_picture = 3;
inline void GetGuildResponse::clear_guild_picture() {
  guild_picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGuildResponse::guild_picture() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildResponse.guild_picture)
  return _internal_guild_picture();
}
inline void GetGuildResponse::set_guild_picture(const std::string& value) {
  _internal_set_guild_picture(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildResponse.guild_picture)
}
inline std::string* GetGuildResponse::mutable_guild_picture() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildResponse.guild_picture)
  return _internal_mutable_guild_picture();
}
inline const std::string& GetGuildResponse::_internal_guild_picture() const {
  return guild_picture_.Get();
}
inline void GetGuildResponse::_internal_set_guild_picture(const std::string& value) {
  
  guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGuildResponse::set_guild_picture(std::string&& value) {
  
  guild_picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetGuildResponse.guild_picture)
}
inline void GetGuildResponse::set_guild_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetGuildResponse.guild_picture)
}
inline void GetGuildResponse::set_guild_picture(const char* value,
    size_t size) {
  
  guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetGuildResponse.guild_picture)
}
inline std::string* GetGuildResponse::_internal_mutable_guild_picture() {
  
  return guild_picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGuildResponse::release_guild_picture() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildResponse.guild_picture)
  return guild_picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGuildResponse::set_allocated_guild_picture(std::string* guild_picture) {
  if (guild_picture != nullptr) {
    
  } else {
    
  }
  guild_picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildResponse.guild_picture)
}
inline std::string* GetGuildResponse::unsafe_arena_release_guild_picture() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetGuildResponse.guild_picture)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return guild_picture_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetGuildResponse::unsafe_arena_set_allocated_guild_picture(
    std::string* guild_picture) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (guild_picture != nullptr) {
    
  } else {
    
  }
  guild_picture_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      guild_picture, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildResponse.guild_picture)
}

// -------------------------------------------------------------------

// GetGuildInvitesRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildInvitesRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildInvitesRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildInvitesRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildInvitesRequest.guild_id)
  return _internal_guild_id();
}
inline void GetGuildInvitesRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildInvitesRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildInvitesRequest.guild_id)
}

// -------------------------------------------------------------------

// GetGuildInvitesResponse_Invite

// string invite_id = 1;
inline void GetGuildInvitesResponse_Invite::clear_invite_id() {
  invite_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetGuildInvitesResponse_Invite::invite_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
  return _internal_invite_id();
}
inline void GetGuildInvitesResponse_Invite::set_invite_id(const std::string& value) {
  _internal_set_invite_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}
inline std::string* GetGuildInvitesResponse_Invite::mutable_invite_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
  return _internal_mutable_invite_id();
}
inline const std::string& GetGuildInvitesResponse_Invite::_internal_invite_id() const {
  return invite_id_.Get();
}
inline void GetGuildInvitesResponse_Invite::_internal_set_invite_id(const std::string& value) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetGuildInvitesResponse_Invite::set_invite_id(std::string&& value) {
  
  invite_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}
inline void GetGuildInvitesResponse_Invite::set_invite_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}
inline void GetGuildInvitesResponse_Invite::set_invite_id(const char* value,
    size_t size) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}
inline std::string* GetGuildInvitesResponse_Invite::_internal_mutable_invite_id() {
  
  return invite_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetGuildInvitesResponse_Invite::release_invite_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
  return invite_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetGuildInvitesResponse_Invite::set_allocated_invite_id(std::string* invite_id) {
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}
inline std::string* GetGuildInvitesResponse_Invite::unsafe_arena_release_invite_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invite_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetGuildInvitesResponse_Invite::unsafe_arena_set_allocated_invite_id(
    std::string* invite_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invite_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetGuildInvitesResponse.Invite.invite_id)
}

// int32 possible_uses = 2;
inline void GetGuildInvitesResponse_Invite::clear_possible_uses() {
  possible_uses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGuildInvitesResponse_Invite::_internal_possible_uses() const {
  return possible_uses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGuildInvitesResponse_Invite::possible_uses() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildInvitesResponse.Invite.possible_uses)
  return _internal_possible_uses();
}
inline void GetGuildInvitesResponse_Invite::_internal_set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  possible_uses_ = value;
}
inline void GetGuildInvitesResponse_Invite::set_possible_uses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_possible_uses(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildInvitesResponse.Invite.possible_uses)
}

// int32 use_count = 3;
inline void GetGuildInvitesResponse_Invite::clear_use_count() {
  use_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGuildInvitesResponse_Invite::_internal_use_count() const {
  return use_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGuildInvitesResponse_Invite::use_count() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildInvitesResponse.Invite.use_count)
  return _internal_use_count();
}
inline void GetGuildInvitesResponse_Invite::_internal_set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_count_ = value;
}
inline void GetGuildInvitesResponse_Invite::set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildInvitesResponse.Invite.use_count)
}

// -------------------------------------------------------------------

// GetGuildInvitesResponse

// repeated .protocol.chat.v1.GetGuildInvitesResponse.Invite invites = 1;
inline int GetGuildInvitesResponse::_internal_invites_size() const {
  return invites_.size();
}
inline int GetGuildInvitesResponse::invites_size() const {
  return _internal_invites_size();
}
inline void GetGuildInvitesResponse::clear_invites() {
  invites_.Clear();
}
inline ::protocol::chat::v1::GetGuildInvitesResponse_Invite* GetGuildInvitesResponse::mutable_invites(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetGuildInvitesResponse.invites)
  return invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildInvitesResponse_Invite >*
GetGuildInvitesResponse::mutable_invites() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetGuildInvitesResponse.invites)
  return &invites_;
}
inline const ::protocol::chat::v1::GetGuildInvitesResponse_Invite& GetGuildInvitesResponse::_internal_invites(int index) const {
  return invites_.Get(index);
}
inline const ::protocol::chat::v1::GetGuildInvitesResponse_Invite& GetGuildInvitesResponse::invites(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildInvitesResponse.invites)
  return _internal_invites(index);
}
inline ::protocol::chat::v1::GetGuildInvitesResponse_Invite* GetGuildInvitesResponse::_internal_add_invites() {
  return invites_.Add();
}
inline ::protocol::chat::v1::GetGuildInvitesResponse_Invite* GetGuildInvitesResponse::add_invites() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetGuildInvitesResponse.invites)
  return _internal_add_invites();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetGuildInvitesResponse_Invite >&
GetGuildInvitesResponse::invites() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetGuildInvitesResponse.invites)
  return invites_;
}

// -------------------------------------------------------------------

// GetGuildMembersRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetGuildMembersRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildMembersRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildMembersRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildMembersRequest.guild_id)
  return _internal_guild_id();
}
inline void GetGuildMembersRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetGuildMembersRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildMembersRequest.guild_id)
}

// -------------------------------------------------------------------

// GetGuildMembersResponse

// repeated uint64 members = 1 [jstype = JS_STRING];
inline int GetGuildMembersResponse::_internal_members_size() const {
  return members_.size();
}
inline int GetGuildMembersResponse::members_size() const {
  return _internal_members_size();
}
inline void GetGuildMembersResponse::clear_members() {
  members_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildMembersResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetGuildMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetGuildMembersResponse.members)
  return _internal_members(index);
}
inline void GetGuildMembersResponse::set_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetGuildMembersResponse.members)
}
inline void GetGuildMembersResponse::_internal_add_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  members_.Add(value);
}
inline void GetGuildMembersResponse::add_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_members(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetGuildMembersResponse.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetGuildMembersResponse::_internal_members() const {
  return members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetGuildMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetGuildMembersResponse.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetGuildMembersResponse::_internal_mutable_members() {
  return &members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetGuildMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetGuildMembersResponse.members)
  return _internal_mutable_members();
}

// -------------------------------------------------------------------

// UpdateGuildInformationRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void UpdateGuildInformationRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGuildInformationRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateGuildInformationRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.guild_id)
  return _internal_guild_id();
}
inline void UpdateGuildInformationRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void UpdateGuildInformationRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.guild_id)
}

// string new_guild_name = 2;
inline void UpdateGuildInformationRequest::clear_new_guild_name() {
  new_guild_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateGuildInformationRequest::new_guild_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
  return _internal_new_guild_name();
}
inline void UpdateGuildInformationRequest::set_new_guild_name(const std::string& value) {
  _internal_set_new_guild_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}
inline std::string* UpdateGuildInformationRequest::mutable_new_guild_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
  return _internal_mutable_new_guild_name();
}
inline const std::string& UpdateGuildInformationRequest::_internal_new_guild_name() const {
  return new_guild_name_.Get();
}
inline void UpdateGuildInformationRequest::_internal_set_new_guild_name(const std::string& value) {
  
  new_guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateGuildInformationRequest::set_new_guild_name(std::string&& value) {
  
  new_guild_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}
inline void UpdateGuildInformationRequest::set_new_guild_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}
inline void UpdateGuildInformationRequest::set_new_guild_name(const char* value,
    size_t size) {
  
  new_guild_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}
inline std::string* UpdateGuildInformationRequest::_internal_mutable_new_guild_name() {
  
  return new_guild_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateGuildInformationRequest::release_new_guild_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
  return new_guild_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGuildInformationRequest::set_allocated_new_guild_name(std::string* new_guild_name) {
  if (new_guild_name != nullptr) {
    
  } else {
    
  }
  new_guild_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_guild_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}
inline std::string* UpdateGuildInformationRequest::unsafe_arena_release_new_guild_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_guild_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateGuildInformationRequest::unsafe_arena_set_allocated_new_guild_name(
    std::string* new_guild_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_guild_name != nullptr) {
    
  } else {
    
  }
  new_guild_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_guild_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_name)
}

// bool update_guild_name = 3;
inline void UpdateGuildInformationRequest::clear_update_guild_name() {
  update_guild_name_ = false;
}
inline bool UpdateGuildInformationRequest::_internal_update_guild_name() const {
  return update_guild_name_;
}
inline bool UpdateGuildInformationRequest::update_guild_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.update_guild_name)
  return _internal_update_guild_name();
}
inline void UpdateGuildInformationRequest::_internal_set_update_guild_name(bool value) {
  
  update_guild_name_ = value;
}
inline void UpdateGuildInformationRequest::set_update_guild_name(bool value) {
  _internal_set_update_guild_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.update_guild_name)
}

// string new_guild_picture = 4;
inline void UpdateGuildInformationRequest::clear_new_guild_picture() {
  new_guild_picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateGuildInformationRequest::new_guild_picture() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
  return _internal_new_guild_picture();
}
inline void UpdateGuildInformationRequest::set_new_guild_picture(const std::string& value) {
  _internal_set_new_guild_picture(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}
inline std::string* UpdateGuildInformationRequest::mutable_new_guild_picture() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
  return _internal_mutable_new_guild_picture();
}
inline const std::string& UpdateGuildInformationRequest::_internal_new_guild_picture() const {
  return new_guild_picture_.Get();
}
inline void UpdateGuildInformationRequest::_internal_set_new_guild_picture(const std::string& value) {
  
  new_guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateGuildInformationRequest::set_new_guild_picture(std::string&& value) {
  
  new_guild_picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}
inline void UpdateGuildInformationRequest::set_new_guild_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}
inline void UpdateGuildInformationRequest::set_new_guild_picture(const char* value,
    size_t size) {
  
  new_guild_picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}
inline std::string* UpdateGuildInformationRequest::_internal_mutable_new_guild_picture() {
  
  return new_guild_picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateGuildInformationRequest::release_new_guild_picture() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
  return new_guild_picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateGuildInformationRequest::set_allocated_new_guild_picture(std::string* new_guild_picture) {
  if (new_guild_picture != nullptr) {
    
  } else {
    
  }
  new_guild_picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_guild_picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}
inline std::string* UpdateGuildInformationRequest::unsafe_arena_release_new_guild_picture() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return new_guild_picture_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateGuildInformationRequest::unsafe_arena_set_allocated_new_guild_picture(
    std::string* new_guild_picture) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_guild_picture != nullptr) {
    
  } else {
    
  }
  new_guild_picture_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_guild_picture, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.new_guild_picture)
}

// bool update_guild_picture = 5;
inline void UpdateGuildInformationRequest::clear_update_guild_picture() {
  update_guild_picture_ = false;
}
inline bool UpdateGuildInformationRequest::_internal_update_guild_picture() const {
  return update_guild_picture_;
}
inline bool UpdateGuildInformationRequest::update_guild_picture() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.update_guild_picture)
  return _internal_update_guild_picture();
}
inline void UpdateGuildInformationRequest::_internal_set_update_guild_picture(bool value) {
  
  update_guild_picture_ = value;
}
inline void UpdateGuildInformationRequest::set_update_guild_picture(bool value) {
  _internal_set_update_guild_picture(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.update_guild_picture)
}

// .protocol.harmonytypes.v1.Metadata metadata = 6;
inline bool UpdateGuildInformationRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool UpdateGuildInformationRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateGuildInformationRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateGuildInformationRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.metadata)
  return _internal_metadata();
}
inline void UpdateGuildInformationRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateGuildInformationRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateGuildInformationRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateGuildInformationRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateGuildInformationRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateGuildInformationRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateGuildInformationRequest.metadata)
  return _internal_mutable_metadata();
}
inline void UpdateGuildInformationRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateGuildInformationRequest.metadata)
}

// bool update_metadata = 7;
inline void UpdateGuildInformationRequest::clear_update_metadata() {
  update_metadata_ = false;
}
inline bool UpdateGuildInformationRequest::_internal_update_metadata() const {
  return update_metadata_;
}
inline bool UpdateGuildInformationRequest::update_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateGuildInformationRequest.update_metadata)
  return _internal_update_metadata();
}
inline void UpdateGuildInformationRequest::_internal_set_update_metadata(bool value) {
  
  update_metadata_ = value;
}
inline void UpdateGuildInformationRequest::set_update_metadata(bool value) {
  _internal_set_update_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateGuildInformationRequest.update_metadata)
}

// -------------------------------------------------------------------

// DeleteGuildRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void DeleteGuildRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteGuildRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteGuildRequest.guild_id)
  return _internal_guild_id();
}
inline void DeleteGuildRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void DeleteGuildRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteGuildRequest.guild_id)
}

// -------------------------------------------------------------------

// DeleteInviteRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void DeleteInviteRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteInviteRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteInviteRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteInviteRequest.guild_id)
  return _internal_guild_id();
}
inline void DeleteInviteRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void DeleteInviteRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteInviteRequest.guild_id)
}

// string invite_id = 2;
inline void DeleteInviteRequest::clear_invite_id() {
  invite_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteInviteRequest::invite_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteInviteRequest.invite_id)
  return _internal_invite_id();
}
inline void DeleteInviteRequest::set_invite_id(const std::string& value) {
  _internal_set_invite_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteInviteRequest.invite_id)
}
inline std::string* DeleteInviteRequest::mutable_invite_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.DeleteInviteRequest.invite_id)
  return _internal_mutable_invite_id();
}
inline const std::string& DeleteInviteRequest::_internal_invite_id() const {
  return invite_id_.Get();
}
inline void DeleteInviteRequest::_internal_set_invite_id(const std::string& value) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteInviteRequest::set_invite_id(std::string&& value) {
  
  invite_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.DeleteInviteRequest.invite_id)
}
inline void DeleteInviteRequest::set_invite_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.DeleteInviteRequest.invite_id)
}
inline void DeleteInviteRequest::set_invite_id(const char* value,
    size_t size) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.DeleteInviteRequest.invite_id)
}
inline std::string* DeleteInviteRequest::_internal_mutable_invite_id() {
  
  return invite_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteInviteRequest::release_invite_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.DeleteInviteRequest.invite_id)
  return invite_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteInviteRequest::set_allocated_invite_id(std::string* invite_id) {
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.DeleteInviteRequest.invite_id)
}
inline std::string* DeleteInviteRequest::unsafe_arena_release_invite_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.DeleteInviteRequest.invite_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invite_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteInviteRequest::unsafe_arena_set_allocated_invite_id(
    std::string* invite_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invite_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.DeleteInviteRequest.invite_id)
}

// -------------------------------------------------------------------

// JoinGuildRequest

// string invite_id = 1;
inline void JoinGuildRequest::clear_invite_id() {
  invite_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoinGuildRequest::invite_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.JoinGuildRequest.invite_id)
  return _internal_invite_id();
}
inline void JoinGuildRequest::set_invite_id(const std::string& value) {
  _internal_set_invite_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.JoinGuildRequest.invite_id)
}
inline std::string* JoinGuildRequest::mutable_invite_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.JoinGuildRequest.invite_id)
  return _internal_mutable_invite_id();
}
inline const std::string& JoinGuildRequest::_internal_invite_id() const {
  return invite_id_.Get();
}
inline void JoinGuildRequest::_internal_set_invite_id(const std::string& value) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinGuildRequest::set_invite_id(std::string&& value) {
  
  invite_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.JoinGuildRequest.invite_id)
}
inline void JoinGuildRequest::set_invite_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.JoinGuildRequest.invite_id)
}
inline void JoinGuildRequest::set_invite_id(const char* value,
    size_t size) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.JoinGuildRequest.invite_id)
}
inline std::string* JoinGuildRequest::_internal_mutable_invite_id() {
  
  return invite_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinGuildRequest::release_invite_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.JoinGuildRequest.invite_id)
  return invite_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinGuildRequest::set_allocated_invite_id(std::string* invite_id) {
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.JoinGuildRequest.invite_id)
}
inline std::string* JoinGuildRequest::unsafe_arena_release_invite_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.JoinGuildRequest.invite_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invite_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JoinGuildRequest::unsafe_arena_set_allocated_invite_id(
    std::string* invite_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invite_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.JoinGuildRequest.invite_id)
}

// -------------------------------------------------------------------

// JoinGuildResponse

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void JoinGuildResponse::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinGuildResponse::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinGuildResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.JoinGuildResponse.guild_id)
  return _internal_guild_id();
}
inline void JoinGuildResponse::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void JoinGuildResponse::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.JoinGuildResponse.guild_id)
}

// -------------------------------------------------------------------

// PreviewGuildRequest

// string invite_id = 1;
inline void PreviewGuildRequest::clear_invite_id() {
  invite_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreviewGuildRequest::invite_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.PreviewGuildRequest.invite_id)
  return _internal_invite_id();
}
inline void PreviewGuildRequest::set_invite_id(const std::string& value) {
  _internal_set_invite_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.PreviewGuildRequest.invite_id)
}
inline std::string* PreviewGuildRequest::mutable_invite_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.PreviewGuildRequest.invite_id)
  return _internal_mutable_invite_id();
}
inline const std::string& PreviewGuildRequest::_internal_invite_id() const {
  return invite_id_.Get();
}
inline void PreviewGuildRequest::_internal_set_invite_id(const std::string& value) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreviewGuildRequest::set_invite_id(std::string&& value) {
  
  invite_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.PreviewGuildRequest.invite_id)
}
inline void PreviewGuildRequest::set_invite_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.PreviewGuildRequest.invite_id)
}
inline void PreviewGuildRequest::set_invite_id(const char* value,
    size_t size) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.PreviewGuildRequest.invite_id)
}
inline std::string* PreviewGuildRequest::_internal_mutable_invite_id() {
  
  return invite_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreviewGuildRequest::release_invite_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.PreviewGuildRequest.invite_id)
  return invite_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewGuildRequest::set_allocated_invite_id(std::string* invite_id) {
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.PreviewGuildRequest.invite_id)
}
inline std::string* PreviewGuildRequest::unsafe_arena_release_invite_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.PreviewGuildRequest.invite_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invite_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreviewGuildRequest::unsafe_arena_set_allocated_invite_id(
    std::string* invite_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invite_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.PreviewGuildRequest.invite_id)
}

// -------------------------------------------------------------------

// PreviewGuildResponse

// string name = 1;
inline void PreviewGuildResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreviewGuildResponse::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.PreviewGuildResponse.name)
  return _internal_name();
}
inline void PreviewGuildResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.PreviewGuildResponse.name)
}
inline std::string* PreviewGuildResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.PreviewGuildResponse.name)
  return _internal_mutable_name();
}
inline const std::string& PreviewGuildResponse::_internal_name() const {
  return name_.Get();
}
inline void PreviewGuildResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreviewGuildResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.PreviewGuildResponse.name)
}
inline void PreviewGuildResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.PreviewGuildResponse.name)
}
inline void PreviewGuildResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.PreviewGuildResponse.name)
}
inline std::string* PreviewGuildResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreviewGuildResponse::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.PreviewGuildResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewGuildResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.PreviewGuildResponse.name)
}
inline std::string* PreviewGuildResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.PreviewGuildResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreviewGuildResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.PreviewGuildResponse.name)
}

// string avatar = 2;
inline void PreviewGuildResponse::clear_avatar() {
  avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PreviewGuildResponse::avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.PreviewGuildResponse.avatar)
  return _internal_avatar();
}
inline void PreviewGuildResponse::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.PreviewGuildResponse.avatar)
}
inline std::string* PreviewGuildResponse::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.PreviewGuildResponse.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& PreviewGuildResponse::_internal_avatar() const {
  return avatar_.Get();
}
inline void PreviewGuildResponse::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreviewGuildResponse::set_avatar(std::string&& value) {
  
  avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.PreviewGuildResponse.avatar)
}
inline void PreviewGuildResponse::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.PreviewGuildResponse.avatar)
}
inline void PreviewGuildResponse::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.PreviewGuildResponse.avatar)
}
inline std::string* PreviewGuildResponse::_internal_mutable_avatar() {
  
  return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreviewGuildResponse::release_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.PreviewGuildResponse.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewGuildResponse::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.PreviewGuildResponse.avatar)
}
inline std::string* PreviewGuildResponse::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.PreviewGuildResponse.avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreviewGuildResponse::unsafe_arena_set_allocated_avatar(
    std::string* avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.PreviewGuildResponse.avatar)
}

// uint64 member_count = 3 [jstype = JS_STRING];
inline void PreviewGuildResponse::clear_member_count() {
  member_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewGuildResponse::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PreviewGuildResponse::member_count() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.PreviewGuildResponse.member_count)
  return _internal_member_count();
}
inline void PreviewGuildResponse::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_count_ = value;
}
inline void PreviewGuildResponse::set_member_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.PreviewGuildResponse.member_count)
}

// -------------------------------------------------------------------

// LeaveGuildRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void LeaveGuildRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LeaveGuildRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LeaveGuildRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.LeaveGuildRequest.guild_id)
  return _internal_guild_id();
}
inline void LeaveGuildRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void LeaveGuildRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.LeaveGuildRequest.guild_id)
}

// -------------------------------------------------------------------

// AddGuildToGuildListRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void AddGuildToGuildListRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildToGuildListRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddGuildToGuildListRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddGuildToGuildListRequest.guild_id)
  return _internal_guild_id();
}
inline void AddGuildToGuildListRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void AddGuildToGuildListRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddGuildToGuildListRequest.guild_id)
}

// string homeserver = 2;
inline void AddGuildToGuildListRequest::clear_homeserver() {
  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddGuildToGuildListRequest::homeserver() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
  return _internal_homeserver();
}
inline void AddGuildToGuildListRequest::set_homeserver(const std::string& value) {
  _internal_set_homeserver(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}
inline std::string* AddGuildToGuildListRequest::mutable_homeserver() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
  return _internal_mutable_homeserver();
}
inline const std::string& AddGuildToGuildListRequest::_internal_homeserver() const {
  return homeserver_.Get();
}
inline void AddGuildToGuildListRequest::_internal_set_homeserver(const std::string& value) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddGuildToGuildListRequest::set_homeserver(std::string&& value) {
  
  homeserver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}
inline void AddGuildToGuildListRequest::set_homeserver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}
inline void AddGuildToGuildListRequest::set_homeserver(const char* value,
    size_t size) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}
inline std::string* AddGuildToGuildListRequest::_internal_mutable_homeserver() {
  
  return homeserver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddGuildToGuildListRequest::release_homeserver() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
  return homeserver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddGuildToGuildListRequest::set_allocated_homeserver(std::string* homeserver) {
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeserver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}
inline std::string* AddGuildToGuildListRequest::unsafe_arena_release_homeserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return homeserver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddGuildToGuildListRequest::unsafe_arena_set_allocated_homeserver(
    std::string* homeserver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homeserver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.AddGuildToGuildListRequest.homeserver)
}

// -------------------------------------------------------------------

// AddGuildToGuildListResponse

// -------------------------------------------------------------------

// RemoveGuildFromGuildListRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void RemoveGuildFromGuildListRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveGuildFromGuildListRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveGuildFromGuildListRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.RemoveGuildFromGuildListRequest.guild_id)
  return _internal_guild_id();
}
inline void RemoveGuildFromGuildListRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void RemoveGuildFromGuildListRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.RemoveGuildFromGuildListRequest.guild_id)
}

// string homeserver = 2;
inline void RemoveGuildFromGuildListRequest::clear_homeserver() {
  homeserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveGuildFromGuildListRequest::homeserver() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
  return _internal_homeserver();
}
inline void RemoveGuildFromGuildListRequest::set_homeserver(const std::string& value) {
  _internal_set_homeserver(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}
inline std::string* RemoveGuildFromGuildListRequest::mutable_homeserver() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
  return _internal_mutable_homeserver();
}
inline const std::string& RemoveGuildFromGuildListRequest::_internal_homeserver() const {
  return homeserver_.Get();
}
inline void RemoveGuildFromGuildListRequest::_internal_set_homeserver(const std::string& value) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveGuildFromGuildListRequest::set_homeserver(std::string&& value) {
  
  homeserver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}
inline void RemoveGuildFromGuildListRequest::set_homeserver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}
inline void RemoveGuildFromGuildListRequest::set_homeserver(const char* value,
    size_t size) {
  
  homeserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}
inline std::string* RemoveGuildFromGuildListRequest::_internal_mutable_homeserver() {
  
  return homeserver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveGuildFromGuildListRequest::release_homeserver() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
  return homeserver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveGuildFromGuildListRequest::set_allocated_homeserver(std::string* homeserver) {
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeserver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}
inline std::string* RemoveGuildFromGuildListRequest::unsafe_arena_release_homeserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return homeserver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveGuildFromGuildListRequest::unsafe_arena_set_allocated_homeserver(
    std::string* homeserver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homeserver != nullptr) {
    
  } else {
    
  }
  homeserver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homeserver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.RemoveGuildFromGuildListRequest.homeserver)
}

// -------------------------------------------------------------------

// RemoveGuildFromGuildListResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fguilds_2eproto
