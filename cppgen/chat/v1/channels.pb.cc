// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/channels.proto

#include "chat/v1/channels.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fchannels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class CreateChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateChannelRequest> _instance;
} _CreateChannelRequest_default_instance_;
class CreateChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateChannelResponse> _instance;
} _CreateChannelResponse_default_instance_;
class GetGuildChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuildChannelsRequest> _instance;
} _GetGuildChannelsRequest_default_instance_;
class GetGuildChannelsResponse_ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuildChannelsResponse_Channel> _instance;
} _GetGuildChannelsResponse_Channel_default_instance_;
class GetGuildChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuildChannelsResponse> _instance;
} _GetGuildChannelsResponse_default_instance_;
class UpdateChannelInformationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateChannelInformationRequest> _instance;
} _UpdateChannelInformationRequest_default_instance_;
class UpdateChannelOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateChannelOrderRequest> _instance;
} _UpdateChannelOrderRequest_default_instance_;
class DeleteChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteChannelRequest> _instance;
} _DeleteChannelRequest_default_instance_;
class TypingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypingRequest> _instance;
} _TypingRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
static void InitDefaultsscc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_CreateChannelRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::CreateChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::CreateChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_CreateChannelResponse_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_CreateChannelResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::CreateChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::CreateChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateChannelResponse_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateChannelResponse_chat_2fv1_2fchannels_2eproto}, {}};

static void InitDefaultsscc_info_DeleteChannelRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DeleteChannelRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DeleteChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DeleteChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteChannelRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteChannelRequest_chat_2fv1_2fchannels_2eproto}, {}};

static void InitDefaultsscc_info_GetGuildChannelsRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetGuildChannelsRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetGuildChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetGuildChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetGuildChannelsRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetGuildChannelsRequest_chat_2fv1_2fchannels_2eproto}, {}};

static void InitDefaultsscc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetGuildChannelsResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetGuildChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetGuildChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto}, {
      &scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto.base,}};

static void InitDefaultsscc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetGuildChannelsResponse_Channel_default_instance_;
    new (ptr) ::protocol::chat::v1::GetGuildChannelsResponse_Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetGuildChannelsResponse_Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_TypingRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_TypingRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::TypingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::TypingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypingRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TypingRequest_chat_2fv1_2fchannels_2eproto}, {}};

static void InitDefaultsscc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_UpdateChannelInformationRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::UpdateChannelInformationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::UpdateChannelInformationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto}, {
      &scc_info_Metadata_harmonytypes_2fv1_2ftypes_2eproto.base,}};

static void InitDefaultsscc_info_UpdateChannelOrderRequest_chat_2fv1_2fchannels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_UpdateChannelOrderRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::UpdateChannelOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::UpdateChannelOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateChannelOrderRequest_chat_2fv1_2fchannels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateChannelOrderRequest_chat_2fv1_2fchannels_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2fv1_2fchannels_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chat_2fv1_2fchannels_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2fv1_2fchannels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2fv1_2fchannels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, channel_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, is_category_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, previous_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, next_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateChannelResponse, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsRequest, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse_Channel, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse_Channel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse_Channel, channel_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse_Channel, is_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildChannelsResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, update_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelInformationRequest, update_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelOrderRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelOrderRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelOrderRequest, previous_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::UpdateChannelOrderRequest, next_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteChannelRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TypingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TypingRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::TypingRequest, channel_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::chat::v1::CreateChannelRequest)},
  { 11, -1, sizeof(::protocol::chat::v1::CreateChannelResponse)},
  { 17, -1, sizeof(::protocol::chat::v1::GetGuildChannelsRequest)},
  { 23, -1, sizeof(::protocol::chat::v1::GetGuildChannelsResponse_Channel)},
  { 32, -1, sizeof(::protocol::chat::v1::GetGuildChannelsResponse)},
  { 38, -1, sizeof(::protocol::chat::v1::UpdateChannelInformationRequest)},
  { 49, -1, sizeof(::protocol::chat::v1::UpdateChannelOrderRequest)},
  { 58, -1, sizeof(::protocol::chat::v1::DeleteChannelRequest)},
  { 65, -1, sizeof(::protocol::chat::v1::TypingRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_CreateChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_CreateChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetGuildChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetGuildChannelsResponse_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetGuildChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_UpdateChannelInformationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_UpdateChannelOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DeleteChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_TypingRequest_default_instance_),
};

const char descriptor_table_protodef_chat_2fv1_2fchannels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026chat/v1/channels.proto\022\020protocol.chat."
  "v1\032\033harmonytypes/v1/types.proto\"\273\001\n\024Crea"
  "teChannelRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\024"
  "\n\014channel_name\030\002 \001(\t\022\023\n\013is_category\030\003 \001("
  "\010\022\027\n\013previous_id\030\005 \001(\004B\0020\001\022\023\n\007next_id\030\004 "
  "\001(\004B\0020\001\0224\n\010metadata\030\006 \001(\0132\".protocol.har"
  "monytypes.v1.Metadata\"/\n\025CreateChannelRe"
  "sponse\022\026\n\nchannel_id\030\001 \001(\004B\0020\001\"/\n\027GetGui"
  "ldChannelsRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\""
  "\345\001\n\030GetGuildChannelsResponse\022D\n\010channels"
  "\030\001 \003(\01322.protocol.chat.v1.GetGuildChanne"
  "lsResponse.Channel\032\202\001\n\007Channel\0224\n\010metada"
  "ta\030\004 \001(\0132\".protocol.harmonytypes.v1.Meta"
  "data\022\026\n\nchannel_id\030\001 \001(\004B\0020\001\022\024\n\014channel_"
  "name\030\002 \001(\t\022\023\n\013is_category\030\003 \001(\010\"\301\001\n\037Upda"
  "teChannelInformationRequest\022\024\n\010guild_id\030"
  "\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\014\n\004nam"
  "e\030\003 \001(\t\022\023\n\013update_name\030\004 \001(\010\0224\n\010metadata"
  "\030\005 \001(\0132\".protocol.harmonytypes.v1.Metada"
  "ta\022\027\n\017update_metadata\030\006 \001(\010\"w\n\031UpdateCha"
  "nnelOrderRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\026"
  "\n\nchannel_id\030\002 \001(\004B\0020\001\022\027\n\013previous_id\030\003 "
  "\001(\004B\0020\001\022\023\n\007next_id\030\004 \001(\004B\0020\001\"D\n\024DeleteCh"
  "annelRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\026\n\nch"
  "annel_id\030\002 \001(\004B\0020\001\"=\n\rTypingRequest\022\024\n\010g"
  "uild_id\030\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002 \001(\004B\0020"
  "\001B3Z1github.com/harmony-development/lega"
  "to/gen/chat/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2fv1_2fchannels_2eproto_deps[1] = {
  &::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2fv1_2fchannels_2eproto_sccs[9] = {
  &scc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_CreateChannelResponse_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_DeleteChannelRequest_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_GetGuildChannelsRequest_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_TypingRequest_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto.base,
  &scc_info_UpdateChannelOrderRequest_chat_2fv1_2fchannels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2fv1_2fchannels_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fchannels_2eproto = {
  false, false, descriptor_table_protodef_chat_2fv1_2fchannels_2eproto, "chat/v1/channels.proto", 1102,
  &descriptor_table_chat_2fv1_2fchannels_2eproto_once, descriptor_table_chat_2fv1_2fchannels_2eproto_sccs, descriptor_table_chat_2fv1_2fchannels_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_chat_2fv1_2fchannels_2eproto::offsets,
  file_level_metadata_chat_2fv1_2fchannels_2eproto, 9, file_level_enum_descriptors_chat_2fv1_2fchannels_2eproto, file_level_service_descriptors_chat_2fv1_2fchannels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2fv1_2fchannels_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2fv1_2fchannels_2eproto)), true);
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

void CreateChannelRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_CreateChannelRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class CreateChannelRequest::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const CreateChannelRequest* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
CreateChannelRequest::_Internal::metadata(const CreateChannelRequest* msg) {
  return *msg->metadata_;
}
void CreateChannelRequest::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
CreateChannelRequest::CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.CreateChannelRequest)
}
CreateChannelRequest::CreateChannelRequest(const CreateChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_name().empty()) {
    channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_category_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(is_category_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.CreateChannelRequest)
}

void CreateChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(is_category_));
}

CreateChannelRequest::~CreateChannelRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.CreateChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void CreateChannelRequest::ArenaDtor(void* object) {
  CreateChannelRequest* _this = reinterpret_cast< CreateChannelRequest* >(object);
  (void)_this;
}
void CreateChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateChannelRequest& CreateChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateChannelRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void CreateChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(is_category_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.CreateChannelRequest.channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_id = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 previous_id = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          previous_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.CreateChannelRequest.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // bool is_category = 3;
  if (this->is_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_category(), target);
  }

  // uint64 next_id = 4 [jstype = JS_STRING];
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_next_id(), target);
  }

  // uint64 previous_id = 5 [jstype = JS_STRING];
  if (this->previous_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_previous_id(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.CreateChannelRequest)
  return target;
}

size_t CreateChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.CreateChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 next_id = 4 [jstype = JS_STRING];
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  // uint64 previous_id = 5 [jstype = JS_STRING];
  if (this->previous_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_previous_id());
  }

  // bool is_category = 3;
  if (this->is_category() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.CreateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.CreateChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.CreateChannelRequest)
    MergeFrom(*source);
  }
}

void CreateChannelRequest::MergeFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.CreateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {
    _internal_set_channel_name(from._internal_channel_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
  if (from.previous_id() != 0) {
    _internal_set_previous_id(from._internal_previous_id());
  }
  if (from.is_category() != 0) {
    _internal_set_is_category(from._internal_is_category());
  }
}

void CreateChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.CreateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelRequest::CopyFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.CreateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelRequest::IsInitialized() const {
  return true;
}

void CreateChannelRequest::InternalSwap(CreateChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateChannelRequest, is_category_)
      + sizeof(CreateChannelRequest::is_category_)
      - PROTOBUF_FIELD_OFFSET(CreateChannelRequest, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateChannelResponse::InitAsDefaultInstance() {
}
class CreateChannelResponse::_Internal {
 public:
};

CreateChannelResponse::CreateChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.CreateChannelResponse)
}
CreateChannelResponse::CreateChannelResponse(const CreateChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.CreateChannelResponse)
}

void CreateChannelResponse::SharedCtor() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CreateChannelResponse::~CreateChannelResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.CreateChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateChannelResponse::ArenaDtor(void* object) {
  CreateChannelResponse* _this = reinterpret_cast< CreateChannelResponse* >(object);
  (void)_this;
}
void CreateChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateChannelResponse& CreateChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateChannelResponse_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void CreateChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.CreateChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.CreateChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.CreateChannelResponse)
  return target;
}

size_t CreateChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.CreateChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.CreateChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.CreateChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.CreateChannelResponse)
    MergeFrom(*source);
  }
}

void CreateChannelResponse::MergeFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.CreateChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CreateChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.CreateChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelResponse::CopyFrom(const CreateChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.CreateChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelResponse::IsInitialized() const {
  return true;
}

void CreateChannelResponse::InternalSwap(CreateChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuildChannelsRequest::InitAsDefaultInstance() {
}
class GetGuildChannelsRequest::_Internal {
 public:
};

GetGuildChannelsRequest::GetGuildChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetGuildChannelsRequest)
}
GetGuildChannelsRequest::GetGuildChannelsRequest(const GetGuildChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetGuildChannelsRequest)
}

void GetGuildChannelsRequest::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

GetGuildChannelsRequest::~GetGuildChannelsRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetGuildChannelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGuildChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetGuildChannelsRequest::ArenaDtor(void* object) {
  GetGuildChannelsRequest* _this = reinterpret_cast< GetGuildChannelsRequest* >(object);
  (void)_this;
}
void GetGuildChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuildChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuildChannelsRequest& GetGuildChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuildChannelsRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void GetGuildChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetGuildChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuildChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuildChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetGuildChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetGuildChannelsRequest)
  return target;
}

size_t GetGuildChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetGuildChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuildChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetGuildChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuildChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuildChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetGuildChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetGuildChannelsRequest)
    MergeFrom(*source);
  }
}

void GetGuildChannelsRequest::MergeFrom(const GetGuildChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetGuildChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void GetGuildChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetGuildChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildChannelsRequest::CopyFrom(const GetGuildChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetGuildChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildChannelsRequest::IsInitialized() const {
  return true;
}

void GetGuildChannelsRequest::InternalSwap(GetGuildChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuildChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuildChannelsResponse_Channel::InitAsDefaultInstance() {
  ::protocol::chat::v1::_GetGuildChannelsResponse_Channel_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class GetGuildChannelsResponse_Channel::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const GetGuildChannelsResponse_Channel* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
GetGuildChannelsResponse_Channel::_Internal::metadata(const GetGuildChannelsResponse_Channel* msg) {
  return *msg->metadata_;
}
void GetGuildChannelsResponse_Channel::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
GetGuildChannelsResponse_Channel::GetGuildChannelsResponse_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetGuildChannelsResponse.Channel)
}
GetGuildChannelsResponse_Channel::GetGuildChannelsResponse_Channel(const GetGuildChannelsResponse_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_name().empty()) {
    channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_category_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(is_category_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetGuildChannelsResponse.Channel)
}

void GetGuildChannelsResponse_Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto.base);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(is_category_));
}

GetGuildChannelsResponse_Channel::~GetGuildChannelsResponse_Channel() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGuildChannelsResponse_Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void GetGuildChannelsResponse_Channel::ArenaDtor(void* object) {
  GetGuildChannelsResponse_Channel* _this = reinterpret_cast< GetGuildChannelsResponse_Channel* >(object);
  (void)_this;
}
void GetGuildChannelsResponse_Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuildChannelsResponse_Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuildChannelsResponse_Channel& GetGuildChannelsResponse_Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuildChannelsResponse_Channel_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void GetGuildChannelsResponse_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_category_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(is_category_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuildChannelsResponse_Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuildChannelsResponse_Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.GetGuildChannelsResponse.Channel.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // bool is_category = 3;
  if (this->is_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_category(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  return target;
}

size_t GetGuildChannelsResponse_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_name());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // bool is_category = 3;
  if (this->is_category() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuildChannelsResponse_Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuildChannelsResponse_Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuildChannelsResponse_Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetGuildChannelsResponse.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetGuildChannelsResponse.Channel)
    MergeFrom(*source);
  }
}

void GetGuildChannelsResponse_Channel::MergeFrom(const GetGuildChannelsResponse_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {
    _internal_set_channel_name(from._internal_channel_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.is_category() != 0) {
    _internal_set_is_category(from._internal_is_category());
  }
}

void GetGuildChannelsResponse_Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildChannelsResponse_Channel::CopyFrom(const GetGuildChannelsResponse_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetGuildChannelsResponse.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildChannelsResponse_Channel::IsInitialized() const {
  return true;
}

void GetGuildChannelsResponse_Channel::InternalSwap(GetGuildChannelsResponse_Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetGuildChannelsResponse_Channel, is_category_)
      + sizeof(GetGuildChannelsResponse_Channel::is_category_)
      - PROTOBUF_FIELD_OFFSET(GetGuildChannelsResponse_Channel, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuildChannelsResponse_Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuildChannelsResponse::InitAsDefaultInstance() {
}
class GetGuildChannelsResponse::_Internal {
 public:
};

GetGuildChannelsResponse::GetGuildChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetGuildChannelsResponse)
}
GetGuildChannelsResponse::GetGuildChannelsResponse(const GetGuildChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetGuildChannelsResponse)
}

void GetGuildChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto.base);
}

GetGuildChannelsResponse::~GetGuildChannelsResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetGuildChannelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGuildChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetGuildChannelsResponse::ArenaDtor(void* object) {
  GetGuildChannelsResponse* _this = reinterpret_cast< GetGuildChannelsResponse* >(object);
  (void)_this;
}
void GetGuildChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuildChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuildChannelsResponse& GetGuildChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuildChannelsResponse_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void GetGuildChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetGuildChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuildChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.chat.v1.GetGuildChannelsResponse.Channel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuildChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetGuildChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetGuildChannelsResponse.Channel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetGuildChannelsResponse)
  return target;
}

size_t GetGuildChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetGuildChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetGuildChannelsResponse.Channel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuildChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetGuildChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuildChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuildChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetGuildChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetGuildChannelsResponse)
    MergeFrom(*source);
  }
}

void GetGuildChannelsResponse::MergeFrom(const GetGuildChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetGuildChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void GetGuildChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetGuildChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildChannelsResponse::CopyFrom(const GetGuildChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetGuildChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildChannelsResponse::IsInitialized() const {
  return true;
}

void GetGuildChannelsResponse::InternalSwap(GetGuildChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuildChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateChannelInformationRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_UpdateChannelInformationRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::harmonytypes::v1::Metadata*>(
      ::protocol::harmonytypes::v1::Metadata::internal_default_instance());
}
class UpdateChannelInformationRequest::_Internal {
 public:
  static const ::protocol::harmonytypes::v1::Metadata& metadata(const UpdateChannelInformationRequest* msg);
};

const ::protocol::harmonytypes::v1::Metadata&
UpdateChannelInformationRequest::_Internal::metadata(const UpdateChannelInformationRequest* msg) {
  return *msg->metadata_;
}
void UpdateChannelInformationRequest::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
UpdateChannelInformationRequest::UpdateChannelInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.UpdateChannelInformationRequest)
}
UpdateChannelInformationRequest::UpdateChannelInformationRequest(const UpdateChannelInformationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::harmonytypes::v1::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_metadata_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.UpdateChannelInformationRequest)
}

void UpdateChannelInformationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(update_metadata_));
}

UpdateChannelInformationRequest::~UpdateChannelInformationRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.UpdateChannelInformationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateChannelInformationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void UpdateChannelInformationRequest::ArenaDtor(void* object) {
  UpdateChannelInformationRequest* _this = reinterpret_cast< UpdateChannelInformationRequest* >(object);
  (void)_this;
}
void UpdateChannelInformationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateChannelInformationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateChannelInformationRequest& UpdateChannelInformationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateChannelInformationRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void UpdateChannelInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.UpdateChannelInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(update_metadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChannelInformationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.UpdateChannelInformationRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.harmonytypes.v1.Metadata metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          update_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateChannelInformationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.UpdateChannelInformationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.UpdateChannelInformationRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bool update_name = 4;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_name(), target);
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metadata(this), target, stream);
  }

  // bool update_metadata = 6;
  if (this->update_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_update_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.UpdateChannelInformationRequest)
  return target;
}

size_t UpdateChannelInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.UpdateChannelInformationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protocol.harmonytypes.v1.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // bool update_name = 4;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_metadata = 6;
  if (this->update_metadata() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateChannelInformationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.UpdateChannelInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChannelInformationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateChannelInformationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.UpdateChannelInformationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.UpdateChannelInformationRequest)
    MergeFrom(*source);
  }
}

void UpdateChannelInformationRequest::MergeFrom(const UpdateChannelInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.UpdateChannelInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::harmonytypes::v1::Metadata::MergeFrom(from._internal_metadata());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_metadata() != 0) {
    _internal_set_update_metadata(from._internal_update_metadata());
  }
}

void UpdateChannelInformationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.UpdateChannelInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChannelInformationRequest::CopyFrom(const UpdateChannelInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.UpdateChannelInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelInformationRequest::IsInitialized() const {
  return true;
}

void UpdateChannelInformationRequest::InternalSwap(UpdateChannelInformationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateChannelInformationRequest, update_metadata_)
      + sizeof(UpdateChannelInformationRequest::update_metadata_)
      - PROTOBUF_FIELD_OFFSET(UpdateChannelInformationRequest, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChannelInformationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateChannelOrderRequest::InitAsDefaultInstance() {
}
class UpdateChannelOrderRequest::_Internal {
 public:
};

UpdateChannelOrderRequest::UpdateChannelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.UpdateChannelOrderRequest)
}
UpdateChannelOrderRequest::UpdateChannelOrderRequest(const UpdateChannelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.UpdateChannelOrderRequest)
}

void UpdateChannelOrderRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
}

UpdateChannelOrderRequest::~UpdateChannelOrderRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.UpdateChannelOrderRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateChannelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateChannelOrderRequest::ArenaDtor(void* object) {
  UpdateChannelOrderRequest* _this = reinterpret_cast< UpdateChannelOrderRequest* >(object);
  (void)_this;
}
void UpdateChannelOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateChannelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateChannelOrderRequest& UpdateChannelOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateChannelOrderRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void UpdateChannelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.UpdateChannelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(next_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChannelOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 previous_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          previous_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_id = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateChannelOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.UpdateChannelOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 previous_id = 3 [jstype = JS_STRING];
  if (this->previous_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_previous_id(), target);
  }

  // uint64 next_id = 4 [jstype = JS_STRING];
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_next_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.UpdateChannelOrderRequest)
  return target;
}

size_t UpdateChannelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.UpdateChannelOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 previous_id = 3 [jstype = JS_STRING];
  if (this->previous_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_previous_id());
  }

  // uint64 next_id = 4 [jstype = JS_STRING];
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateChannelOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.UpdateChannelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChannelOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateChannelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.UpdateChannelOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.UpdateChannelOrderRequest)
    MergeFrom(*source);
  }
}

void UpdateChannelOrderRequest::MergeFrom(const UpdateChannelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.UpdateChannelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.previous_id() != 0) {
    _internal_set_previous_id(from._internal_previous_id());
  }
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
}

void UpdateChannelOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.UpdateChannelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChannelOrderRequest::CopyFrom(const UpdateChannelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.UpdateChannelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelOrderRequest::IsInitialized() const {
  return true;
}

void UpdateChannelOrderRequest::InternalSwap(UpdateChannelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateChannelOrderRequest, next_id_)
      + sizeof(UpdateChannelOrderRequest::next_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateChannelOrderRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChannelOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteChannelRequest::InitAsDefaultInstance() {
}
class DeleteChannelRequest::_Internal {
 public:
};

DeleteChannelRequest::DeleteChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DeleteChannelRequest)
}
DeleteChannelRequest::DeleteChannelRequest(const DeleteChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DeleteChannelRequest)
}

void DeleteChannelRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
}

DeleteChannelRequest::~DeleteChannelRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DeleteChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteChannelRequest::ArenaDtor(void* object) {
  DeleteChannelRequest* _this = reinterpret_cast< DeleteChannelRequest* >(object);
  (void)_this;
}
void DeleteChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteChannelRequest& DeleteChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteChannelRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void DeleteChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DeleteChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DeleteChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DeleteChannelRequest)
  return target;
}

size_t DeleteChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DeleteChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DeleteChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DeleteChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DeleteChannelRequest)
    MergeFrom(*source);
  }
}

void DeleteChannelRequest::MergeFrom(const DeleteChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DeleteChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void DeleteChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DeleteChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChannelRequest::CopyFrom(const DeleteChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DeleteChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteChannelRequest::IsInitialized() const {
  return true;
}

void DeleteChannelRequest::InternalSwap(DeleteChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteChannelRequest, channel_id_)
      + sizeof(DeleteChannelRequest::channel_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteChannelRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TypingRequest::InitAsDefaultInstance() {
}
class TypingRequest::_Internal {
 public:
};

TypingRequest::TypingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.TypingRequest)
}
TypingRequest::TypingRequest(const TypingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.TypingRequest)
}

void TypingRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
}

TypingRequest::~TypingRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.TypingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TypingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TypingRequest::ArenaDtor(void* object) {
  TypingRequest* _this = reinterpret_cast< TypingRequest* >(object);
  (void)_this;
}
void TypingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypingRequest& TypingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TypingRequest_chat_2fv1_2fchannels_2eproto.base);
  return *internal_default_instance();
}


void TypingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.TypingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.TypingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.TypingRequest)
  return target;
}

size_t TypingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.TypingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.TypingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TypingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.TypingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.TypingRequest)
    MergeFrom(*source);
  }
}

void TypingRequest::MergeFrom(const TypingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.TypingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void TypingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.TypingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypingRequest::CopyFrom(const TypingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.TypingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypingRequest::IsInitialized() const {
  return true;
}

void TypingRequest::InternalSwap(TypingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypingRequest, channel_id_)
      + sizeof(TypingRequest::channel_id_)
      - PROTOBUF_FIELD_OFFSET(TypingRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::CreateChannelRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::CreateChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::CreateChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::CreateChannelResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::CreateChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::CreateChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetGuildChannelsRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetGuildChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetGuildChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetGuildChannelsResponse_Channel* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetGuildChannelsResponse_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetGuildChannelsResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetGuildChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetGuildChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::UpdateChannelInformationRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::UpdateChannelInformationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::UpdateChannelInformationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::UpdateChannelOrderRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::UpdateChannelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::UpdateChannelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DeleteChannelRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DeleteChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DeleteChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::TypingRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::TypingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::TypingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
