// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/emotes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2femotes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2femotes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2femotes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2femotes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2femotes_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class AddEmoteToPackRequest;
class AddEmoteToPackRequestDefaultTypeInternal;
extern AddEmoteToPackRequestDefaultTypeInternal _AddEmoteToPackRequest_default_instance_;
class CreateEmotePackRequest;
class CreateEmotePackRequestDefaultTypeInternal;
extern CreateEmotePackRequestDefaultTypeInternal _CreateEmotePackRequest_default_instance_;
class CreateEmotePackResponse;
class CreateEmotePackResponseDefaultTypeInternal;
extern CreateEmotePackResponseDefaultTypeInternal _CreateEmotePackResponse_default_instance_;
class DeleteEmoteFromPackRequest;
class DeleteEmoteFromPackRequestDefaultTypeInternal;
extern DeleteEmoteFromPackRequestDefaultTypeInternal _DeleteEmoteFromPackRequest_default_instance_;
class DeleteEmotePackRequest;
class DeleteEmotePackRequestDefaultTypeInternal;
extern DeleteEmotePackRequestDefaultTypeInternal _DeleteEmotePackRequest_default_instance_;
class DequipEmotePackRequest;
class DequipEmotePackRequestDefaultTypeInternal;
extern DequipEmotePackRequestDefaultTypeInternal _DequipEmotePackRequest_default_instance_;
class GetEmotePackEmotesRequest;
class GetEmotePackEmotesRequestDefaultTypeInternal;
extern GetEmotePackEmotesRequestDefaultTypeInternal _GetEmotePackEmotesRequest_default_instance_;
class GetEmotePackEmotesResponse;
class GetEmotePackEmotesResponseDefaultTypeInternal;
extern GetEmotePackEmotesResponseDefaultTypeInternal _GetEmotePackEmotesResponse_default_instance_;
class GetEmotePackEmotesResponse_Emote;
class GetEmotePackEmotesResponse_EmoteDefaultTypeInternal;
extern GetEmotePackEmotesResponse_EmoteDefaultTypeInternal _GetEmotePackEmotesResponse_Emote_default_instance_;
class GetEmotePacksRequest;
class GetEmotePacksRequestDefaultTypeInternal;
extern GetEmotePacksRequestDefaultTypeInternal _GetEmotePacksRequest_default_instance_;
class GetEmotePacksResponse;
class GetEmotePacksResponseDefaultTypeInternal;
extern GetEmotePacksResponseDefaultTypeInternal _GetEmotePacksResponse_default_instance_;
class GetEmotePacksResponse_EmotePack;
class GetEmotePacksResponse_EmotePackDefaultTypeInternal;
extern GetEmotePacksResponse_EmotePackDefaultTypeInternal _GetEmotePacksResponse_EmotePack_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::AddEmoteToPackRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::AddEmoteToPackRequest>(Arena*);
template<> ::protocol::chat::v1::CreateEmotePackRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateEmotePackRequest>(Arena*);
template<> ::protocol::chat::v1::CreateEmotePackResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::CreateEmotePackResponse>(Arena*);
template<> ::protocol::chat::v1::DeleteEmoteFromPackRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteEmoteFromPackRequest>(Arena*);
template<> ::protocol::chat::v1::DeleteEmotePackRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteEmotePackRequest>(Arena*);
template<> ::protocol::chat::v1::DequipEmotePackRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DequipEmotePackRequest>(Arena*);
template<> ::protocol::chat::v1::GetEmotePackEmotesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePackEmotesRequest>(Arena*);
template<> ::protocol::chat::v1::GetEmotePackEmotesResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePackEmotesResponse>(Arena*);
template<> ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePackEmotesResponse_Emote>(Arena*);
template<> ::protocol::chat::v1::GetEmotePacksRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePacksRequest>(Arena*);
template<> ::protocol::chat::v1::GetEmotePacksResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePacksResponse>(Arena*);
template<> ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* Arena::CreateMaybeMessage<::protocol::chat::v1::GetEmotePacksResponse_EmotePack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class CreateEmotePackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateEmotePackRequest) */ {
 public:
  inline CreateEmotePackRequest() : CreateEmotePackRequest(nullptr) {};
  virtual ~CreateEmotePackRequest();

  CreateEmotePackRequest(const CreateEmotePackRequest& from);
  CreateEmotePackRequest(CreateEmotePackRequest&& from) noexcept
    : CreateEmotePackRequest() {
    *this = ::std::move(from);
  }

  inline CreateEmotePackRequest& operator=(const CreateEmotePackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEmotePackRequest& operator=(CreateEmotePackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEmotePackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEmotePackRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEmotePackRequest*>(
               &_CreateEmotePackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateEmotePackRequest& a, CreateEmotePackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEmotePackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEmotePackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEmotePackRequest* New() const final {
    return CreateMaybeMessage<CreateEmotePackRequest>(nullptr);
  }

  CreateEmotePackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEmotePackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEmotePackRequest& from);
  void MergeFrom(const CreateEmotePackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEmotePackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateEmotePackRequest";
  }
  protected:
  explicit CreateEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackNameFieldNumber = 1,
  };
  // string pack_name = 1;
  void clear_pack_name();
  const std::string& pack_name() const;
  void set_pack_name(const std::string& value);
  void set_pack_name(std::string&& value);
  void set_pack_name(const char* value);
  void set_pack_name(const char* value, size_t size);
  std::string* mutable_pack_name();
  std::string* release_pack_name();
  void set_allocated_pack_name(std::string* pack_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pack_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pack_name(
      std::string* pack_name);
  private:
  const std::string& _internal_pack_name() const;
  void _internal_set_pack_name(const std::string& value);
  std::string* _internal_mutable_pack_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateEmotePackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class CreateEmotePackResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.CreateEmotePackResponse) */ {
 public:
  inline CreateEmotePackResponse() : CreateEmotePackResponse(nullptr) {};
  virtual ~CreateEmotePackResponse();

  CreateEmotePackResponse(const CreateEmotePackResponse& from);
  CreateEmotePackResponse(CreateEmotePackResponse&& from) noexcept
    : CreateEmotePackResponse() {
    *this = ::std::move(from);
  }

  inline CreateEmotePackResponse& operator=(const CreateEmotePackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEmotePackResponse& operator=(CreateEmotePackResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateEmotePackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateEmotePackResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEmotePackResponse*>(
               &_CreateEmotePackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEmotePackResponse& a, CreateEmotePackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEmotePackResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEmotePackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEmotePackResponse* New() const final {
    return CreateMaybeMessage<CreateEmotePackResponse>(nullptr);
  }

  CreateEmotePackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEmotePackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEmotePackResponse& from);
  void MergeFrom(const CreateEmotePackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEmotePackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.CreateEmotePackResponse";
  }
  protected:
  explicit CreateEmotePackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.CreateEmotePackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePacksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePacksRequest) */ {
 public:
  inline GetEmotePacksRequest() : GetEmotePacksRequest(nullptr) {};
  virtual ~GetEmotePacksRequest();

  GetEmotePacksRequest(const GetEmotePacksRequest& from);
  GetEmotePacksRequest(GetEmotePacksRequest&& from) noexcept
    : GetEmotePacksRequest() {
    *this = ::std::move(from);
  }

  inline GetEmotePacksRequest& operator=(const GetEmotePacksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePacksRequest& operator=(GetEmotePacksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePacksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePacksRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmotePacksRequest*>(
               &_GetEmotePacksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetEmotePacksRequest& a, GetEmotePacksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePacksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePacksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePacksRequest* New() const final {
    return CreateMaybeMessage<GetEmotePacksRequest>(nullptr);
  }

  GetEmotePacksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePacksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePacksRequest& from);
  void MergeFrom(const GetEmotePacksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePacksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePacksRequest";
  }
  protected:
  explicit GetEmotePacksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePacksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePacksResponse_EmotePack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePacksResponse.EmotePack) */ {
 public:
  inline GetEmotePacksResponse_EmotePack() : GetEmotePacksResponse_EmotePack(nullptr) {};
  virtual ~GetEmotePacksResponse_EmotePack();

  GetEmotePacksResponse_EmotePack(const GetEmotePacksResponse_EmotePack& from);
  GetEmotePacksResponse_EmotePack(GetEmotePacksResponse_EmotePack&& from) noexcept
    : GetEmotePacksResponse_EmotePack() {
    *this = ::std::move(from);
  }

  inline GetEmotePacksResponse_EmotePack& operator=(const GetEmotePacksResponse_EmotePack& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePacksResponse_EmotePack& operator=(GetEmotePacksResponse_EmotePack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePacksResponse_EmotePack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePacksResponse_EmotePack* internal_default_instance() {
    return reinterpret_cast<const GetEmotePacksResponse_EmotePack*>(
               &_GetEmotePacksResponse_EmotePack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetEmotePacksResponse_EmotePack& a, GetEmotePacksResponse_EmotePack& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePacksResponse_EmotePack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePacksResponse_EmotePack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePacksResponse_EmotePack* New() const final {
    return CreateMaybeMessage<GetEmotePacksResponse_EmotePack>(nullptr);
  }

  GetEmotePacksResponse_EmotePack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePacksResponse_EmotePack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePacksResponse_EmotePack& from);
  void MergeFrom(const GetEmotePacksResponse_EmotePack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePacksResponse_EmotePack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePacksResponse.EmotePack";
  }
  protected:
  explicit GetEmotePacksResponse_EmotePack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackNameFieldNumber = 3,
    kPackIdFieldNumber = 1,
    kPackOwnerFieldNumber = 2,
  };
  // string pack_name = 3;
  void clear_pack_name();
  const std::string& pack_name() const;
  void set_pack_name(const std::string& value);
  void set_pack_name(std::string&& value);
  void set_pack_name(const char* value);
  void set_pack_name(const char* value, size_t size);
  std::string* mutable_pack_name();
  std::string* release_pack_name();
  void set_allocated_pack_name(std::string* pack_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pack_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pack_name(
      std::string* pack_name);
  private:
  const std::string& _internal_pack_name() const;
  void _internal_set_pack_name(const std::string& value);
  std::string* _internal_mutable_pack_name();
  public:

  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_owner = 2 [jstype = JS_STRING];
  void clear_pack_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_owner() const;
  void set_pack_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_owner() const;
  void _internal_set_pack_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePacksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePacksResponse) */ {
 public:
  inline GetEmotePacksResponse() : GetEmotePacksResponse(nullptr) {};
  virtual ~GetEmotePacksResponse();

  GetEmotePacksResponse(const GetEmotePacksResponse& from);
  GetEmotePacksResponse(GetEmotePacksResponse&& from) noexcept
    : GetEmotePacksResponse() {
    *this = ::std::move(from);
  }

  inline GetEmotePacksResponse& operator=(const GetEmotePacksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePacksResponse& operator=(GetEmotePacksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePacksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePacksResponse* internal_default_instance() {
    return reinterpret_cast<const GetEmotePacksResponse*>(
               &_GetEmotePacksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetEmotePacksResponse& a, GetEmotePacksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePacksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePacksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePacksResponse* New() const final {
    return CreateMaybeMessage<GetEmotePacksResponse>(nullptr);
  }

  GetEmotePacksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePacksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePacksResponse& from);
  void MergeFrom(const GetEmotePacksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePacksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePacksResponse";
  }
  protected:
  explicit GetEmotePacksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetEmotePacksResponse_EmotePack EmotePack;

  // accessors -------------------------------------------------------

  enum : int {
    kPacksFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.GetEmotePacksResponse.EmotePack packs = 1;
  int packs_size() const;
  private:
  int _internal_packs_size() const;
  public:
  void clear_packs();
  ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* mutable_packs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >*
      mutable_packs();
  private:
  const ::protocol::chat::v1::GetEmotePacksResponse_EmotePack& _internal_packs(int index) const;
  ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* _internal_add_packs();
  public:
  const ::protocol::chat::v1::GetEmotePacksResponse_EmotePack& packs(int index) const;
  ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* add_packs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >&
      packs() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePacksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack > packs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePackEmotesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePackEmotesRequest) */ {
 public:
  inline GetEmotePackEmotesRequest() : GetEmotePackEmotesRequest(nullptr) {};
  virtual ~GetEmotePackEmotesRequest();

  GetEmotePackEmotesRequest(const GetEmotePackEmotesRequest& from);
  GetEmotePackEmotesRequest(GetEmotePackEmotesRequest&& from) noexcept
    : GetEmotePackEmotesRequest() {
    *this = ::std::move(from);
  }

  inline GetEmotePackEmotesRequest& operator=(const GetEmotePackEmotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePackEmotesRequest& operator=(GetEmotePackEmotesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePackEmotesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePackEmotesRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmotePackEmotesRequest*>(
               &_GetEmotePackEmotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEmotePackEmotesRequest& a, GetEmotePackEmotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePackEmotesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePackEmotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePackEmotesRequest* New() const final {
    return CreateMaybeMessage<GetEmotePackEmotesRequest>(nullptr);
  }

  GetEmotePackEmotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePackEmotesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePackEmotesRequest& from);
  void MergeFrom(const GetEmotePackEmotesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePackEmotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePackEmotesRequest";
  }
  protected:
  explicit GetEmotePackEmotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePackEmotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePackEmotesResponse_Emote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePackEmotesResponse.Emote) */ {
 public:
  inline GetEmotePackEmotesResponse_Emote() : GetEmotePackEmotesResponse_Emote(nullptr) {};
  virtual ~GetEmotePackEmotesResponse_Emote();

  GetEmotePackEmotesResponse_Emote(const GetEmotePackEmotesResponse_Emote& from);
  GetEmotePackEmotesResponse_Emote(GetEmotePackEmotesResponse_Emote&& from) noexcept
    : GetEmotePackEmotesResponse_Emote() {
    *this = ::std::move(from);
  }

  inline GetEmotePackEmotesResponse_Emote& operator=(const GetEmotePackEmotesResponse_Emote& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePackEmotesResponse_Emote& operator=(GetEmotePackEmotesResponse_Emote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePackEmotesResponse_Emote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePackEmotesResponse_Emote* internal_default_instance() {
    return reinterpret_cast<const GetEmotePackEmotesResponse_Emote*>(
               &_GetEmotePackEmotesResponse_Emote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetEmotePackEmotesResponse_Emote& a, GetEmotePackEmotesResponse_Emote& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePackEmotesResponse_Emote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePackEmotesResponse_Emote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePackEmotesResponse_Emote* New() const final {
    return CreateMaybeMessage<GetEmotePackEmotesResponse_Emote>(nullptr);
  }

  GetEmotePackEmotesResponse_Emote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePackEmotesResponse_Emote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePackEmotesResponse_Emote& from);
  void MergeFrom(const GetEmotePackEmotesResponse_Emote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePackEmotesResponse_Emote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePackEmotesResponse.Emote";
  }
  protected:
  explicit GetEmotePackEmotesResponse_Emote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string image_id = 1;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_id(
      std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePackEmotesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetEmotePackEmotesResponse) */ {
 public:
  inline GetEmotePackEmotesResponse() : GetEmotePackEmotesResponse(nullptr) {};
  virtual ~GetEmotePackEmotesResponse();

  GetEmotePackEmotesResponse(const GetEmotePackEmotesResponse& from);
  GetEmotePackEmotesResponse(GetEmotePackEmotesResponse&& from) noexcept
    : GetEmotePackEmotesResponse() {
    *this = ::std::move(from);
  }

  inline GetEmotePackEmotesResponse& operator=(const GetEmotePackEmotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePackEmotesResponse& operator=(GetEmotePackEmotesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEmotePackEmotesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmotePackEmotesResponse* internal_default_instance() {
    return reinterpret_cast<const GetEmotePackEmotesResponse*>(
               &_GetEmotePackEmotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetEmotePackEmotesResponse& a, GetEmotePackEmotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmotePackEmotesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePackEmotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEmotePackEmotesResponse* New() const final {
    return CreateMaybeMessage<GetEmotePackEmotesResponse>(nullptr);
  }

  GetEmotePackEmotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEmotePackEmotesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEmotePackEmotesResponse& from);
  void MergeFrom(const GetEmotePackEmotesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmotePackEmotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetEmotePackEmotesResponse";
  }
  protected:
  explicit GetEmotePackEmotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetEmotePackEmotesResponse_Emote Emote;

  // accessors -------------------------------------------------------

  enum : int {
    kEmotesFieldNumber = 1,
  };
  // repeated .protocol.chat.v1.GetEmotePackEmotesResponse.Emote emotes = 1;
  int emotes_size() const;
  private:
  int _internal_emotes_size() const;
  public:
  void clear_emotes();
  ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* mutable_emotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >*
      mutable_emotes();
  private:
  const ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote& _internal_emotes(int index) const;
  ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* _internal_add_emotes();
  public:
  const ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote& emotes(int index) const;
  ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* add_emotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >&
      emotes() const;

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetEmotePackEmotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote > emotes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class AddEmoteToPackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.AddEmoteToPackRequest) */ {
 public:
  inline AddEmoteToPackRequest() : AddEmoteToPackRequest(nullptr) {};
  virtual ~AddEmoteToPackRequest();

  AddEmoteToPackRequest(const AddEmoteToPackRequest& from);
  AddEmoteToPackRequest(AddEmoteToPackRequest&& from) noexcept
    : AddEmoteToPackRequest() {
    *this = ::std::move(from);
  }

  inline AddEmoteToPackRequest& operator=(const AddEmoteToPackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEmoteToPackRequest& operator=(AddEmoteToPackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddEmoteToPackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddEmoteToPackRequest* internal_default_instance() {
    return reinterpret_cast<const AddEmoteToPackRequest*>(
               &_AddEmoteToPackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddEmoteToPackRequest& a, AddEmoteToPackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEmoteToPackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEmoteToPackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddEmoteToPackRequest* New() const final {
    return CreateMaybeMessage<AddEmoteToPackRequest>(nullptr);
  }

  AddEmoteToPackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddEmoteToPackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddEmoteToPackRequest& from);
  void MergeFrom(const AddEmoteToPackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEmoteToPackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.AddEmoteToPackRequest";
  }
  protected:
  explicit AddEmoteToPackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kPackIdFieldNumber = 1,
  };
  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_id(
      std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.AddEmoteToPackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class DeleteEmoteFromPackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteEmoteFromPackRequest) */ {
 public:
  inline DeleteEmoteFromPackRequest() : DeleteEmoteFromPackRequest(nullptr) {};
  virtual ~DeleteEmoteFromPackRequest();

  DeleteEmoteFromPackRequest(const DeleteEmoteFromPackRequest& from);
  DeleteEmoteFromPackRequest(DeleteEmoteFromPackRequest&& from) noexcept
    : DeleteEmoteFromPackRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEmoteFromPackRequest& operator=(const DeleteEmoteFromPackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEmoteFromPackRequest& operator=(DeleteEmoteFromPackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEmoteFromPackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEmoteFromPackRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEmoteFromPackRequest*>(
               &_DeleteEmoteFromPackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteEmoteFromPackRequest& a, DeleteEmoteFromPackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEmoteFromPackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEmoteFromPackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEmoteFromPackRequest* New() const final {
    return CreateMaybeMessage<DeleteEmoteFromPackRequest>(nullptr);
  }

  DeleteEmoteFromPackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEmoteFromPackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEmoteFromPackRequest& from);
  void MergeFrom(const DeleteEmoteFromPackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEmoteFromPackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteEmoteFromPackRequest";
  }
  protected:
  explicit DeleteEmoteFromPackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 2,
    kPackIdFieldNumber = 1,
  };
  // string image_id = 2;
  void clear_image_id();
  const std::string& image_id() const;
  void set_image_id(const std::string& value);
  void set_image_id(std::string&& value);
  void set_image_id(const char* value);
  void set_image_id(const char* value, size_t size);
  std::string* mutable_image_id();
  std::string* release_image_id();
  void set_allocated_image_id(std::string* image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_id(
      std::string* image_id);
  private:
  const std::string& _internal_image_id() const;
  void _internal_set_image_id(const std::string& value);
  std::string* _internal_mutable_image_id();
  public:

  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteEmoteFromPackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class DeleteEmotePackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteEmotePackRequest) */ {
 public:
  inline DeleteEmotePackRequest() : DeleteEmotePackRequest(nullptr) {};
  virtual ~DeleteEmotePackRequest();

  DeleteEmotePackRequest(const DeleteEmotePackRequest& from);
  DeleteEmotePackRequest(DeleteEmotePackRequest&& from) noexcept
    : DeleteEmotePackRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEmotePackRequest& operator=(const DeleteEmotePackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEmotePackRequest& operator=(DeleteEmotePackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEmotePackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteEmotePackRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEmotePackRequest*>(
               &_DeleteEmotePackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteEmotePackRequest& a, DeleteEmotePackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEmotePackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEmotePackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEmotePackRequest* New() const final {
    return CreateMaybeMessage<DeleteEmotePackRequest>(nullptr);
  }

  DeleteEmotePackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEmotePackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEmotePackRequest& from);
  void MergeFrom(const DeleteEmotePackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEmotePackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteEmotePackRequest";
  }
  protected:
  explicit DeleteEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteEmotePackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// -------------------------------------------------------------------

class DequipEmotePackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DequipEmotePackRequest) */ {
 public:
  inline DequipEmotePackRequest() : DequipEmotePackRequest(nullptr) {};
  virtual ~DequipEmotePackRequest();

  DequipEmotePackRequest(const DequipEmotePackRequest& from);
  DequipEmotePackRequest(DequipEmotePackRequest&& from) noexcept
    : DequipEmotePackRequest() {
    *this = ::std::move(from);
  }

  inline DequipEmotePackRequest& operator=(const DequipEmotePackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DequipEmotePackRequest& operator=(DequipEmotePackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DequipEmotePackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DequipEmotePackRequest* internal_default_instance() {
    return reinterpret_cast<const DequipEmotePackRequest*>(
               &_DequipEmotePackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DequipEmotePackRequest& a, DequipEmotePackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DequipEmotePackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DequipEmotePackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DequipEmotePackRequest* New() const final {
    return CreateMaybeMessage<DequipEmotePackRequest>(nullptr);
  }

  DequipEmotePackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DequipEmotePackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DequipEmotePackRequest& from);
  void MergeFrom(const DequipEmotePackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DequipEmotePackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DequipEmotePackRequest";
  }
  protected:
  explicit DequipEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2femotes_2eproto);
    return ::descriptor_table_chat_2fv1_2femotes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackIdFieldNumber = 1,
  };
  // uint64 pack_id = 1 [jstype = JS_STRING];
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DequipEmotePackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2femotes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateEmotePackRequest

// string pack_name = 1;
inline void CreateEmotePackRequest::clear_pack_name() {
  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateEmotePackRequest::pack_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateEmotePackRequest.pack_name)
  return _internal_pack_name();
}
inline void CreateEmotePackRequest::set_pack_name(const std::string& value) {
  _internal_set_pack_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}
inline std::string* CreateEmotePackRequest::mutable_pack_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.CreateEmotePackRequest.pack_name)
  return _internal_mutable_pack_name();
}
inline const std::string& CreateEmotePackRequest::_internal_pack_name() const {
  return pack_name_.Get();
}
inline void CreateEmotePackRequest::_internal_set_pack_name(const std::string& value) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateEmotePackRequest::set_pack_name(std::string&& value) {
  
  pack_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}
inline void CreateEmotePackRequest::set_pack_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}
inline void CreateEmotePackRequest::set_pack_name(const char* value,
    size_t size) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}
inline std::string* CreateEmotePackRequest::_internal_mutable_pack_name() {
  
  return pack_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateEmotePackRequest::release_pack_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.CreateEmotePackRequest.pack_name)
  return pack_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateEmotePackRequest::set_allocated_pack_name(std::string* pack_name) {
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pack_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}
inline std::string* CreateEmotePackRequest::unsafe_arena_release_pack_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.CreateEmotePackRequest.pack_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pack_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateEmotePackRequest::unsafe_arena_set_allocated_pack_name(
    std::string* pack_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pack_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.CreateEmotePackRequest.pack_name)
}

// -------------------------------------------------------------------

// CreateEmotePackResponse

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void CreateEmotePackResponse::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateEmotePackResponse::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateEmotePackResponse::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.CreateEmotePackResponse.pack_id)
  return _internal_pack_id();
}
inline void CreateEmotePackResponse::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void CreateEmotePackResponse::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.CreateEmotePackResponse.pack_id)
}

// -------------------------------------------------------------------

// GetEmotePacksRequest

// -------------------------------------------------------------------

// GetEmotePacksResponse_EmotePack

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void GetEmotePacksResponse_EmotePack::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePacksResponse_EmotePack::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePacksResponse_EmotePack::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_id)
  return _internal_pack_id();
}
inline void GetEmotePacksResponse_EmotePack::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void GetEmotePacksResponse_EmotePack::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_id)
}

// uint64 pack_owner = 2 [jstype = JS_STRING];
inline void GetEmotePacksResponse_EmotePack::clear_pack_owner() {
  pack_owner_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePacksResponse_EmotePack::_internal_pack_owner() const {
  return pack_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePacksResponse_EmotePack::pack_owner() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_owner)
  return _internal_pack_owner();
}
inline void GetEmotePacksResponse_EmotePack::_internal_set_pack_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_owner_ = value;
}
inline void GetEmotePacksResponse_EmotePack::set_pack_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_owner(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_owner)
}

// string pack_name = 3;
inline void GetEmotePacksResponse_EmotePack::clear_pack_name() {
  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmotePacksResponse_EmotePack::pack_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
  return _internal_pack_name();
}
inline void GetEmotePacksResponse_EmotePack::set_pack_name(const std::string& value) {
  _internal_set_pack_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}
inline std::string* GetEmotePacksResponse_EmotePack::mutable_pack_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
  return _internal_mutable_pack_name();
}
inline const std::string& GetEmotePacksResponse_EmotePack::_internal_pack_name() const {
  return pack_name_.Get();
}
inline void GetEmotePacksResponse_EmotePack::_internal_set_pack_name(const std::string& value) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmotePacksResponse_EmotePack::set_pack_name(std::string&& value) {
  
  pack_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}
inline void GetEmotePacksResponse_EmotePack::set_pack_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}
inline void GetEmotePacksResponse_EmotePack::set_pack_name(const char* value,
    size_t size) {
  
  pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}
inline std::string* GetEmotePacksResponse_EmotePack::_internal_mutable_pack_name() {
  
  return pack_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmotePacksResponse_EmotePack::release_pack_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
  return pack_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmotePacksResponse_EmotePack::set_allocated_pack_name(std::string* pack_name) {
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pack_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}
inline std::string* GetEmotePacksResponse_EmotePack::unsafe_arena_release_pack_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pack_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEmotePacksResponse_EmotePack::unsafe_arena_set_allocated_pack_name(
    std::string* pack_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pack_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name)
}

// -------------------------------------------------------------------

// GetEmotePacksResponse

// repeated .protocol.chat.v1.GetEmotePacksResponse.EmotePack packs = 1;
inline int GetEmotePacksResponse::_internal_packs_size() const {
  return packs_.size();
}
inline int GetEmotePacksResponse::packs_size() const {
  return _internal_packs_size();
}
inline void GetEmotePacksResponse::clear_packs() {
  packs_.Clear();
}
inline ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* GetEmotePacksResponse::mutable_packs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetEmotePacksResponse.packs)
  return packs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >*
GetEmotePacksResponse::mutable_packs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetEmotePacksResponse.packs)
  return &packs_;
}
inline const ::protocol::chat::v1::GetEmotePacksResponse_EmotePack& GetEmotePacksResponse::_internal_packs(int index) const {
  return packs_.Get(index);
}
inline const ::protocol::chat::v1::GetEmotePacksResponse_EmotePack& GetEmotePacksResponse::packs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePacksResponse.packs)
  return _internal_packs(index);
}
inline ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* GetEmotePacksResponse::_internal_add_packs() {
  return packs_.Add();
}
inline ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* GetEmotePacksResponse::add_packs() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetEmotePacksResponse.packs)
  return _internal_add_packs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >&
GetEmotePacksResponse::packs() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetEmotePacksResponse.packs)
  return packs_;
}

// -------------------------------------------------------------------

// GetEmotePackEmotesRequest

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void GetEmotePackEmotesRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePackEmotesRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetEmotePackEmotesRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePackEmotesRequest.pack_id)
  return _internal_pack_id();
}
inline void GetEmotePackEmotesRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void GetEmotePackEmotesRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePackEmotesRequest.pack_id)
}

// -------------------------------------------------------------------

// GetEmotePackEmotesResponse_Emote

// string image_id = 1;
inline void GetEmotePackEmotesResponse_Emote::clear_image_id() {
  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmotePackEmotesResponse_Emote::image_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
  return _internal_image_id();
}
inline void GetEmotePackEmotesResponse_Emote::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}
inline std::string* GetEmotePackEmotesResponse_Emote::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& GetEmotePackEmotesResponse_Emote::_internal_image_id() const {
  return image_id_.Get();
}
inline void GetEmotePackEmotesResponse_Emote::_internal_set_image_id(const std::string& value) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::set_image_id(std::string&& value) {
  
  image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}
inline void GetEmotePackEmotesResponse_Emote::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}
inline void GetEmotePackEmotesResponse_Emote::set_image_id(const char* value,
    size_t size) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}
inline std::string* GetEmotePackEmotesResponse_Emote::_internal_mutable_image_id() {
  
  return image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmotePackEmotesResponse_Emote::release_image_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
  return image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}
inline std::string* GetEmotePackEmotesResponse_Emote::unsafe_arena_release_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::unsafe_arena_set_allocated_image_id(
    std::string* image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id)
}

// string name = 2;
inline void GetEmotePackEmotesResponse_Emote::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetEmotePackEmotesResponse_Emote::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
  return _internal_name();
}
inline void GetEmotePackEmotesResponse_Emote::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}
inline std::string* GetEmotePackEmotesResponse_Emote::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
  return _internal_mutable_name();
}
inline const std::string& GetEmotePackEmotesResponse_Emote::_internal_name() const {
  return name_.Get();
}
inline void GetEmotePackEmotesResponse_Emote::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}
inline void GetEmotePackEmotesResponse_Emote::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}
inline void GetEmotePackEmotesResponse_Emote::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}
inline std::string* GetEmotePackEmotesResponse_Emote::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetEmotePackEmotesResponse_Emote::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}
inline std::string* GetEmotePackEmotesResponse_Emote::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetEmotePackEmotesResponse_Emote::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name)
}

// -------------------------------------------------------------------

// GetEmotePackEmotesResponse

// repeated .protocol.chat.v1.GetEmotePackEmotesResponse.Emote emotes = 1;
inline int GetEmotePackEmotesResponse::_internal_emotes_size() const {
  return emotes_.size();
}
inline int GetEmotePackEmotesResponse::emotes_size() const {
  return _internal_emotes_size();
}
inline void GetEmotePackEmotesResponse::clear_emotes() {
  emotes_.Clear();
}
inline ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* GetEmotePackEmotesResponse::mutable_emotes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetEmotePackEmotesResponse.emotes)
  return emotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >*
GetEmotePackEmotesResponse::mutable_emotes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetEmotePackEmotesResponse.emotes)
  return &emotes_;
}
inline const ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote& GetEmotePackEmotesResponse::_internal_emotes(int index) const {
  return emotes_.Get(index);
}
inline const ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote& GetEmotePackEmotesResponse::emotes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetEmotePackEmotesResponse.emotes)
  return _internal_emotes(index);
}
inline ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* GetEmotePackEmotesResponse::_internal_add_emotes() {
  return emotes_.Add();
}
inline ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* GetEmotePackEmotesResponse::add_emotes() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetEmotePackEmotesResponse.emotes)
  return _internal_add_emotes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >&
GetEmotePackEmotesResponse::emotes() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetEmotePackEmotesResponse.emotes)
  return emotes_;
}

// -------------------------------------------------------------------

// AddEmoteToPackRequest

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void AddEmoteToPackRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddEmoteToPackRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddEmoteToPackRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddEmoteToPackRequest.pack_id)
  return _internal_pack_id();
}
inline void AddEmoteToPackRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void AddEmoteToPackRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddEmoteToPackRequest.pack_id)
}

// string image_id = 2;
inline void AddEmoteToPackRequest::clear_image_id() {
  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddEmoteToPackRequest::image_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddEmoteToPackRequest.image_id)
  return _internal_image_id();
}
inline void AddEmoteToPackRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}
inline std::string* AddEmoteToPackRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.AddEmoteToPackRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& AddEmoteToPackRequest::_internal_image_id() const {
  return image_id_.Get();
}
inline void AddEmoteToPackRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddEmoteToPackRequest::set_image_id(std::string&& value) {
  
  image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}
inline void AddEmoteToPackRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}
inline void AddEmoteToPackRequest::set_image_id(const char* value,
    size_t size) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}
inline std::string* AddEmoteToPackRequest::_internal_mutable_image_id() {
  
  return image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddEmoteToPackRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.AddEmoteToPackRequest.image_id)
  return image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddEmoteToPackRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}
inline std::string* AddEmoteToPackRequest::unsafe_arena_release_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.AddEmoteToPackRequest.image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddEmoteToPackRequest::unsafe_arena_set_allocated_image_id(
    std::string* image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.AddEmoteToPackRequest.image_id)
}

// string name = 3;
inline void AddEmoteToPackRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddEmoteToPackRequest::name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.AddEmoteToPackRequest.name)
  return _internal_name();
}
inline void AddEmoteToPackRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.AddEmoteToPackRequest.name)
}
inline std::string* AddEmoteToPackRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.AddEmoteToPackRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddEmoteToPackRequest::_internal_name() const {
  return name_.Get();
}
inline void AddEmoteToPackRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddEmoteToPackRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.AddEmoteToPackRequest.name)
}
inline void AddEmoteToPackRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.AddEmoteToPackRequest.name)
}
inline void AddEmoteToPackRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.AddEmoteToPackRequest.name)
}
inline std::string* AddEmoteToPackRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddEmoteToPackRequest::release_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.AddEmoteToPackRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddEmoteToPackRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.AddEmoteToPackRequest.name)
}
inline std::string* AddEmoteToPackRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.AddEmoteToPackRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddEmoteToPackRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.AddEmoteToPackRequest.name)
}

// -------------------------------------------------------------------

// DeleteEmoteFromPackRequest

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void DeleteEmoteFromPackRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteEmoteFromPackRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteEmoteFromPackRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteEmoteFromPackRequest.pack_id)
  return _internal_pack_id();
}
inline void DeleteEmoteFromPackRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void DeleteEmoteFromPackRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteEmoteFromPackRequest.pack_id)
}

// string image_id = 2;
inline void DeleteEmoteFromPackRequest::clear_image_id() {
  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteEmoteFromPackRequest::image_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
  return _internal_image_id();
}
inline void DeleteEmoteFromPackRequest::set_image_id(const std::string& value) {
  _internal_set_image_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}
inline std::string* DeleteEmoteFromPackRequest::mutable_image_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
  return _internal_mutable_image_id();
}
inline const std::string& DeleteEmoteFromPackRequest::_internal_image_id() const {
  return image_id_.Get();
}
inline void DeleteEmoteFromPackRequest::_internal_set_image_id(const std::string& value) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteEmoteFromPackRequest::set_image_id(std::string&& value) {
  
  image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}
inline void DeleteEmoteFromPackRequest::set_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}
inline void DeleteEmoteFromPackRequest::set_image_id(const char* value,
    size_t size) {
  
  image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}
inline std::string* DeleteEmoteFromPackRequest::_internal_mutable_image_id() {
  
  return image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteEmoteFromPackRequest::release_image_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
  return image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteEmoteFromPackRequest::set_allocated_image_id(std::string* image_id) {
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}
inline std::string* DeleteEmoteFromPackRequest::unsafe_arena_release_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteEmoteFromPackRequest::unsafe_arena_set_allocated_image_id(
    std::string* image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_id != nullptr) {
    
  } else {
    
  }
  image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.DeleteEmoteFromPackRequest.image_id)
}

// -------------------------------------------------------------------

// DeleteEmotePackRequest

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void DeleteEmotePackRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteEmotePackRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteEmotePackRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteEmotePackRequest.pack_id)
  return _internal_pack_id();
}
inline void DeleteEmotePackRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void DeleteEmotePackRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteEmotePackRequest.pack_id)
}

// -------------------------------------------------------------------

// DequipEmotePackRequest

// uint64 pack_id = 1 [jstype = JS_STRING];
inline void DequipEmotePackRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DequipEmotePackRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DequipEmotePackRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DequipEmotePackRequest.pack_id)
  return _internal_pack_id();
}
inline void DequipEmotePackRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void DequipEmotePackRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DequipEmotePackRequest.pack_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2femotes_2eproto
