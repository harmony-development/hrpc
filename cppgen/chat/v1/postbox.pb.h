// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/postbox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpostbox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpostbox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpostbox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fpostbox_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fpostbox_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class SyncEvent;
class SyncEventDefaultTypeInternal;
extern SyncEventDefaultTypeInternal _SyncEvent_default_instance_;
class SyncEvent_DMInvite;
class SyncEvent_DMInviteDefaultTypeInternal;
extern SyncEvent_DMInviteDefaultTypeInternal _SyncEvent_DMInvite_default_instance_;
class SyncRequest;
class SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::SyncEvent* Arena::CreateMaybeMessage<::protocol::chat::v1::SyncEvent>(Arena*);
template<> ::protocol::chat::v1::SyncEvent_DMInvite* Arena::CreateMaybeMessage<::protocol::chat::v1::SyncEvent_DMInvite>(Arena*);
template<> ::protocol::chat::v1::SyncRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::SyncRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class SyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {};
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncRequest* New() const final {
    return CreateMaybeMessage<SyncRequest>(nullptr);
  }

  SyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SyncRequest";
  }
  protected:
  explicit SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpostbox_2eproto);
    return ::descriptor_table_chat_2fv1_2fpostbox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kHostFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpostbox_2eproto;
};
// -------------------------------------------------------------------

class SyncEvent_DMInvite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SyncEvent.DMInvite) */ {
 public:
  inline SyncEvent_DMInvite() : SyncEvent_DMInvite(nullptr) {};
  virtual ~SyncEvent_DMInvite();

  SyncEvent_DMInvite(const SyncEvent_DMInvite& from);
  SyncEvent_DMInvite(SyncEvent_DMInvite&& from) noexcept
    : SyncEvent_DMInvite() {
    *this = ::std::move(from);
  }

  inline SyncEvent_DMInvite& operator=(const SyncEvent_DMInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncEvent_DMInvite& operator=(SyncEvent_DMInvite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncEvent_DMInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncEvent_DMInvite* internal_default_instance() {
    return reinterpret_cast<const SyncEvent_DMInvite*>(
               &_SyncEvent_DMInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncEvent_DMInvite& a, SyncEvent_DMInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncEvent_DMInvite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncEvent_DMInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncEvent_DMInvite* New() const final {
    return CreateMaybeMessage<SyncEvent_DMInvite>(nullptr);
  }

  SyncEvent_DMInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncEvent_DMInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncEvent_DMInvite& from);
  void MergeFrom(const SyncEvent_DMInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncEvent_DMInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SyncEvent.DMInvite";
  }
  protected:
  explicit SyncEvent_DMInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpostbox_2eproto);
    return ::descriptor_table_chat_2fv1_2fpostbox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserAvatarFieldNumber = 2,
    kDmNameFieldNumber = 3,
    kDmAvatarFieldNumber = 4,
    kInviteIdFieldNumber = 5,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_name(
      std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_avatar = 2;
  void clear_user_avatar();
  const std::string& user_avatar() const;
  void set_user_avatar(const std::string& value);
  void set_user_avatar(std::string&& value);
  void set_user_avatar(const char* value);
  void set_user_avatar(const char* value, size_t size);
  std::string* mutable_user_avatar();
  std::string* release_user_avatar();
  void set_allocated_user_avatar(std::string* user_avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_avatar(
      std::string* user_avatar);
  private:
  const std::string& _internal_user_avatar() const;
  void _internal_set_user_avatar(const std::string& value);
  std::string* _internal_mutable_user_avatar();
  public:

  // string dm_name = 3;
  void clear_dm_name();
  const std::string& dm_name() const;
  void set_dm_name(const std::string& value);
  void set_dm_name(std::string&& value);
  void set_dm_name(const char* value);
  void set_dm_name(const char* value, size_t size);
  std::string* mutable_dm_name();
  std::string* release_dm_name();
  void set_allocated_dm_name(std::string* dm_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dm_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dm_name(
      std::string* dm_name);
  private:
  const std::string& _internal_dm_name() const;
  void _internal_set_dm_name(const std::string& value);
  std::string* _internal_mutable_dm_name();
  public:

  // string dm_avatar = 4;
  void clear_dm_avatar();
  const std::string& dm_avatar() const;
  void set_dm_avatar(const std::string& value);
  void set_dm_avatar(std::string&& value);
  void set_dm_avatar(const char* value);
  void set_dm_avatar(const char* value, size_t size);
  std::string* mutable_dm_avatar();
  std::string* release_dm_avatar();
  void set_allocated_dm_avatar(std::string* dm_avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dm_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dm_avatar(
      std::string* dm_avatar);
  private:
  const std::string& _internal_dm_avatar() const;
  void _internal_set_dm_avatar(const std::string& value);
  std::string* _internal_mutable_dm_avatar();
  public:

  // string invite_id = 5;
  void clear_invite_id();
  const std::string& invite_id() const;
  void set_invite_id(const std::string& value);
  void set_invite_id(std::string&& value);
  void set_invite_id(const char* value);
  void set_invite_id(const char* value, size_t size);
  std::string* mutable_invite_id();
  std::string* release_invite_id();
  void set_allocated_invite_id(std::string* invite_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invite_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invite_id(
      std::string* invite_id);
  private:
  const std::string& _internal_invite_id() const;
  void _internal_set_invite_id(const std::string& value);
  std::string* _internal_mutable_invite_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SyncEvent.DMInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fpostbox_2eproto;
};
// -------------------------------------------------------------------

class SyncEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SyncEvent) */ {
 public:
  inline SyncEvent() : SyncEvent(nullptr) {};
  virtual ~SyncEvent();

  SyncEvent(const SyncEvent& from);
  SyncEvent(SyncEvent&& from) noexcept
    : SyncEvent() {
    *this = ::std::move(from);
  }

  inline SyncEvent& operator=(const SyncEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncEvent& operator=(SyncEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncEvent& default_instance();

  enum EventCase {
    kDmInvite = 1,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncEvent* internal_default_instance() {
    return reinterpret_cast<const SyncEvent*>(
               &_SyncEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncEvent& a, SyncEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncEvent* New() const final {
    return CreateMaybeMessage<SyncEvent>(nullptr);
  }

  SyncEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncEvent& from);
  void MergeFrom(const SyncEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SyncEvent";
  }
  protected:
  explicit SyncEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fpostbox_2eproto);
    return ::descriptor_table_chat_2fv1_2fpostbox_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SyncEvent_DMInvite DMInvite;

  // accessors -------------------------------------------------------

  enum : int {
    kDmInviteFieldNumber = 1,
  };
  // .protocol.chat.v1.SyncEvent.DMInvite dm_invite = 1;
  bool has_dm_invite() const;
  private:
  bool _internal_has_dm_invite() const;
  public:
  void clear_dm_invite();
  const ::protocol::chat::v1::SyncEvent_DMInvite& dm_invite() const;
  ::protocol::chat::v1::SyncEvent_DMInvite* release_dm_invite();
  ::protocol::chat::v1::SyncEvent_DMInvite* mutable_dm_invite();
  void set_allocated_dm_invite(::protocol::chat::v1::SyncEvent_DMInvite* dm_invite);
  private:
  const ::protocol::chat::v1::SyncEvent_DMInvite& _internal_dm_invite() const;
  ::protocol::chat::v1::SyncEvent_DMInvite* _internal_mutable_dm_invite();
  public:
  void unsafe_arena_set_allocated_dm_invite(
      ::protocol::chat::v1::SyncEvent_DMInvite* dm_invite);
  ::protocol::chat::v1::SyncEvent_DMInvite* unsafe_arena_release_dm_invite();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SyncEvent)
 private:
  class _Internal;
  void set_has_dm_invite();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::protocol::chat::v1::SyncEvent_DMInvite* dm_invite_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_chat_2fv1_2fpostbox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncRequest

// string token = 1;
inline void SyncRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncRequest::token() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncRequest.token)
  return _internal_token();
}
inline void SyncRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncRequest.token)
}
inline std::string* SyncRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncRequest.token)
  return _internal_mutable_token();
}
inline const std::string& SyncRequest::_internal_token() const {
  return token_.Get();
}
inline void SyncRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncRequest.token)
}
inline void SyncRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncRequest.token)
}
inline void SyncRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncRequest.token)
}
inline std::string* SyncRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncRequest::release_token() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncRequest.token)
}
inline std::string* SyncRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncRequest.token)
}

// string host = 2;
inline void SyncRequest::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncRequest::host() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncRequest.host)
  return _internal_host();
}
inline void SyncRequest::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncRequest.host)
}
inline std::string* SyncRequest::mutable_host() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncRequest.host)
  return _internal_mutable_host();
}
inline const std::string& SyncRequest::_internal_host() const {
  return host_.Get();
}
inline void SyncRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncRequest::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncRequest.host)
}
inline void SyncRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncRequest.host)
}
inline void SyncRequest::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncRequest.host)
}
inline std::string* SyncRequest::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncRequest::release_host() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncRequest.host)
}
inline std::string* SyncRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncRequest.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncRequest::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncRequest.host)
}

// -------------------------------------------------------------------

// SyncEvent_DMInvite

// string user_name = 1;
inline void SyncEvent_DMInvite::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncEvent_DMInvite::user_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.DMInvite.user_name)
  return _internal_user_name();
}
inline void SyncEvent_DMInvite::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}
inline std::string* SyncEvent_DMInvite::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.DMInvite.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& SyncEvent_DMInvite::_internal_user_name() const {
  return user_name_.Get();
}
inline void SyncEvent_DMInvite::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncEvent_DMInvite::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}
inline void SyncEvent_DMInvite::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}
inline void SyncEvent_DMInvite::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}
inline std::string* SyncEvent_DMInvite::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncEvent_DMInvite::release_user_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.DMInvite.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncEvent_DMInvite::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}
inline std::string* SyncEvent_DMInvite::unsafe_arena_release_user_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.DMInvite.user_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncEvent_DMInvite::unsafe_arena_set_allocated_user_name(
    std::string* user_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.user_name)
}

// string user_avatar = 2;
inline void SyncEvent_DMInvite::clear_user_avatar() {
  user_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncEvent_DMInvite::user_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
  return _internal_user_avatar();
}
inline void SyncEvent_DMInvite::set_user_avatar(const std::string& value) {
  _internal_set_user_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}
inline std::string* SyncEvent_DMInvite::mutable_user_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
  return _internal_mutable_user_avatar();
}
inline const std::string& SyncEvent_DMInvite::_internal_user_avatar() const {
  return user_avatar_.Get();
}
inline void SyncEvent_DMInvite::_internal_set_user_avatar(const std::string& value) {
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncEvent_DMInvite::set_user_avatar(std::string&& value) {
  
  user_avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}
inline void SyncEvent_DMInvite::set_user_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}
inline void SyncEvent_DMInvite::set_user_avatar(const char* value,
    size_t size) {
  
  user_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}
inline std::string* SyncEvent_DMInvite::_internal_mutable_user_avatar() {
  
  return user_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncEvent_DMInvite::release_user_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
  return user_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncEvent_DMInvite::set_allocated_user_avatar(std::string* user_avatar) {
  if (user_avatar != nullptr) {
    
  } else {
    
  }
  user_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}
inline std::string* SyncEvent_DMInvite::unsafe_arena_release_user_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncEvent_DMInvite::unsafe_arena_set_allocated_user_avatar(
    std::string* user_avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_avatar != nullptr) {
    
  } else {
    
  }
  user_avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.user_avatar)
}

// string dm_name = 3;
inline void SyncEvent_DMInvite::clear_dm_name() {
  dm_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncEvent_DMInvite::dm_name() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
  return _internal_dm_name();
}
inline void SyncEvent_DMInvite::set_dm_name(const std::string& value) {
  _internal_set_dm_name(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}
inline std::string* SyncEvent_DMInvite::mutable_dm_name() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
  return _internal_mutable_dm_name();
}
inline const std::string& SyncEvent_DMInvite::_internal_dm_name() const {
  return dm_name_.Get();
}
inline void SyncEvent_DMInvite::_internal_set_dm_name(const std::string& value) {
  
  dm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncEvent_DMInvite::set_dm_name(std::string&& value) {
  
  dm_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}
inline void SyncEvent_DMInvite::set_dm_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}
inline void SyncEvent_DMInvite::set_dm_name(const char* value,
    size_t size) {
  
  dm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}
inline std::string* SyncEvent_DMInvite::_internal_mutable_dm_name() {
  
  return dm_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncEvent_DMInvite::release_dm_name() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
  return dm_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncEvent_DMInvite::set_allocated_dm_name(std::string* dm_name) {
  if (dm_name != nullptr) {
    
  } else {
    
  }
  dm_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dm_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}
inline std::string* SyncEvent_DMInvite::unsafe_arena_release_dm_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dm_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncEvent_DMInvite::unsafe_arena_set_allocated_dm_name(
    std::string* dm_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dm_name != nullptr) {
    
  } else {
    
  }
  dm_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dm_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.dm_name)
}

// string dm_avatar = 4;
inline void SyncEvent_DMInvite::clear_dm_avatar() {
  dm_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncEvent_DMInvite::dm_avatar() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
  return _internal_dm_avatar();
}
inline void SyncEvent_DMInvite::set_dm_avatar(const std::string& value) {
  _internal_set_dm_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}
inline std::string* SyncEvent_DMInvite::mutable_dm_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
  return _internal_mutable_dm_avatar();
}
inline const std::string& SyncEvent_DMInvite::_internal_dm_avatar() const {
  return dm_avatar_.Get();
}
inline void SyncEvent_DMInvite::_internal_set_dm_avatar(const std::string& value) {
  
  dm_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncEvent_DMInvite::set_dm_avatar(std::string&& value) {
  
  dm_avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}
inline void SyncEvent_DMInvite::set_dm_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dm_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}
inline void SyncEvent_DMInvite::set_dm_avatar(const char* value,
    size_t size) {
  
  dm_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}
inline std::string* SyncEvent_DMInvite::_internal_mutable_dm_avatar() {
  
  return dm_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncEvent_DMInvite::release_dm_avatar() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
  return dm_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncEvent_DMInvite::set_allocated_dm_avatar(std::string* dm_avatar) {
  if (dm_avatar != nullptr) {
    
  } else {
    
  }
  dm_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dm_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}
inline std::string* SyncEvent_DMInvite::unsafe_arena_release_dm_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dm_avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncEvent_DMInvite::unsafe_arena_set_allocated_dm_avatar(
    std::string* dm_avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dm_avatar != nullptr) {
    
  } else {
    
  }
  dm_avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dm_avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.dm_avatar)
}

// string invite_id = 5;
inline void SyncEvent_DMInvite::clear_invite_id() {
  invite_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncEvent_DMInvite::invite_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
  return _internal_invite_id();
}
inline void SyncEvent_DMInvite::set_invite_id(const std::string& value) {
  _internal_set_invite_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}
inline std::string* SyncEvent_DMInvite::mutable_invite_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
  return _internal_mutable_invite_id();
}
inline const std::string& SyncEvent_DMInvite::_internal_invite_id() const {
  return invite_id_.Get();
}
inline void SyncEvent_DMInvite::_internal_set_invite_id(const std::string& value) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncEvent_DMInvite::set_invite_id(std::string&& value) {
  
  invite_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}
inline void SyncEvent_DMInvite::set_invite_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}
inline void SyncEvent_DMInvite::set_invite_id(const char* value,
    size_t size) {
  
  invite_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}
inline std::string* SyncEvent_DMInvite::_internal_mutable_invite_id() {
  
  return invite_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncEvent_DMInvite::release_invite_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
  return invite_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncEvent_DMInvite::set_allocated_invite_id(std::string* invite_id) {
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}
inline std::string* SyncEvent_DMInvite::unsafe_arena_release_invite_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invite_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncEvent_DMInvite::unsafe_arena_set_allocated_invite_id(
    std::string* invite_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invite_id != nullptr) {
    
  } else {
    
  }
  invite_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invite_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.DMInvite.invite_id)
}

// -------------------------------------------------------------------

// SyncEvent

// .protocol.chat.v1.SyncEvent.DMInvite dm_invite = 1;
inline bool SyncEvent::_internal_has_dm_invite() const {
  return event_case() == kDmInvite;
}
inline bool SyncEvent::has_dm_invite() const {
  return _internal_has_dm_invite();
}
inline void SyncEvent::set_has_dm_invite() {
  _oneof_case_[0] = kDmInvite;
}
inline void SyncEvent::clear_dm_invite() {
  if (_internal_has_dm_invite()) {
    if (GetArena() == nullptr) {
      delete event_.dm_invite_;
    }
    clear_has_event();
  }
}
inline ::protocol::chat::v1::SyncEvent_DMInvite* SyncEvent::release_dm_invite() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SyncEvent.dm_invite)
  if (_internal_has_dm_invite()) {
    clear_has_event();
      ::protocol::chat::v1::SyncEvent_DMInvite* temp = event_.dm_invite_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.dm_invite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::chat::v1::SyncEvent_DMInvite& SyncEvent::_internal_dm_invite() const {
  return _internal_has_dm_invite()
      ? *event_.dm_invite_
      : *reinterpret_cast< ::protocol::chat::v1::SyncEvent_DMInvite*>(&::protocol::chat::v1::_SyncEvent_DMInvite_default_instance_);
}
inline const ::protocol::chat::v1::SyncEvent_DMInvite& SyncEvent::dm_invite() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SyncEvent.dm_invite)
  return _internal_dm_invite();
}
inline ::protocol::chat::v1::SyncEvent_DMInvite* SyncEvent::unsafe_arena_release_dm_invite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SyncEvent.dm_invite)
  if (_internal_has_dm_invite()) {
    clear_has_event();
    ::protocol::chat::v1::SyncEvent_DMInvite* temp = event_.dm_invite_;
    event_.dm_invite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SyncEvent::unsafe_arena_set_allocated_dm_invite(::protocol::chat::v1::SyncEvent_DMInvite* dm_invite) {
  clear_event();
  if (dm_invite) {
    set_has_dm_invite();
    event_.dm_invite_ = dm_invite;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SyncEvent.dm_invite)
}
inline ::protocol::chat::v1::SyncEvent_DMInvite* SyncEvent::_internal_mutable_dm_invite() {
  if (!_internal_has_dm_invite()) {
    clear_event();
    set_has_dm_invite();
    event_.dm_invite_ = CreateMaybeMessage< ::protocol::chat::v1::SyncEvent_DMInvite >(GetArena());
  }
  return event_.dm_invite_;
}
inline ::protocol::chat::v1::SyncEvent_DMInvite* SyncEvent::mutable_dm_invite() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SyncEvent.dm_invite)
  return _internal_mutable_dm_invite();
}

inline bool SyncEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void SyncEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline SyncEvent::EventCase SyncEvent::event_case() const {
  return SyncEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fpostbox_2eproto
