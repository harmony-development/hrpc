// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/emotes.proto

#include "chat/v1/emotes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2femotes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2femotes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class CreateEmotePackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEmotePackRequest> _instance;
} _CreateEmotePackRequest_default_instance_;
class CreateEmotePackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEmotePackResponse> _instance;
} _CreateEmotePackResponse_default_instance_;
class GetEmotePacksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePacksRequest> _instance;
} _GetEmotePacksRequest_default_instance_;
class GetEmotePacksResponse_EmotePackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePacksResponse_EmotePack> _instance;
} _GetEmotePacksResponse_EmotePack_default_instance_;
class GetEmotePacksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePacksResponse> _instance;
} _GetEmotePacksResponse_default_instance_;
class GetEmotePackEmotesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePackEmotesRequest> _instance;
} _GetEmotePackEmotesRequest_default_instance_;
class GetEmotePackEmotesResponse_EmoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePackEmotesResponse_Emote> _instance;
} _GetEmotePackEmotesResponse_Emote_default_instance_;
class GetEmotePackEmotesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEmotePackEmotesResponse> _instance;
} _GetEmotePackEmotesResponse_default_instance_;
class AddEmoteToPackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddEmoteToPackRequest> _instance;
} _AddEmoteToPackRequest_default_instance_;
class DeleteEmoteFromPackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEmoteFromPackRequest> _instance;
} _DeleteEmoteFromPackRequest_default_instance_;
class DeleteEmotePackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteEmotePackRequest> _instance;
} _DeleteEmotePackRequest_default_instance_;
class DequipEmotePackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DequipEmotePackRequest> _instance;
} _DequipEmotePackRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
static void InitDefaultsscc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_AddEmoteToPackRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::AddEmoteToPackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::AddEmoteToPackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_CreateEmotePackRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::CreateEmotePackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::CreateEmotePackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_CreateEmotePackResponse_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_CreateEmotePackResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::CreateEmotePackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::CreateEmotePackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateEmotePackResponse_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateEmotePackResponse_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DeleteEmoteFromPackRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DeleteEmoteFromPackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DeleteEmoteFromPackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_DeleteEmotePackRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DeleteEmotePackRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DeleteEmotePackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DeleteEmotePackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteEmotePackRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteEmotePackRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_DequipEmotePackRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DequipEmotePackRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DequipEmotePackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DequipEmotePackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DequipEmotePackRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DequipEmotePackRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_GetEmotePackEmotesRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePackEmotesRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePackEmotesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePackEmotesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePackEmotesRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEmotePackEmotesRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePackEmotesResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePackEmotesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePackEmotesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto}, {
      &scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto.base,}};

static void InitDefaultsscc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePackEmotesResponse_Emote_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_GetEmotePacksRequest_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePacksRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePacksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePacksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePacksRequest_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEmotePacksRequest_chat_2fv1_2femotes_2eproto}, {}};

static void InitDefaultsscc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePacksResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePacksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePacksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto}, {
      &scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto.base,}};

static void InitDefaultsscc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetEmotePacksResponse_EmotePack_default_instance_;
    new (ptr) ::protocol::chat::v1::GetEmotePacksResponse_EmotePack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetEmotePacksResponse_EmotePack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2fv1_2femotes_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chat_2fv1_2femotes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2fv1_2femotes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2fv1_2femotes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateEmotePackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateEmotePackRequest, pack_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateEmotePackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::CreateEmotePackResponse, pack_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse_EmotePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse_EmotePack, pack_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse_EmotePack, pack_owner_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse_EmotePack, pack_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePacksResponse, packs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesRequest, pack_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesResponse_Emote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesResponse_Emote, image_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesResponse_Emote, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetEmotePackEmotesResponse, emotes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddEmoteToPackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddEmoteToPackRequest, pack_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddEmoteToPackRequest, image_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddEmoteToPackRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteEmoteFromPackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteEmoteFromPackRequest, pack_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteEmoteFromPackRequest, image_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteEmotePackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteEmotePackRequest, pack_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DequipEmotePackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DequipEmotePackRequest, pack_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::chat::v1::CreateEmotePackRequest)},
  { 6, -1, sizeof(::protocol::chat::v1::CreateEmotePackResponse)},
  { 12, -1, sizeof(::protocol::chat::v1::GetEmotePacksRequest)},
  { 17, -1, sizeof(::protocol::chat::v1::GetEmotePacksResponse_EmotePack)},
  { 25, -1, sizeof(::protocol::chat::v1::GetEmotePacksResponse)},
  { 31, -1, sizeof(::protocol::chat::v1::GetEmotePackEmotesRequest)},
  { 37, -1, sizeof(::protocol::chat::v1::GetEmotePackEmotesResponse_Emote)},
  { 44, -1, sizeof(::protocol::chat::v1::GetEmotePackEmotesResponse)},
  { 50, -1, sizeof(::protocol::chat::v1::AddEmoteToPackRequest)},
  { 58, -1, sizeof(::protocol::chat::v1::DeleteEmoteFromPackRequest)},
  { 65, -1, sizeof(::protocol::chat::v1::DeleteEmotePackRequest)},
  { 71, -1, sizeof(::protocol::chat::v1::DequipEmotePackRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_CreateEmotePackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_CreateEmotePackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePacksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePacksResponse_EmotePack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePacksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePackEmotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePackEmotesResponse_Emote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetEmotePackEmotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_AddEmoteToPackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DeleteEmoteFromPackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DeleteEmotePackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DequipEmotePackRequest_default_instance_),
};

const char descriptor_table_protodef_chat_2fv1_2femotes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024chat/v1/emotes.proto\022\020protocol.chat.v1"
  "\"+\n\026CreateEmotePackRequest\022\021\n\tpack_name\030"
  "\001 \001(\t\".\n\027CreateEmotePackResponse\022\023\n\007pack"
  "_id\030\001 \001(\004B\0020\001\"\026\n\024GetEmotePacksRequest\"\246\001"
  "\n\025GetEmotePacksResponse\022@\n\005packs\030\001 \003(\01321"
  ".protocol.chat.v1.GetEmotePacksResponse."
  "EmotePack\032K\n\tEmotePack\022\023\n\007pack_id\030\001 \001(\004B"
  "\0020\001\022\026\n\npack_owner\030\002 \001(\004B\0020\001\022\021\n\tpack_name"
  "\030\003 \001(\t\"0\n\031GetEmotePackEmotesRequest\022\023\n\007p"
  "ack_id\030\001 \001(\004B\0020\001\"\211\001\n\032GetEmotePackEmotesR"
  "esponse\022B\n\006emotes\030\001 \003(\01322.protocol.chat."
  "v1.GetEmotePackEmotesResponse.Emote\032\'\n\005E"
  "mote\022\020\n\010image_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"L\n\025"
  "AddEmoteToPackRequest\022\023\n\007pack_id\030\001 \001(\004B\002"
  "0\001\022\020\n\010image_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"C\n\032De"
  "leteEmoteFromPackRequest\022\023\n\007pack_id\030\001 \001("
  "\004B\0020\001\022\020\n\010image_id\030\002 \001(\t\"-\n\026DeleteEmotePa"
  "ckRequest\022\023\n\007pack_id\030\001 \001(\004B\0020\001\"-\n\026Dequip"
  "EmotePackRequest\022\023\n\007pack_id\030\001 \001(\004B\0020\001B3Z"
  "1github.com/harmony-development/legato/g"
  "en/chat/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2fv1_2femotes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2fv1_2femotes_2eproto_sccs[12] = {
  &scc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_CreateEmotePackResponse_chat_2fv1_2femotes_2eproto.base,
  &scc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_DeleteEmotePackRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_DequipEmotePackRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePackEmotesRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePacksRequest_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto.base,
  &scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2fv1_2femotes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2femotes_2eproto = {
  false, false, descriptor_table_protodef_chat_2fv1_2femotes_2eproto, "chat/v1/emotes.proto", 818,
  &descriptor_table_chat_2fv1_2femotes_2eproto_once, descriptor_table_chat_2fv1_2femotes_2eproto_sccs, descriptor_table_chat_2fv1_2femotes_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_chat_2fv1_2femotes_2eproto::offsets,
  file_level_metadata_chat_2fv1_2femotes_2eproto, 12, file_level_enum_descriptors_chat_2fv1_2femotes_2eproto, file_level_service_descriptors_chat_2fv1_2femotes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2fv1_2femotes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2fv1_2femotes_2eproto)), true);
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

void CreateEmotePackRequest::InitAsDefaultInstance() {
}
class CreateEmotePackRequest::_Internal {
 public:
};

CreateEmotePackRequest::CreateEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.CreateEmotePackRequest)
}
CreateEmotePackRequest::CreateEmotePackRequest(const CreateEmotePackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pack_name().empty()) {
    pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pack_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.CreateEmotePackRequest)
}

void CreateEmotePackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto.base);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateEmotePackRequest::~CreateEmotePackRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.CreateEmotePackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEmotePackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pack_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateEmotePackRequest::ArenaDtor(void* object) {
  CreateEmotePackRequest* _this = reinterpret_cast< CreateEmotePackRequest* >(object);
  (void)_this;
}
void CreateEmotePackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEmotePackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEmotePackRequest& CreateEmotePackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEmotePackRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void CreateEmotePackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.CreateEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEmotePackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pack_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pack_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.CreateEmotePackRequest.pack_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEmotePackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.CreateEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pack_name = 1;
  if (this->pack_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pack_name().data(), static_cast<int>(this->_internal_pack_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.CreateEmotePackRequest.pack_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pack_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.CreateEmotePackRequest)
  return target;
}

size_t CreateEmotePackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.CreateEmotePackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pack_name = 1;
  if (this->pack_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pack_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEmotePackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.CreateEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEmotePackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEmotePackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.CreateEmotePackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.CreateEmotePackRequest)
    MergeFrom(*source);
  }
}

void CreateEmotePackRequest::MergeFrom(const CreateEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.CreateEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_name().size() > 0) {
    _internal_set_pack_name(from._internal_pack_name());
  }
}

void CreateEmotePackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.CreateEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEmotePackRequest::CopyFrom(const CreateEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.CreateEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEmotePackRequest::IsInitialized() const {
  return true;
}

void CreateEmotePackRequest::InternalSwap(CreateEmotePackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pack_name_.Swap(&other->pack_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEmotePackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEmotePackResponse::InitAsDefaultInstance() {
}
class CreateEmotePackResponse::_Internal {
 public:
};

CreateEmotePackResponse::CreateEmotePackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.CreateEmotePackResponse)
}
CreateEmotePackResponse::CreateEmotePackResponse(const CreateEmotePackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.CreateEmotePackResponse)
}

void CreateEmotePackResponse::SharedCtor() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

CreateEmotePackResponse::~CreateEmotePackResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.CreateEmotePackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEmotePackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateEmotePackResponse::ArenaDtor(void* object) {
  CreateEmotePackResponse* _this = reinterpret_cast< CreateEmotePackResponse* >(object);
  (void)_this;
}
void CreateEmotePackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEmotePackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEmotePackResponse& CreateEmotePackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEmotePackResponse_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void CreateEmotePackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.CreateEmotePackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEmotePackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEmotePackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.CreateEmotePackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.CreateEmotePackResponse)
  return target;
}

size_t CreateEmotePackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.CreateEmotePackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEmotePackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.CreateEmotePackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEmotePackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEmotePackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.CreateEmotePackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.CreateEmotePackResponse)
    MergeFrom(*source);
  }
}

void CreateEmotePackResponse::MergeFrom(const CreateEmotePackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.CreateEmotePackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void CreateEmotePackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.CreateEmotePackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEmotePackResponse::CopyFrom(const CreateEmotePackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.CreateEmotePackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEmotePackResponse::IsInitialized() const {
  return true;
}

void CreateEmotePackResponse::InternalSwap(CreateEmotePackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEmotePackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePacksRequest::InitAsDefaultInstance() {
}
class GetEmotePacksRequest::_Internal {
 public:
};

GetEmotePacksRequest::GetEmotePacksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePacksRequest)
}
GetEmotePacksRequest::GetEmotePacksRequest(const GetEmotePacksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePacksRequest)
}

void GetEmotePacksRequest::SharedCtor() {
}

GetEmotePacksRequest::~GetEmotePacksRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePacksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePacksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetEmotePacksRequest::ArenaDtor(void* object) {
  GetEmotePacksRequest* _this = reinterpret_cast< GetEmotePacksRequest* >(object);
  (void)_this;
}
void GetEmotePacksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePacksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePacksRequest& GetEmotePacksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePacksRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePacksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePacksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePacksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePacksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePacksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePacksRequest)
  return target;
}

size_t GetEmotePacksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePacksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePacksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePacksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePacksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePacksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePacksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePacksRequest)
    MergeFrom(*source);
  }
}

void GetEmotePacksRequest::MergeFrom(const GetEmotePacksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePacksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEmotePacksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePacksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePacksRequest::CopyFrom(const GetEmotePacksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePacksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePacksRequest::IsInitialized() const {
  return true;
}

void GetEmotePacksRequest::InternalSwap(GetEmotePacksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePacksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePacksResponse_EmotePack::InitAsDefaultInstance() {
}
class GetEmotePacksResponse_EmotePack::_Internal {
 public:
};

GetEmotePacksResponse_EmotePack::GetEmotePacksResponse_EmotePack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
}
GetEmotePacksResponse_EmotePack::GetEmotePacksResponse_EmotePack(const GetEmotePacksResponse_EmotePack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pack_name().empty()) {
    pack_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pack_name(),
      GetArena());
  }
  ::memcpy(&pack_id_, &from.pack_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pack_owner_) -
    reinterpret_cast<char*>(&pack_id_)) + sizeof(pack_owner_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
}

void GetEmotePacksResponse_EmotePack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto.base);
  pack_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pack_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pack_owner_) -
      reinterpret_cast<char*>(&pack_id_)) + sizeof(pack_owner_));
}

GetEmotePacksResponse_EmotePack::~GetEmotePacksResponse_EmotePack() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePacksResponse_EmotePack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pack_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEmotePacksResponse_EmotePack::ArenaDtor(void* object) {
  GetEmotePacksResponse_EmotePack* _this = reinterpret_cast< GetEmotePacksResponse_EmotePack* >(object);
  (void)_this;
}
void GetEmotePacksResponse_EmotePack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePacksResponse_EmotePack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePacksResponse_EmotePack& GetEmotePacksResponse_EmotePack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePacksResponse_EmotePack_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePacksResponse_EmotePack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pack_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pack_owner_) -
      reinterpret_cast<char*>(&pack_id_)) + sizeof(pack_owner_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePacksResponse_EmotePack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pack_owner = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pack_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pack_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pack_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePacksResponse_EmotePack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  // uint64 pack_owner = 2 [jstype = JS_STRING];
  if (this->pack_owner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pack_owner(), target);
  }

  // string pack_name = 3;
  if (this->pack_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pack_name().data(), static_cast<int>(this->_internal_pack_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.GetEmotePacksResponse.EmotePack.pack_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pack_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  return target;
}

size_t GetEmotePacksResponse_EmotePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pack_name = 3;
  if (this->pack_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pack_name());
  }

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  // uint64 pack_owner = 2 [jstype = JS_STRING];
  if (this->pack_owner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePacksResponse_EmotePack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePacksResponse_EmotePack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePacksResponse_EmotePack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
    MergeFrom(*source);
  }
}

void GetEmotePacksResponse_EmotePack::MergeFrom(const GetEmotePacksResponse_EmotePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_name().size() > 0) {
    _internal_set_pack_name(from._internal_pack_name());
  }
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
  if (from.pack_owner() != 0) {
    _internal_set_pack_owner(from._internal_pack_owner());
  }
}

void GetEmotePacksResponse_EmotePack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePacksResponse_EmotePack::CopyFrom(const GetEmotePacksResponse_EmotePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePacksResponse.EmotePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePacksResponse_EmotePack::IsInitialized() const {
  return true;
}

void GetEmotePacksResponse_EmotePack::InternalSwap(GetEmotePacksResponse_EmotePack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pack_name_.Swap(&other->pack_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse_EmotePack, pack_owner_)
      + sizeof(GetEmotePacksResponse_EmotePack::pack_owner_)
      - PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse_EmotePack, pack_id_)>(
          reinterpret_cast<char*>(&pack_id_),
          reinterpret_cast<char*>(&other->pack_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePacksResponse_EmotePack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePacksResponse::InitAsDefaultInstance() {
}
class GetEmotePacksResponse::_Internal {
 public:
};

GetEmotePacksResponse::GetEmotePacksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePacksResponse)
}
GetEmotePacksResponse::GetEmotePacksResponse(const GetEmotePacksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packs_(from.packs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePacksResponse)
}

void GetEmotePacksResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto.base);
}

GetEmotePacksResponse::~GetEmotePacksResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePacksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePacksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetEmotePacksResponse::ArenaDtor(void* object) {
  GetEmotePacksResponse* _this = reinterpret_cast< GetEmotePacksResponse* >(object);
  (void)_this;
}
void GetEmotePacksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePacksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePacksResponse& GetEmotePacksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePacksResponse_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePacksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePacksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePacksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.chat.v1.GetEmotePacksResponse.EmotePack packs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePacksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePacksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetEmotePacksResponse.EmotePack packs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_packs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePacksResponse)
  return target;
}

size_t GetEmotePacksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePacksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetEmotePacksResponse.EmotePack packs = 1;
  total_size += 1UL * this->_internal_packs_size();
  for (const auto& msg : this->packs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePacksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePacksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePacksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePacksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePacksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePacksResponse)
    MergeFrom(*source);
  }
}

void GetEmotePacksResponse::MergeFrom(const GetEmotePacksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePacksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packs_.MergeFrom(from.packs_);
}

void GetEmotePacksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePacksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePacksResponse::CopyFrom(const GetEmotePacksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePacksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePacksResponse::IsInitialized() const {
  return true;
}

void GetEmotePacksResponse::InternalSwap(GetEmotePacksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packs_.InternalSwap(&other->packs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePacksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePackEmotesRequest::InitAsDefaultInstance() {
}
class GetEmotePackEmotesRequest::_Internal {
 public:
};

GetEmotePackEmotesRequest::GetEmotePackEmotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePackEmotesRequest)
}
GetEmotePackEmotesRequest::GetEmotePackEmotesRequest(const GetEmotePackEmotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePackEmotesRequest)
}

void GetEmotePackEmotesRequest::SharedCtor() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

GetEmotePackEmotesRequest::~GetEmotePackEmotesRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePackEmotesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePackEmotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetEmotePackEmotesRequest::ArenaDtor(void* object) {
  GetEmotePackEmotesRequest* _this = reinterpret_cast< GetEmotePackEmotesRequest* >(object);
  (void)_this;
}
void GetEmotePackEmotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePackEmotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePackEmotesRequest& GetEmotePackEmotesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePackEmotesRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePackEmotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePackEmotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePackEmotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePackEmotesRequest)
  return target;
}

size_t GetEmotePackEmotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePackEmotesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePackEmotesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePackEmotesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePackEmotesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePackEmotesRequest)
    MergeFrom(*source);
  }
}

void GetEmotePackEmotesRequest::MergeFrom(const GetEmotePackEmotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void GetEmotePackEmotesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePackEmotesRequest::CopyFrom(const GetEmotePackEmotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePackEmotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePackEmotesRequest::IsInitialized() const {
  return true;
}

void GetEmotePackEmotesRequest::InternalSwap(GetEmotePackEmotesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePackEmotesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePackEmotesResponse_Emote::InitAsDefaultInstance() {
}
class GetEmotePackEmotesResponse_Emote::_Internal {
 public:
};

GetEmotePackEmotesResponse_Emote::GetEmotePackEmotesResponse_Emote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
}
GetEmotePackEmotesResponse_Emote::GetEmotePackEmotesResponse_Emote(const GetEmotePackEmotesResponse_Emote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
}

void GetEmotePackEmotesResponse_Emote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEmotePackEmotesResponse_Emote::~GetEmotePackEmotesResponse_Emote() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePackEmotesResponse_Emote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEmotePackEmotesResponse_Emote::ArenaDtor(void* object) {
  GetEmotePackEmotesResponse_Emote* _this = reinterpret_cast< GetEmotePackEmotesResponse_Emote* >(object);
  (void)_this;
}
void GetEmotePackEmotesResponse_Emote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePackEmotesResponse_Emote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePackEmotesResponse_Emote& GetEmotePackEmotesResponse_Emote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePackEmotesResponse_Emote_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePackEmotesResponse_Emote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePackEmotesResponse_Emote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePackEmotesResponse_Emote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.GetEmotePackEmotesResponse.Emote.image_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.GetEmotePackEmotesResponse.Emote.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  return target;
}

size_t GetEmotePackEmotesResponse_Emote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePackEmotesResponse_Emote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePackEmotesResponse_Emote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePackEmotesResponse_Emote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
    MergeFrom(*source);
  }
}

void GetEmotePackEmotesResponse_Emote::MergeFrom(const GetEmotePackEmotesResponse_Emote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetEmotePackEmotesResponse_Emote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePackEmotesResponse_Emote::CopyFrom(const GetEmotePackEmotesResponse_Emote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePackEmotesResponse.Emote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePackEmotesResponse_Emote::IsInitialized() const {
  return true;
}

void GetEmotePackEmotesResponse_Emote::InternalSwap(GetEmotePackEmotesResponse_Emote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePackEmotesResponse_Emote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEmotePackEmotesResponse::InitAsDefaultInstance() {
}
class GetEmotePackEmotesResponse::_Internal {
 public:
};

GetEmotePackEmotesResponse::GetEmotePackEmotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emotes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetEmotePackEmotesResponse)
}
GetEmotePackEmotesResponse::GetEmotePackEmotesResponse(const GetEmotePackEmotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emotes_(from.emotes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetEmotePackEmotesResponse)
}

void GetEmotePackEmotesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto.base);
}

GetEmotePackEmotesResponse::~GetEmotePackEmotesResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetEmotePackEmotesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetEmotePackEmotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetEmotePackEmotesResponse::ArenaDtor(void* object) {
  GetEmotePackEmotesResponse* _this = reinterpret_cast< GetEmotePackEmotesResponse* >(object);
  (void)_this;
}
void GetEmotePackEmotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEmotePackEmotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEmotePackEmotesResponse& GetEmotePackEmotesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEmotePackEmotesResponse_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void GetEmotePackEmotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emotes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEmotePackEmotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.chat.v1.GetEmotePackEmotesResponse.Emote emotes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEmotePackEmotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetEmotePackEmotesResponse.Emote emotes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emotes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_emotes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetEmotePackEmotesResponse)
  return target;
}

size_t GetEmotePackEmotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.GetEmotePackEmotesResponse.Emote emotes = 1;
  total_size += 1UL * this->_internal_emotes_size();
  for (const auto& msg : this->emotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEmotePackEmotesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEmotePackEmotesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEmotePackEmotesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetEmotePackEmotesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetEmotePackEmotesResponse)
    MergeFrom(*source);
  }
}

void GetEmotePackEmotesResponse::MergeFrom(const GetEmotePackEmotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emotes_.MergeFrom(from.emotes_);
}

void GetEmotePackEmotesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEmotePackEmotesResponse::CopyFrom(const GetEmotePackEmotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetEmotePackEmotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEmotePackEmotesResponse::IsInitialized() const {
  return true;
}

void GetEmotePackEmotesResponse::InternalSwap(GetEmotePackEmotesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emotes_.InternalSwap(&other->emotes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEmotePackEmotesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddEmoteToPackRequest::InitAsDefaultInstance() {
}
class AddEmoteToPackRequest::_Internal {
 public:
};

AddEmoteToPackRequest::AddEmoteToPackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.AddEmoteToPackRequest)
}
AddEmoteToPackRequest::AddEmoteToPackRequest(const AddEmoteToPackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.AddEmoteToPackRequest)
}

void AddEmoteToPackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

AddEmoteToPackRequest::~AddEmoteToPackRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.AddEmoteToPackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddEmoteToPackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddEmoteToPackRequest::ArenaDtor(void* object) {
  AddEmoteToPackRequest* _this = reinterpret_cast< AddEmoteToPackRequest* >(object);
  (void)_this;
}
void AddEmoteToPackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddEmoteToPackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddEmoteToPackRequest& AddEmoteToPackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddEmoteToPackRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void AddEmoteToPackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.AddEmoteToPackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddEmoteToPackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.AddEmoteToPackRequest.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.AddEmoteToPackRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddEmoteToPackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.AddEmoteToPackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.AddEmoteToPackRequest.image_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.AddEmoteToPackRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.AddEmoteToPackRequest)
  return target;
}

size_t AddEmoteToPackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.AddEmoteToPackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddEmoteToPackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.AddEmoteToPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddEmoteToPackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddEmoteToPackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.AddEmoteToPackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.AddEmoteToPackRequest)
    MergeFrom(*source);
  }
}

void AddEmoteToPackRequest::MergeFrom(const AddEmoteToPackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.AddEmoteToPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void AddEmoteToPackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.AddEmoteToPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddEmoteToPackRequest::CopyFrom(const AddEmoteToPackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.AddEmoteToPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddEmoteToPackRequest::IsInitialized() const {
  return true;
}

void AddEmoteToPackRequest::InternalSwap(AddEmoteToPackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddEmoteToPackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEmoteFromPackRequest::InitAsDefaultInstance() {
}
class DeleteEmoteFromPackRequest::_Internal {
 public:
};

DeleteEmoteFromPackRequest::DeleteEmoteFromPackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DeleteEmoteFromPackRequest)
}
DeleteEmoteFromPackRequest::DeleteEmoteFromPackRequest(const DeleteEmoteFromPackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_id().empty()) {
    image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_id(),
      GetArena());
  }
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DeleteEmoteFromPackRequest)
}

void DeleteEmoteFromPackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto.base);
  image_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

DeleteEmoteFromPackRequest::~DeleteEmoteFromPackRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DeleteEmoteFromPackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteEmoteFromPackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteEmoteFromPackRequest::ArenaDtor(void* object) {
  DeleteEmoteFromPackRequest* _this = reinterpret_cast< DeleteEmoteFromPackRequest* >(object);
  (void)_this;
}
void DeleteEmoteFromPackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEmoteFromPackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEmoteFromPackRequest& DeleteEmoteFromPackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEmoteFromPackRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void DeleteEmoteFromPackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEmoteFromPackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.DeleteEmoteFromPackRequest.image_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEmoteFromPackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.DeleteEmoteFromPackRequest.image_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DeleteEmoteFromPackRequest)
  return target;
}

size_t DeleteEmoteFromPackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 2;
  if (this->image_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEmoteFromPackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEmoteFromPackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEmoteFromPackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DeleteEmoteFromPackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DeleteEmoteFromPackRequest)
    MergeFrom(*source);
  }
}

void DeleteEmoteFromPackRequest::MergeFrom(const DeleteEmoteFromPackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id().size() > 0) {
    _internal_set_image_id(from._internal_image_id());
  }
  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void DeleteEmoteFromPackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEmoteFromPackRequest::CopyFrom(const DeleteEmoteFromPackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DeleteEmoteFromPackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEmoteFromPackRequest::IsInitialized() const {
  return true;
}

void DeleteEmoteFromPackRequest::InternalSwap(DeleteEmoteFromPackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_id_.Swap(&other->image_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEmoteFromPackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteEmotePackRequest::InitAsDefaultInstance() {
}
class DeleteEmotePackRequest::_Internal {
 public:
};

DeleteEmotePackRequest::DeleteEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DeleteEmotePackRequest)
}
DeleteEmotePackRequest::DeleteEmotePackRequest(const DeleteEmotePackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DeleteEmotePackRequest)
}

void DeleteEmotePackRequest::SharedCtor() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

DeleteEmotePackRequest::~DeleteEmotePackRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DeleteEmotePackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteEmotePackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteEmotePackRequest::ArenaDtor(void* object) {
  DeleteEmotePackRequest* _this = reinterpret_cast< DeleteEmotePackRequest* >(object);
  (void)_this;
}
void DeleteEmotePackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteEmotePackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteEmotePackRequest& DeleteEmotePackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteEmotePackRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void DeleteEmotePackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DeleteEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteEmotePackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteEmotePackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DeleteEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DeleteEmotePackRequest)
  return target;
}

size_t DeleteEmotePackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DeleteEmotePackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteEmotePackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DeleteEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteEmotePackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteEmotePackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DeleteEmotePackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DeleteEmotePackRequest)
    MergeFrom(*source);
  }
}

void DeleteEmotePackRequest::MergeFrom(const DeleteEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DeleteEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void DeleteEmotePackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DeleteEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteEmotePackRequest::CopyFrom(const DeleteEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DeleteEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteEmotePackRequest::IsInitialized() const {
  return true;
}

void DeleteEmotePackRequest::InternalSwap(DeleteEmotePackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteEmotePackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DequipEmotePackRequest::InitAsDefaultInstance() {
}
class DequipEmotePackRequest::_Internal {
 public:
};

DequipEmotePackRequest::DequipEmotePackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DequipEmotePackRequest)
}
DequipEmotePackRequest::DequipEmotePackRequest(const DequipEmotePackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pack_id_ = from.pack_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DequipEmotePackRequest)
}

void DequipEmotePackRequest::SharedCtor() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}

DequipEmotePackRequest::~DequipEmotePackRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DequipEmotePackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DequipEmotePackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DequipEmotePackRequest::ArenaDtor(void* object) {
  DequipEmotePackRequest* _this = reinterpret_cast< DequipEmotePackRequest* >(object);
  (void)_this;
}
void DequipEmotePackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DequipEmotePackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DequipEmotePackRequest& DequipEmotePackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DequipEmotePackRequest_chat_2fv1_2femotes_2eproto.base);
  return *internal_default_instance();
}


void DequipEmotePackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DequipEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pack_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DequipEmotePackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pack_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DequipEmotePackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DequipEmotePackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DequipEmotePackRequest)
  return target;
}

size_t DequipEmotePackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DequipEmotePackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pack_id = 1 [jstype = JS_STRING];
  if (this->pack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DequipEmotePackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DequipEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DequipEmotePackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DequipEmotePackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DequipEmotePackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DequipEmotePackRequest)
    MergeFrom(*source);
  }
}

void DequipEmotePackRequest::MergeFrom(const DequipEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DequipEmotePackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pack_id() != 0) {
    _internal_set_pack_id(from._internal_pack_id());
  }
}

void DequipEmotePackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DequipEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DequipEmotePackRequest::CopyFrom(const DequipEmotePackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DequipEmotePackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DequipEmotePackRequest::IsInitialized() const {
  return true;
}

void DequipEmotePackRequest::InternalSwap(DequipEmotePackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pack_id_, other->pack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DequipEmotePackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::CreateEmotePackRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::CreateEmotePackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::CreateEmotePackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::CreateEmotePackResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::CreateEmotePackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::CreateEmotePackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePacksRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePacksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePacksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePacksResponse_EmotePack* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePacksResponse_EmotePack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePacksResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePacksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePacksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePackEmotesRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePackEmotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePackEmotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePackEmotesResponse_Emote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetEmotePackEmotesResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetEmotePackEmotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetEmotePackEmotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::AddEmoteToPackRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::AddEmoteToPackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::AddEmoteToPackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DeleteEmoteFromPackRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DeleteEmoteFromPackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DeleteEmoteFromPackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DeleteEmotePackRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DeleteEmotePackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DeleteEmotePackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DequipEmotePackRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DequipEmotePackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DequipEmotePackRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
