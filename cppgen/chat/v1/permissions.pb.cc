// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/permissions.proto

#include "chat/v1/permissions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Permission_chat_2fv1_2fpermissions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fpermissions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Role_chat_2fv1_2fpermissions_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class QueryPermissionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPermissionsRequest> _instance;
} _QueryPermissionsRequest_default_instance_;
class QueryPermissionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPermissionsResponse> _instance;
} _QueryPermissionsResponse_default_instance_;
class PermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Permission> _instance;
} _Permission_default_instance_;
class PermissionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PermissionList> _instance;
} _PermissionList_default_instance_;
class SetPermissionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPermissionsRequest> _instance;
} _SetPermissionsRequest_default_instance_;
class GetPermissionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPermissionsRequest> _instance;
} _GetPermissionsRequest_default_instance_;
class GetPermissionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPermissionsResponse> _instance;
} _GetPermissionsResponse_default_instance_;
class RoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Role> _instance;
} _Role_default_instance_;
class MoveRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveRoleRequest> _instance;
} _MoveRoleRequest_default_instance_;
class MoveRoleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveRoleResponse> _instance;
} _MoveRoleResponse_default_instance_;
class GetGuildRolesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuildRolesRequest> _instance;
} _GetGuildRolesRequest_default_instance_;
class GetGuildRolesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGuildRolesResponse> _instance;
} _GetGuildRolesResponse_default_instance_;
class AddGuildRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGuildRoleRequest> _instance;
} _AddGuildRoleRequest_default_instance_;
class AddGuildRoleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGuildRoleResponse> _instance;
} _AddGuildRoleResponse_default_instance_;
class DeleteGuildRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGuildRoleRequest> _instance;
} _DeleteGuildRoleRequest_default_instance_;
class ModifyGuildRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyGuildRoleRequest> _instance;
} _ModifyGuildRoleRequest_default_instance_;
class ManageUserRolesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManageUserRolesRequest> _instance;
} _ManageUserRolesRequest_default_instance_;
class GetUserRolesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserRolesRequest> _instance;
} _GetUserRolesRequest_default_instance_;
class GetUserRolesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserRolesResponse> _instance;
} _GetUserRolesResponse_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
static void InitDefaultsscc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_AddGuildRoleRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::AddGuildRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::AddGuildRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_AddGuildRoleResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_AddGuildRoleResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::AddGuildRoleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::AddGuildRoleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGuildRoleResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGuildRoleResponse_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_DeleteGuildRoleRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_DeleteGuildRoleRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::DeleteGuildRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::DeleteGuildRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGuildRoleRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGuildRoleRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_GetGuildRolesRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetGuildRolesRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetGuildRolesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetGuildRolesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetGuildRolesRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetGuildRolesRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetGuildRolesResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetGuildRolesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetGuildRolesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_GetPermissionsRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetPermissionsRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetPermissionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetPermissionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPermissionsRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPermissionsRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetPermissionsResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetPermissionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetPermissionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_GetUserRolesRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetUserRolesRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::GetUserRolesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetUserRolesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserRolesRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserRolesRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_GetUserRolesResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_GetUserRolesResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::GetUserRolesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::GetUserRolesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserRolesResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserRolesResponse_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_ManageUserRolesRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_ManageUserRolesRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::ManageUserRolesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::ManageUserRolesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManageUserRolesRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManageUserRolesRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_ModifyGuildRoleRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::ModifyGuildRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::ModifyGuildRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_MoveRoleRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_MoveRoleRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::MoveRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::MoveRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveRoleRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveRoleRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_MoveRoleResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_MoveRoleResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::MoveRoleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::MoveRoleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveRoleResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveRoleResponse_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_Permission_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Permission_default_instance_;
    new (ptr) ::protocol::chat::v1::Permission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Permission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Permission_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Permission_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_PermissionList_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_PermissionList_default_instance_;
    new (ptr) ::protocol::chat::v1::PermissionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::PermissionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PermissionList_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_Permission_chat_2fv1_2fpermissions_2eproto.base,}};

static void InitDefaultsscc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_QueryPermissionsRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::QueryPermissionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::QueryPermissionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_QueryPermissionsResponse_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_QueryPermissionsResponse_default_instance_;
    new (ptr) ::protocol::chat::v1::QueryPermissionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::QueryPermissionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPermissionsResponse_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryPermissionsResponse_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_Role_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_Role_default_instance_;
    new (ptr) ::protocol::chat::v1::Role();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::Role::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Role_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Role_chat_2fv1_2fpermissions_2eproto}, {}};

static void InitDefaultsscc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::chat::v1::_SetPermissionsRequest_default_instance_;
    new (ptr) ::protocol::chat::v1::SetPermissionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::chat::v1::SetPermissionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto}, {
      &scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2fv1_2fpermissions_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2fv1_2fpermissions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2fv1_2fpermissions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2fv1_2fpermissions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsRequest, check_for_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsRequest, as_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::QueryPermissionsResponse, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Permission, matches_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Permission, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::PermissionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::PermissionList, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SetPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SetPermissionsRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SetPermissionsRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SetPermissionsRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::SetPermissionsRequest, perms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsRequest, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetPermissionsResponse, perms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, color_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, hoist_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::Role, pingable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleRequest, before_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleRequest, after_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::MoveRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildRolesRequest, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetGuildRolesResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddGuildRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddGuildRoleRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddGuildRoleRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddGuildRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::AddGuildRoleResponse, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteGuildRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteGuildRoleRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::DeleteGuildRoleRequest, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, role_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, modify_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, modify_color_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, modify_hoist_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ModifyGuildRoleRequest, modify_pingable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ManageUserRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ManageUserRolesRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ManageUserRolesRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ManageUserRolesRequest, give_role_ids_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::ManageUserRolesRequest, take_role_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetUserRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetUserRolesRequest, guild_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetUserRolesRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetUserRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::chat::v1::GetUserRolesResponse, roles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::chat::v1::QueryPermissionsRequest)},
  { 9, -1, sizeof(::protocol::chat::v1::QueryPermissionsResponse)},
  { 15, -1, sizeof(::protocol::chat::v1::Permission)},
  { 22, -1, sizeof(::protocol::chat::v1::PermissionList)},
  { 28, -1, sizeof(::protocol::chat::v1::SetPermissionsRequest)},
  { 37, -1, sizeof(::protocol::chat::v1::GetPermissionsRequest)},
  { 45, -1, sizeof(::protocol::chat::v1::GetPermissionsResponse)},
  { 51, -1, sizeof(::protocol::chat::v1::Role)},
  { 61, -1, sizeof(::protocol::chat::v1::MoveRoleRequest)},
  { 70, -1, sizeof(::protocol::chat::v1::MoveRoleResponse)},
  { 75, -1, sizeof(::protocol::chat::v1::GetGuildRolesRequest)},
  { 81, -1, sizeof(::protocol::chat::v1::GetGuildRolesResponse)},
  { 87, -1, sizeof(::protocol::chat::v1::AddGuildRoleRequest)},
  { 94, -1, sizeof(::protocol::chat::v1::AddGuildRoleResponse)},
  { 100, -1, sizeof(::protocol::chat::v1::DeleteGuildRoleRequest)},
  { 107, -1, sizeof(::protocol::chat::v1::ModifyGuildRoleRequest)},
  { 118, -1, sizeof(::protocol::chat::v1::ManageUserRolesRequest)},
  { 127, -1, sizeof(::protocol::chat::v1::GetUserRolesRequest)},
  { 134, -1, sizeof(::protocol::chat::v1::GetUserRolesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_QueryPermissionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_QueryPermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_PermissionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_SetPermissionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetPermissionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetPermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_Role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_MoveRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_MoveRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetGuildRolesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetGuildRolesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_AddGuildRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_AddGuildRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_DeleteGuildRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_ModifyGuildRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_ManageUserRolesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetUserRolesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::chat::v1::_GetUserRolesResponse_default_instance_),
};

const char descriptor_table_protodef_chat_2fv1_2fpermissions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031chat/v1/permissions.proto\022\020protocol.ch"
  "at.v1\"f\n\027QueryPermissionsRequest\022\024\n\010guil"
  "d_id\030\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022\021"
  "\n\tcheck_for\030\003 \001(\t\022\n\n\002as\030\004 \001(\004\"&\n\030QueryPe"
  "rmissionsResponse\022\n\n\002ok\030\001 \001(\010\"k\n\nPermiss"
  "ion\022\017\n\007matches\030\001 \001(\t\022/\n\004mode\030\002 \001(\0162!.pro"
  "tocol.chat.v1.Permission.Mode\"\033\n\004Mode\022\t\n"
  "\005Allow\020\000\022\010\n\004Deny\020\001\"C\n\016PermissionList\0221\n\013"
  "permissions\030\001 \003(\0132\034.protocol.chat.v1.Per"
  "mission\"\213\001\n\025SetPermissionsRequest\022\024\n\010gui"
  "ld_id\030\001 \001(\004B\0020\001\022\026\n\nchannel_id\030\002 \001(\004B\0020\001\022"
  "\023\n\007role_id\030\003 \001(\004B\0020\001\022/\n\005perms\030\004 \001(\0132 .pr"
  "otocol.chat.v1.PermissionList\"Z\n\025GetPerm"
  "issionsRequest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\026\n\n"
  "channel_id\030\002 \001(\004B\0020\001\022\023\n\007role_id\030\003 \001(\004B\0020"
  "\001\"I\n\026GetPermissionsResponse\022/\n\005perms\030\001 \001"
  "(\0132 .protocol.chat.v1.PermissionList\"Y\n\004"
  "Role\022\023\n\007role_id\030\001 \001(\004B\0020\001\022\014\n\004name\030\002 \001(\t\022"
  "\r\n\005color\030\003 \001(\005\022\r\n\005hoist\030\004 \001(\010\022\020\n\010pingabl"
  "e\030\005 \001(\010\"i\n\017MoveRoleRequest\022\024\n\010guild_id\030\001"
  " \001(\004B\0020\001\022\023\n\007role_id\030\002 \001(\004B\0020\001\022\025\n\tbefore_"
  "id\030\003 \001(\004B\0020\001\022\024\n\010after_id\030\004 \001(\004B\0020\001\"\022\n\020Mo"
  "veRoleResponse\",\n\024GetGuildRolesRequest\022\024"
  "\n\010guild_id\030\001 \001(\004B\0020\001\">\n\025GetGuildRolesRes"
  "ponse\022%\n\005roles\030\001 \003(\0132\026.protocol.chat.v1."
  "Role\"Q\n\023AddGuildRoleRequest\022\024\n\010guild_id\030"
  "\001 \001(\004B\0020\001\022$\n\004role\030\002 \001(\0132\026.protocol.chat."
  "v1.Role\"+\n\024AddGuildRoleResponse\022\023\n\007role_"
  "id\030\001 \001(\004B\0020\001\"C\n\026DeleteGuildRoleRequest\022\024"
  "\n\010guild_id\030\001 \001(\004B\0020\001\022\023\n\007role_id\030\002 \001(\004B\0020"
  "\001\"\256\001\n\026ModifyGuildRoleRequest\022\024\n\010guild_id"
  "\030\001 \001(\004B\0020\001\022$\n\004role\030\002 \001(\0132\026.protocol.chat"
  ".v1.Role\022\023\n\013modify_name\030\003 \001(\010\022\024\n\014modify_"
  "color\030\004 \001(\010\022\024\n\014modify_hoist\030\005 \001(\010\022\027\n\017mod"
  "ify_pingable\030\006 \001(\010\"y\n\026ManageUserRolesReq"
  "uest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\023\n\007user_id\030\002 "
  "\001(\004B\0020\001\022\031\n\rgive_role_ids\030\003 \003(\004B\0020\001\022\031\n\rta"
  "ke_role_ids\030\004 \003(\004B\0020\001\"@\n\023GetUserRolesReq"
  "uest\022\024\n\010guild_id\030\001 \001(\004B\0020\001\022\023\n\007user_id\030\002 "
  "\001(\004B\0020\001\")\n\024GetUserRolesResponse\022\021\n\005roles"
  "\030\001 \003(\004B\0020\001B3Z1github.com/harmony-develop"
  "ment/legato/gen/chat/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2fv1_2fpermissions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2fv1_2fpermissions_2eproto_sccs[19] = {
  &scc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_AddGuildRoleResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_DeleteGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetGuildRolesRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetUserRolesRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_GetUserRolesResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_ManageUserRolesRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_MoveRoleRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_MoveRoleResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_Permission_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_QueryPermissionsResponse_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_Role_chat_2fv1_2fpermissions_2eproto.base,
  &scc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2fv1_2fpermissions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fpermissions_2eproto = {
  false, false, descriptor_table_protodef_chat_2fv1_2fpermissions_2eproto, "chat/v1/permissions.proto", 1671,
  &descriptor_table_chat_2fv1_2fpermissions_2eproto_once, descriptor_table_chat_2fv1_2fpermissions_2eproto_sccs, descriptor_table_chat_2fv1_2fpermissions_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_chat_2fv1_2fpermissions_2eproto::offsets,
  file_level_metadata_chat_2fv1_2fpermissions_2eproto, 19, file_level_enum_descriptors_chat_2fv1_2fpermissions_2eproto, file_level_service_descriptors_chat_2fv1_2fpermissions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2fv1_2fpermissions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2fv1_2fpermissions_2eproto)), true);
namespace protocol {
namespace chat {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2fv1_2fpermissions_2eproto);
  return file_level_enum_descriptors_chat_2fv1_2fpermissions_2eproto[0];
}
bool Permission_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Permission_Mode Permission::Allow;
constexpr Permission_Mode Permission::Deny;
constexpr Permission_Mode Permission::Mode_MIN;
constexpr Permission_Mode Permission::Mode_MAX;
constexpr int Permission::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void QueryPermissionsRequest::InitAsDefaultInstance() {
}
class QueryPermissionsRequest::_Internal {
 public:
};

QueryPermissionsRequest::QueryPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.QueryPermissionsRequest)
}
QueryPermissionsRequest::QueryPermissionsRequest(const QueryPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  check_for_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_check_for().empty()) {
    check_for_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_check_for(),
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&as_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(as_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.QueryPermissionsRequest)
}

void QueryPermissionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base);
  check_for_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(as_));
}

QueryPermissionsRequest::~QueryPermissionsRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.QueryPermissionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  check_for_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryPermissionsRequest::ArenaDtor(void* object) {
  QueryPermissionsRequest* _this = reinterpret_cast< QueryPermissionsRequest* >(object);
  (void)_this;
}
void QueryPermissionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryPermissionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPermissionsRequest& QueryPermissionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void QueryPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.QueryPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_for_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(as_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPermissionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string check_for = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_check_for();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.QueryPermissionsRequest.check_for"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 as = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPermissionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.QueryPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // string check_for = 3;
  if (this->check_for().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_for().data(), static_cast<int>(this->_internal_check_for().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.QueryPermissionsRequest.check_for");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_check_for(), target);
  }

  // uint64 as = 4;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_as(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.QueryPermissionsRequest)
  return target;
}

size_t QueryPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.QueryPermissionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string check_for = 3;
  if (this->check_for().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_for());
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 as = 4;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPermissionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.QueryPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPermissionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPermissionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.QueryPermissionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.QueryPermissionsRequest)
    MergeFrom(*source);
  }
}

void QueryPermissionsRequest::MergeFrom(const QueryPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.QueryPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.check_for().size() > 0) {
    _internal_set_check_for(from._internal_check_for());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
}

void QueryPermissionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.QueryPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPermissionsRequest::CopyFrom(const QueryPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.QueryPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPermissionsRequest::IsInitialized() const {
  return true;
}

void QueryPermissionsRequest::InternalSwap(QueryPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  check_for_.Swap(&other->check_for_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPermissionsRequest, as_)
      + sizeof(QueryPermissionsRequest::as_)
      - PROTOBUF_FIELD_OFFSET(QueryPermissionsRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPermissionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryPermissionsResponse::InitAsDefaultInstance() {
}
class QueryPermissionsResponse::_Internal {
 public:
};

QueryPermissionsResponse::QueryPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.QueryPermissionsResponse)
}
QueryPermissionsResponse::QueryPermissionsResponse(const QueryPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.QueryPermissionsResponse)
}

void QueryPermissionsResponse::SharedCtor() {
  ok_ = false;
}

QueryPermissionsResponse::~QueryPermissionsResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.QueryPermissionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryPermissionsResponse::ArenaDtor(void* object) {
  QueryPermissionsResponse* _this = reinterpret_cast< QueryPermissionsResponse* >(object);
  (void)_this;
}
void QueryPermissionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryPermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPermissionsResponse& QueryPermissionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPermissionsResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void QueryPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.QueryPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.QueryPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.QueryPermissionsResponse)
  return target;
}

size_t QueryPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.QueryPermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.QueryPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryPermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.QueryPermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.QueryPermissionsResponse)
    MergeFrom(*source);
  }
}

void QueryPermissionsResponse::MergeFrom(const QueryPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.QueryPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void QueryPermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.QueryPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPermissionsResponse::CopyFrom(const QueryPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.QueryPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPermissionsResponse::IsInitialized() const {
  return true;
}

void QueryPermissionsResponse::InternalSwap(QueryPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Permission::InitAsDefaultInstance() {
}
class Permission::_Internal {
 public:
};

Permission::Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matches().empty()) {
    matches_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matches(),
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Permission)
}

void Permission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Permission_chat_2fv1_2fpermissions_2eproto.base);
  matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Permission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matches_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Permission& Permission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Permission_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_matches();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Permission.matches"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Permission.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::protocol::chat::v1::Permission_Mode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Permission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matches = 1;
  if (this->matches().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matches().data(), static_cast<int>(this->_internal_matches().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Permission.matches");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_matches(), target);
  }

  // .protocol.chat.v1.Permission.Mode mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Permission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string matches = 1;
  if (this->matches().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matches());
  }

  // .protocol.chat.v1.Permission.Mode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Permission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  const Permission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Permission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Permission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Permission)
    MergeFrom(*source);
  }
}

void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matches().size() > 0) {
    _internal_set_matches(from._internal_matches());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void Permission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.Swap(&other->matches_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PermissionList::InitAsDefaultInstance() {
}
class PermissionList::_Internal {
 public:
};

PermissionList::PermissionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  permissions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.PermissionList)
}
PermissionList::PermissionList(const PermissionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.PermissionList)
}

void PermissionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base);
}

PermissionList::~PermissionList() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.PermissionList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PermissionList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PermissionList::ArenaDtor(void* object) {
  PermissionList* _this = reinterpret_cast< PermissionList* >(object);
  (void)_this;
}
void PermissionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PermissionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PermissionList& PermissionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PermissionList_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void PermissionList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.PermissionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.chat.v1.Permission permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PermissionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.PermissionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.Permission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.PermissionList)
  return target;
}

size_t PermissionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.PermissionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.Permission permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PermissionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.PermissionList)
  GOOGLE_DCHECK_NE(&from, this);
  const PermissionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PermissionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.PermissionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.PermissionList)
    MergeFrom(*source);
  }
}

void PermissionList::MergeFrom(const PermissionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.PermissionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
}

void PermissionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.PermissionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionList::CopyFrom(const PermissionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.PermissionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionList::IsInitialized() const {
  return true;
}

void PermissionList::InternalSwap(PermissionList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPermissionsRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_SetPermissionsRequest_default_instance_._instance.get_mutable()->perms_ = const_cast< ::protocol::chat::v1::PermissionList*>(
      ::protocol::chat::v1::PermissionList::internal_default_instance());
}
class SetPermissionsRequest::_Internal {
 public:
  static const ::protocol::chat::v1::PermissionList& perms(const SetPermissionsRequest* msg);
};

const ::protocol::chat::v1::PermissionList&
SetPermissionsRequest::_Internal::perms(const SetPermissionsRequest* msg) {
  return *msg->perms_;
}
SetPermissionsRequest::SetPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.SetPermissionsRequest)
}
SetPermissionsRequest::SetPermissionsRequest(const SetPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perms()) {
    perms_ = new ::protocol::chat::v1::PermissionList(*from.perms_);
  } else {
    perms_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.SetPermissionsRequest)
}

void SetPermissionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base);
  ::memset(&perms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&perms_)) + sizeof(role_id_));
}

SetPermissionsRequest::~SetPermissionsRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.SetPermissionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete perms_;
}

void SetPermissionsRequest::ArenaDtor(void* object) {
  SetPermissionsRequest* _this = reinterpret_cast< SetPermissionsRequest* >(object);
  (void)_this;
}
void SetPermissionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPermissionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPermissionsRequest& SetPermissionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void SetPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.SetPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPermissionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.PermissionList perms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_perms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPermissionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.SetPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 role_id = 3 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  // .protocol.chat.v1.PermissionList perms = 4;
  if (this->has_perms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::perms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.SetPermissionsRequest)
  return target;
}

size_t SetPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.SetPermissionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.PermissionList perms = 4;
  if (this->has_perms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perms_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 role_id = 3 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPermissionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.SetPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPermissionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPermissionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.SetPermissionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.SetPermissionsRequest)
    MergeFrom(*source);
  }
}

void SetPermissionsRequest::MergeFrom(const SetPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.SetPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_perms()) {
    _internal_mutable_perms()->::protocol::chat::v1::PermissionList::MergeFrom(from._internal_perms());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void SetPermissionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.SetPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPermissionsRequest::CopyFrom(const SetPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.SetPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionsRequest::IsInitialized() const {
  return true;
}

void SetPermissionsRequest::InternalSwap(SetPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPermissionsRequest, role_id_)
      + sizeof(SetPermissionsRequest::role_id_)
      - PROTOBUF_FIELD_OFFSET(SetPermissionsRequest, perms_)>(
          reinterpret_cast<char*>(&perms_),
          reinterpret_cast<char*>(&other->perms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPermissionsRequest::InitAsDefaultInstance() {
}
class GetPermissionsRequest::_Internal {
 public:
};

GetPermissionsRequest::GetPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetPermissionsRequest)
}
GetPermissionsRequest::GetPermissionsRequest(const GetPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetPermissionsRequest)
}

void GetPermissionsRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
}

GetPermissionsRequest::~GetPermissionsRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetPermissionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPermissionsRequest::ArenaDtor(void* object) {
  GetPermissionsRequest* _this = reinterpret_cast< GetPermissionsRequest* >(object);
  (void)_this;
}
void GetPermissionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPermissionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPermissionsRequest& GetPermissionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPermissionsRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPermissionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPermissionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 role_id = 3 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetPermissionsRequest)
  return target;
}

size_t GetPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetPermissionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 channel_id = 2 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 role_id = 3 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPermissionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPermissionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPermissionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetPermissionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetPermissionsRequest)
    MergeFrom(*source);
  }
}

void GetPermissionsRequest::MergeFrom(const GetPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void GetPermissionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPermissionsRequest::CopyFrom(const GetPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPermissionsRequest::IsInitialized() const {
  return true;
}

void GetPermissionsRequest::InternalSwap(GetPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPermissionsRequest, role_id_)
      + sizeof(GetPermissionsRequest::role_id_)
      - PROTOBUF_FIELD_OFFSET(GetPermissionsRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPermissionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPermissionsResponse::InitAsDefaultInstance() {
  ::protocol::chat::v1::_GetPermissionsResponse_default_instance_._instance.get_mutable()->perms_ = const_cast< ::protocol::chat::v1::PermissionList*>(
      ::protocol::chat::v1::PermissionList::internal_default_instance());
}
class GetPermissionsResponse::_Internal {
 public:
  static const ::protocol::chat::v1::PermissionList& perms(const GetPermissionsResponse* msg);
};

const ::protocol::chat::v1::PermissionList&
GetPermissionsResponse::_Internal::perms(const GetPermissionsResponse* msg) {
  return *msg->perms_;
}
GetPermissionsResponse::GetPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetPermissionsResponse)
}
GetPermissionsResponse::GetPermissionsResponse(const GetPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perms()) {
    perms_ = new ::protocol::chat::v1::PermissionList(*from.perms_);
  } else {
    perms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetPermissionsResponse)
}

void GetPermissionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto.base);
  perms_ = nullptr;
}

GetPermissionsResponse::~GetPermissionsResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetPermissionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete perms_;
}

void GetPermissionsResponse::ArenaDtor(void* object) {
  GetPermissionsResponse* _this = reinterpret_cast< GetPermissionsResponse* >(object);
  (void)_this;
}
void GetPermissionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPermissionsResponse& GetPermissionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPermissionsResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && perms_ != nullptr) {
    delete perms_;
  }
  perms_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.chat.v1.PermissionList perms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.chat.v1.PermissionList perms = 1;
  if (this->has_perms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::perms(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetPermissionsResponse)
  return target;
}

size_t GetPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetPermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.PermissionList perms = 1;
  if (this->has_perms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perms_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetPermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetPermissionsResponse)
    MergeFrom(*source);
  }
}

void GetPermissionsResponse::MergeFrom(const GetPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_perms()) {
    _internal_mutable_perms()->::protocol::chat::v1::PermissionList::MergeFrom(from._internal_perms());
  }
}

void GetPermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPermissionsResponse::CopyFrom(const GetPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPermissionsResponse::IsInitialized() const {
  return true;
}

void GetPermissionsResponse::InternalSwap(GetPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(perms_, other->perms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Role::InitAsDefaultInstance() {
}
class Role::_Internal {
 public:
};

Role::Role(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pingable_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(pingable_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.Role)
}

void Role::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Role_chat_2fv1_2fpermissions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pingable_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(pingable_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.Role)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Role::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Role::ArenaDtor(void* object) {
  Role* _this = reinterpret_cast< Role* >(object);
  (void)_this;
}
void Role::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Role& Role::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Role_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pingable_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(pingable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 role_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.chat.v1.Role.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hoist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hoist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pingable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pingable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Role::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.Role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.chat.v1.Role.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 color = 3;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_color(), target);
  }

  // bool hoist = 4;
  if (this->hoist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hoist(), target);
  }

  // bool pingable = 5;
  if (this->pingable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pingable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.Role)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 role_id = 1 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // int32 color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // bool hoist = 4;
  if (this->hoist() != 0) {
    total_size += 1 + 1;
  }

  // bool pingable = 5;
  if (this->pingable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Role::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  const Role* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Role>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.Role)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.hoist() != 0) {
    _internal_set_hoist(from._internal_hoist());
  }
  if (from.pingable() != 0) {
    _internal_set_pingable(from._internal_pingable());
  }
}

void Role::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Role, pingable_)
      + sizeof(Role::pingable_)
      - PROTOBUF_FIELD_OFFSET(Role, role_id_)>(
          reinterpret_cast<char*>(&role_id_),
          reinterpret_cast<char*>(&other->role_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveRoleRequest::InitAsDefaultInstance() {
}
class MoveRoleRequest::_Internal {
 public:
};

MoveRoleRequest::MoveRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.MoveRoleRequest)
}
MoveRoleRequest::MoveRoleRequest(const MoveRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&after_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(after_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.MoveRoleRequest)
}

void MoveRoleRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(after_id_));
}

MoveRoleRequest::~MoveRoleRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.MoveRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveRoleRequest::ArenaDtor(void* object) {
  MoveRoleRequest* _this = reinterpret_cast< MoveRoleRequest* >(object);
  (void)_this;
}
void MoveRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRoleRequest& MoveRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void MoveRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.MoveRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(after_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 before_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          before_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 after_id = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          after_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.MoveRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 2 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // uint64 before_id = 3 [jstype = JS_STRING];
  if (this->before_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_before_id(), target);
  }

  // uint64 after_id = 4 [jstype = JS_STRING];
  if (this->after_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_after_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.MoveRoleRequest)
  return target;
}

size_t MoveRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.MoveRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 2 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // uint64 before_id = 3 [jstype = JS_STRING];
  if (this->before_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_before_id());
  }

  // uint64 after_id = 4 [jstype = JS_STRING];
  if (this->after_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_after_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.MoveRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.MoveRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.MoveRoleRequest)
    MergeFrom(*source);
  }
}

void MoveRoleRequest::MergeFrom(const MoveRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.MoveRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.before_id() != 0) {
    _internal_set_before_id(from._internal_before_id());
  }
  if (from.after_id() != 0) {
    _internal_set_after_id(from._internal_after_id());
  }
}

void MoveRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.MoveRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRoleRequest::CopyFrom(const MoveRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.MoveRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRoleRequest::IsInitialized() const {
  return true;
}

void MoveRoleRequest::InternalSwap(MoveRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRoleRequest, after_id_)
      + sizeof(MoveRoleRequest::after_id_)
      - PROTOBUF_FIELD_OFFSET(MoveRoleRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveRoleResponse::InitAsDefaultInstance() {
}
class MoveRoleResponse::_Internal {
 public:
};

MoveRoleResponse::MoveRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.MoveRoleResponse)
}
MoveRoleResponse::MoveRoleResponse(const MoveRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.MoveRoleResponse)
}

void MoveRoleResponse::SharedCtor() {
}

MoveRoleResponse::~MoveRoleResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.MoveRoleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveRoleResponse::ArenaDtor(void* object) {
  MoveRoleResponse* _this = reinterpret_cast< MoveRoleResponse* >(object);
  (void)_this;
}
void MoveRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRoleResponse& MoveRoleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveRoleResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void MoveRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.MoveRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.MoveRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.MoveRoleResponse)
  return target;
}

size_t MoveRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.MoveRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.MoveRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.MoveRoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.MoveRoleResponse)
    MergeFrom(*source);
  }
}

void MoveRoleResponse::MergeFrom(const MoveRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.MoveRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoveRoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.MoveRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRoleResponse::CopyFrom(const MoveRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.MoveRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRoleResponse::IsInitialized() const {
  return true;
}

void MoveRoleResponse::InternalSwap(MoveRoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuildRolesRequest::InitAsDefaultInstance() {
}
class GetGuildRolesRequest::_Internal {
 public:
};

GetGuildRolesRequest::GetGuildRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetGuildRolesRequest)
}
GetGuildRolesRequest::GetGuildRolesRequest(const GetGuildRolesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetGuildRolesRequest)
}

void GetGuildRolesRequest::SharedCtor() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}

GetGuildRolesRequest::~GetGuildRolesRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetGuildRolesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGuildRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetGuildRolesRequest::ArenaDtor(void* object) {
  GetGuildRolesRequest* _this = reinterpret_cast< GetGuildRolesRequest* >(object);
  (void)_this;
}
void GetGuildRolesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuildRolesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuildRolesRequest& GetGuildRolesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuildRolesRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetGuildRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetGuildRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuildRolesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuildRolesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetGuildRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetGuildRolesRequest)
  return target;
}

size_t GetGuildRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetGuildRolesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuildRolesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetGuildRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuildRolesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuildRolesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetGuildRolesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetGuildRolesRequest)
    MergeFrom(*source);
  }
}

void GetGuildRolesRequest::MergeFrom(const GetGuildRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetGuildRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void GetGuildRolesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetGuildRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildRolesRequest::CopyFrom(const GetGuildRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetGuildRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildRolesRequest::IsInitialized() const {
  return true;
}

void GetGuildRolesRequest::InternalSwap(GetGuildRolesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuildRolesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGuildRolesResponse::InitAsDefaultInstance() {
}
class GetGuildRolesResponse::_Internal {
 public:
};

GetGuildRolesResponse::GetGuildRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetGuildRolesResponse)
}
GetGuildRolesResponse::GetGuildRolesResponse(const GetGuildRolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetGuildRolesResponse)
}

void GetGuildRolesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto.base);
}

GetGuildRolesResponse::~GetGuildRolesResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetGuildRolesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetGuildRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetGuildRolesResponse::ArenaDtor(void* object) {
  GetGuildRolesResponse* _this = reinterpret_cast< GetGuildRolesResponse* >(object);
  (void)_this;
}
void GetGuildRolesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetGuildRolesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGuildRolesResponse& GetGuildRolesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGuildRolesResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetGuildRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetGuildRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetGuildRolesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.chat.v1.Role roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGuildRolesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetGuildRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.Role roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetGuildRolesResponse)
  return target;
}

size_t GetGuildRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetGuildRolesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.chat.v1.Role roles = 1;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGuildRolesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetGuildRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGuildRolesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGuildRolesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetGuildRolesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetGuildRolesResponse)
    MergeFrom(*source);
  }
}

void GetGuildRolesResponse::MergeFrom(const GetGuildRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetGuildRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
}

void GetGuildRolesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetGuildRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildRolesResponse::CopyFrom(const GetGuildRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetGuildRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildRolesResponse::IsInitialized() const {
  return true;
}

void GetGuildRolesResponse::InternalSwap(GetGuildRolesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGuildRolesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGuildRoleRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_AddGuildRoleRequest_default_instance_._instance.get_mutable()->role_ = const_cast< ::protocol::chat::v1::Role*>(
      ::protocol::chat::v1::Role::internal_default_instance());
}
class AddGuildRoleRequest::_Internal {
 public:
  static const ::protocol::chat::v1::Role& role(const AddGuildRoleRequest* msg);
};

const ::protocol::chat::v1::Role&
AddGuildRoleRequest::_Internal::role(const AddGuildRoleRequest* msg) {
  return *msg->role_;
}
AddGuildRoleRequest::AddGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.AddGuildRoleRequest)
}
AddGuildRoleRequest::AddGuildRoleRequest(const AddGuildRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::protocol::chat::v1::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.AddGuildRoleRequest)
}

void AddGuildRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&role_)) + sizeof(guild_id_));
}

AddGuildRoleRequest::~AddGuildRoleRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.AddGuildRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGuildRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void AddGuildRoleRequest::ArenaDtor(void* object) {
  AddGuildRoleRequest* _this = reinterpret_cast< AddGuildRoleRequest* >(object);
  (void)_this;
}
void AddGuildRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGuildRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGuildRoleRequest& AddGuildRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void AddGuildRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.AddGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  guild_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGuildRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Role role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGuildRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.AddGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // .protocol.chat.v1.Role role = 2;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.AddGuildRoleRequest)
  return target;
}

size_t AddGuildRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.AddGuildRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.Role role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGuildRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.AddGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGuildRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGuildRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.AddGuildRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.AddGuildRoleRequest)
    MergeFrom(*source);
  }
}

void AddGuildRoleRequest::MergeFrom(const AddGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.AddGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role()) {
    _internal_mutable_role()->::protocol::chat::v1::Role::MergeFrom(from._internal_role());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
}

void AddGuildRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.AddGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGuildRoleRequest::CopyFrom(const AddGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.AddGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGuildRoleRequest::IsInitialized() const {
  return true;
}

void AddGuildRoleRequest::InternalSwap(AddGuildRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGuildRoleRequest, guild_id_)
      + sizeof(AddGuildRoleRequest::guild_id_)
      - PROTOBUF_FIELD_OFFSET(AddGuildRoleRequest, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGuildRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGuildRoleResponse::InitAsDefaultInstance() {
}
class AddGuildRoleResponse::_Internal {
 public:
};

AddGuildRoleResponse::AddGuildRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.AddGuildRoleResponse)
}
AddGuildRoleResponse::AddGuildRoleResponse(const AddGuildRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.AddGuildRoleResponse)
}

void AddGuildRoleResponse::SharedCtor() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}

AddGuildRoleResponse::~AddGuildRoleResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.AddGuildRoleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGuildRoleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddGuildRoleResponse::ArenaDtor(void* object) {
  AddGuildRoleResponse* _this = reinterpret_cast< AddGuildRoleResponse* >(object);
  (void)_this;
}
void AddGuildRoleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGuildRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGuildRoleResponse& AddGuildRoleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGuildRoleResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void AddGuildRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.AddGuildRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGuildRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 role_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGuildRoleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.AddGuildRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.AddGuildRoleResponse)
  return target;
}

size_t AddGuildRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.AddGuildRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 role_id = 1 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGuildRoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.AddGuildRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGuildRoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGuildRoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.AddGuildRoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.AddGuildRoleResponse)
    MergeFrom(*source);
  }
}

void AddGuildRoleResponse::MergeFrom(const AddGuildRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.AddGuildRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void AddGuildRoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.AddGuildRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGuildRoleResponse::CopyFrom(const AddGuildRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.AddGuildRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGuildRoleResponse::IsInitialized() const {
  return true;
}

void AddGuildRoleResponse::InternalSwap(AddGuildRoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGuildRoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteGuildRoleRequest::InitAsDefaultInstance() {
}
class DeleteGuildRoleRequest::_Internal {
 public:
};

DeleteGuildRoleRequest::DeleteGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.DeleteGuildRoleRequest)
}
DeleteGuildRoleRequest::DeleteGuildRoleRequest(const DeleteGuildRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.DeleteGuildRoleRequest)
}

void DeleteGuildRoleRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
}

DeleteGuildRoleRequest::~DeleteGuildRoleRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.DeleteGuildRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteGuildRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteGuildRoleRequest::ArenaDtor(void* object) {
  DeleteGuildRoleRequest* _this = reinterpret_cast< DeleteGuildRoleRequest* >(object);
  (void)_this;
}
void DeleteGuildRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteGuildRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGuildRoleRequest& DeleteGuildRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void DeleteGuildRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.DeleteGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteGuildRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGuildRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.DeleteGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 role_id = 2 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.DeleteGuildRoleRequest)
  return target;
}

size_t DeleteGuildRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.DeleteGuildRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 role_id = 2 [jstype = JS_STRING];
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGuildRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.DeleteGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGuildRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGuildRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.DeleteGuildRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.DeleteGuildRoleRequest)
    MergeFrom(*source);
  }
}

void DeleteGuildRoleRequest::MergeFrom(const DeleteGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.DeleteGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void DeleteGuildRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.DeleteGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildRoleRequest::CopyFrom(const DeleteGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.DeleteGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildRoleRequest::IsInitialized() const {
  return true;
}

void DeleteGuildRoleRequest::InternalSwap(DeleteGuildRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteGuildRoleRequest, role_id_)
      + sizeof(DeleteGuildRoleRequest::role_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteGuildRoleRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGuildRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyGuildRoleRequest::InitAsDefaultInstance() {
  ::protocol::chat::v1::_ModifyGuildRoleRequest_default_instance_._instance.get_mutable()->role_ = const_cast< ::protocol::chat::v1::Role*>(
      ::protocol::chat::v1::Role::internal_default_instance());
}
class ModifyGuildRoleRequest::_Internal {
 public:
  static const ::protocol::chat::v1::Role& role(const ModifyGuildRoleRequest* msg);
};

const ::protocol::chat::v1::Role&
ModifyGuildRoleRequest::_Internal::role(const ModifyGuildRoleRequest* msg) {
  return *msg->role_;
}
ModifyGuildRoleRequest::ModifyGuildRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.ModifyGuildRoleRequest)
}
ModifyGuildRoleRequest::ModifyGuildRoleRequest(const ModifyGuildRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::protocol::chat::v1::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&modify_pingable_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(modify_pingable_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.ModifyGuildRoleRequest)
}

void ModifyGuildRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modify_pingable_) -
      reinterpret_cast<char*>(&role_)) + sizeof(modify_pingable_));
}

ModifyGuildRoleRequest::~ModifyGuildRoleRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.ModifyGuildRoleRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyGuildRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void ModifyGuildRoleRequest::ArenaDtor(void* object) {
  ModifyGuildRoleRequest* _this = reinterpret_cast< ModifyGuildRoleRequest* >(object);
  (void)_this;
}
void ModifyGuildRoleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyGuildRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyGuildRoleRequest& ModifyGuildRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyGuildRoleRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void ModifyGuildRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.ModifyGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&modify_pingable_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(modify_pingable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyGuildRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.chat.v1.Role role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool modify_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          modify_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool modify_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          modify_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool modify_hoist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          modify_hoist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool modify_pingable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          modify_pingable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyGuildRoleRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.ModifyGuildRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // .protocol.chat.v1.Role role = 2;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role(this), target, stream);
  }

  // bool modify_name = 3;
  if (this->modify_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_modify_name(), target);
  }

  // bool modify_color = 4;
  if (this->modify_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_modify_color(), target);
  }

  // bool modify_hoist = 5;
  if (this->modify_hoist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_modify_hoist(), target);
  }

  // bool modify_pingable = 6;
  if (this->modify_pingable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_modify_pingable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.ModifyGuildRoleRequest)
  return target;
}

size_t ModifyGuildRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.ModifyGuildRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.chat.v1.Role role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // bool modify_name = 3;
  if (this->modify_name() != 0) {
    total_size += 1 + 1;
  }

  // bool modify_color = 4;
  if (this->modify_color() != 0) {
    total_size += 1 + 1;
  }

  // bool modify_hoist = 5;
  if (this->modify_hoist() != 0) {
    total_size += 1 + 1;
  }

  // bool modify_pingable = 6;
  if (this->modify_pingable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyGuildRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.ModifyGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyGuildRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyGuildRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.ModifyGuildRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.ModifyGuildRoleRequest)
    MergeFrom(*source);
  }
}

void ModifyGuildRoleRequest::MergeFrom(const ModifyGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.ModifyGuildRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role()) {
    _internal_mutable_role()->::protocol::chat::v1::Role::MergeFrom(from._internal_role());
  }
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.modify_name() != 0) {
    _internal_set_modify_name(from._internal_modify_name());
  }
  if (from.modify_color() != 0) {
    _internal_set_modify_color(from._internal_modify_color());
  }
  if (from.modify_hoist() != 0) {
    _internal_set_modify_hoist(from._internal_modify_hoist());
  }
  if (from.modify_pingable() != 0) {
    _internal_set_modify_pingable(from._internal_modify_pingable());
  }
}

void ModifyGuildRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.ModifyGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyGuildRoleRequest::CopyFrom(const ModifyGuildRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.ModifyGuildRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyGuildRoleRequest::IsInitialized() const {
  return true;
}

void ModifyGuildRoleRequest::InternalSwap(ModifyGuildRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyGuildRoleRequest, modify_pingable_)
      + sizeof(ModifyGuildRoleRequest::modify_pingable_)
      - PROTOBUF_FIELD_OFFSET(ModifyGuildRoleRequest, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyGuildRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManageUserRolesRequest::InitAsDefaultInstance() {
}
class ManageUserRolesRequest::_Internal {
 public:
};

ManageUserRolesRequest::ManageUserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  give_role_ids_(arena),
  take_role_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.ManageUserRolesRequest)
}
ManageUserRolesRequest::ManageUserRolesRequest(const ManageUserRolesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      give_role_ids_(from.give_role_ids_),
      take_role_ids_(from.take_role_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.ManageUserRolesRequest)
}

void ManageUserRolesRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
}

ManageUserRolesRequest::~ManageUserRolesRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.ManageUserRolesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManageUserRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ManageUserRolesRequest::ArenaDtor(void* object) {
  ManageUserRolesRequest* _this = reinterpret_cast< ManageUserRolesRequest* >(object);
  (void)_this;
}
void ManageUserRolesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManageUserRolesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManageUserRolesRequest& ManageUserRolesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManageUserRolesRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void ManageUserRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.ManageUserRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  give_role_ids_.Clear();
  take_role_ids_.Clear();
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManageUserRolesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 give_role_ids = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_give_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_give_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 take_role_ids = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_take_role_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_take_role_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManageUserRolesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.ManageUserRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 user_id = 2 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // repeated uint64 give_role_ids = 3 [jstype = JS_STRING];
  {
    int byte_size = _give_role_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_give_role_ids(), byte_size, target);
    }
  }

  // repeated uint64 take_role_ids = 4 [jstype = JS_STRING];
  {
    int byte_size = _take_role_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_take_role_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.ManageUserRolesRequest)
  return target;
}

size_t ManageUserRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.ManageUserRolesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 give_role_ids = 3 [jstype = JS_STRING];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->give_role_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _give_role_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 take_role_ids = 4 [jstype = JS_STRING];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->take_role_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _take_role_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 user_id = 2 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManageUserRolesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.ManageUserRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManageUserRolesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManageUserRolesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.ManageUserRolesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.ManageUserRolesRequest)
    MergeFrom(*source);
  }
}

void ManageUserRolesRequest::MergeFrom(const ManageUserRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.ManageUserRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  give_role_ids_.MergeFrom(from.give_role_ids_);
  take_role_ids_.MergeFrom(from.take_role_ids_);
  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ManageUserRolesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.ManageUserRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageUserRolesRequest::CopyFrom(const ManageUserRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.ManageUserRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageUserRolesRequest::IsInitialized() const {
  return true;
}

void ManageUserRolesRequest::InternalSwap(ManageUserRolesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  give_role_ids_.InternalSwap(&other->give_role_ids_);
  take_role_ids_.InternalSwap(&other->take_role_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManageUserRolesRequest, user_id_)
      + sizeof(ManageUserRolesRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(ManageUserRolesRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManageUserRolesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserRolesRequest::InitAsDefaultInstance() {
}
class GetUserRolesRequest::_Internal {
 public:
};

GetUserRolesRequest::GetUserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetUserRolesRequest)
}
GetUserRolesRequest::GetUserRolesRequest(const GetUserRolesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetUserRolesRequest)
}

void GetUserRolesRequest::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
}

GetUserRolesRequest::~GetUserRolesRequest() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetUserRolesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUserRolesRequest::ArenaDtor(void* object) {
  GetUserRolesRequest* _this = reinterpret_cast< GetUserRolesRequest* >(object);
  (void)_this;
}
void GetUserRolesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserRolesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserRolesRequest& GetUserRolesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserRolesRequest_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetUserRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetUserRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserRolesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 guild_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserRolesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetUserRolesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guild_id(), target);
  }

  // uint64 user_id = 2 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetUserRolesRequest)
  return target;
}

size_t GetUserRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetUserRolesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 guild_id = 1 [jstype = JS_STRING];
  if (this->guild_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guild_id());
  }

  // uint64 user_id = 2 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserRolesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetUserRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserRolesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserRolesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetUserRolesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetUserRolesRequest)
    MergeFrom(*source);
  }
}

void GetUserRolesRequest::MergeFrom(const GetUserRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetUserRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guild_id() != 0) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GetUserRolesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetUserRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRolesRequest::CopyFrom(const GetUserRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetUserRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRolesRequest::IsInitialized() const {
  return true;
}

void GetUserRolesRequest::InternalSwap(GetUserRolesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserRolesRequest, user_id_)
      + sizeof(GetUserRolesRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetUserRolesRequest, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRolesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserRolesResponse::InitAsDefaultInstance() {
}
class GetUserRolesResponse::_Internal {
 public:
};

GetUserRolesResponse::GetUserRolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.chat.v1.GetUserRolesResponse)
}
GetUserRolesResponse::GetUserRolesResponse(const GetUserRolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.chat.v1.GetUserRolesResponse)
}

void GetUserRolesResponse::SharedCtor() {
}

GetUserRolesResponse::~GetUserRolesResponse() {
  // @@protoc_insertion_point(destructor:protocol.chat.v1.GetUserRolesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUserRolesResponse::ArenaDtor(void* object) {
  GetUserRolesResponse* _this = reinterpret_cast< GetUserRolesResponse* >(object);
  (void)_this;
}
void GetUserRolesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserRolesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserRolesResponse& GetUserRolesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserRolesResponse_chat_2fv1_2fpermissions_2eproto.base);
  return *internal_default_instance();
}


void GetUserRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.chat.v1.GetUserRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserRolesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 roles = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_roles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_roles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserRolesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.chat.v1.GetUserRolesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 roles = 1 [jstype = JS_STRING];
  {
    int byte_size = _roles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_roles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.chat.v1.GetUserRolesResponse)
  return target;
}

size_t GetUserRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.chat.v1.GetUserRolesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 roles = 1 [jstype = JS_STRING];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->roles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserRolesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.chat.v1.GetUserRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserRolesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserRolesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.chat.v1.GetUserRolesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.chat.v1.GetUserRolesResponse)
    MergeFrom(*source);
  }
}

void GetUserRolesResponse::MergeFrom(const GetUserRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.chat.v1.GetUserRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
}

void GetUserRolesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.chat.v1.GetUserRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRolesResponse::CopyFrom(const GetUserRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.chat.v1.GetUserRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRolesResponse::IsInitialized() const {
  return true;
}

void GetUserRolesResponse::InternalSwap(GetUserRolesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRolesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::QueryPermissionsRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::QueryPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::QueryPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::QueryPermissionsResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::QueryPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::QueryPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Permission* Arena::CreateMaybeMessage< ::protocol::chat::v1::Permission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::PermissionList* Arena::CreateMaybeMessage< ::protocol::chat::v1::PermissionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::PermissionList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::SetPermissionsRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::SetPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::SetPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetPermissionsRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetPermissionsResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::Role* Arena::CreateMaybeMessage< ::protocol::chat::v1::Role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::Role >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::MoveRoleRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::MoveRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::MoveRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::MoveRoleResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::MoveRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::MoveRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetGuildRolesRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetGuildRolesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetGuildRolesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetGuildRolesResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetGuildRolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetGuildRolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::AddGuildRoleRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::AddGuildRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::AddGuildRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::AddGuildRoleResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::AddGuildRoleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::AddGuildRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::DeleteGuildRoleRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::DeleteGuildRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::DeleteGuildRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::ModifyGuildRoleRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::ModifyGuildRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::ModifyGuildRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::ManageUserRolesRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::ManageUserRolesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::ManageUserRolesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetUserRolesRequest* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetUserRolesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetUserRolesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::chat::v1::GetUserRolesResponse* Arena::CreateMaybeMessage< ::protocol::chat::v1::GetUserRolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::chat::v1::GetUserRolesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
