// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat/v1/messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2fv1_2fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2fv1_2fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2fv1_2fmessages_2eproto;
namespace protocol {
namespace chat {
namespace v1 {
class DeleteMessageRequest;
class DeleteMessageRequestDefaultTypeInternal;
extern DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
class GetChannelMessagesRequest;
class GetChannelMessagesRequestDefaultTypeInternal;
extern GetChannelMessagesRequestDefaultTypeInternal _GetChannelMessagesRequest_default_instance_;
class GetChannelMessagesResponse;
class GetChannelMessagesResponseDefaultTypeInternal;
extern GetChannelMessagesResponseDefaultTypeInternal _GetChannelMessagesResponse_default_instance_;
class GetMessageRequest;
class GetMessageRequestDefaultTypeInternal;
extern GetMessageRequestDefaultTypeInternal _GetMessageRequest_default_instance_;
class GetMessageResponse;
class GetMessageResponseDefaultTypeInternal;
extern GetMessageResponseDefaultTypeInternal _GetMessageResponse_default_instance_;
class SendMessageRequest;
class SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class SendMessageResponse;
class SendMessageResponseDefaultTypeInternal;
extern SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
class TriggerActionRequest;
class TriggerActionRequestDefaultTypeInternal;
extern TriggerActionRequestDefaultTypeInternal _TriggerActionRequest_default_instance_;
class UpdateMessageRequest;
class UpdateMessageRequestDefaultTypeInternal;
extern UpdateMessageRequestDefaultTypeInternal _UpdateMessageRequest_default_instance_;
}  // namespace v1
}  // namespace chat
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::chat::v1::DeleteMessageRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::DeleteMessageRequest>(Arena*);
template<> ::protocol::chat::v1::GetChannelMessagesRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetChannelMessagesRequest>(Arena*);
template<> ::protocol::chat::v1::GetChannelMessagesResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetChannelMessagesResponse>(Arena*);
template<> ::protocol::chat::v1::GetMessageRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::GetMessageRequest>(Arena*);
template<> ::protocol::chat::v1::GetMessageResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::GetMessageResponse>(Arena*);
template<> ::protocol::chat::v1::SendMessageRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::SendMessageRequest>(Arena*);
template<> ::protocol::chat::v1::SendMessageResponse* Arena::CreateMaybeMessage<::protocol::chat::v1::SendMessageResponse>(Arena*);
template<> ::protocol::chat::v1::TriggerActionRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::TriggerActionRequest>(Arena*);
template<> ::protocol::chat::v1::UpdateMessageRequest* Arena::CreateMaybeMessage<::protocol::chat::v1::UpdateMessageRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace chat {
namespace v1 {

// ===================================================================

class GetChannelMessagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetChannelMessagesRequest) */ {
 public:
  inline GetChannelMessagesRequest() : GetChannelMessagesRequest(nullptr) {};
  virtual ~GetChannelMessagesRequest();

  GetChannelMessagesRequest(const GetChannelMessagesRequest& from);
  GetChannelMessagesRequest(GetChannelMessagesRequest&& from) noexcept
    : GetChannelMessagesRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelMessagesRequest& operator=(const GetChannelMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelMessagesRequest& operator=(GetChannelMessagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelMessagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelMessagesRequest*>(
               &_GetChannelMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetChannelMessagesRequest& a, GetChannelMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelMessagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelMessagesRequest* New() const final {
    return CreateMaybeMessage<GetChannelMessagesRequest>(nullptr);
  }

  GetChannelMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelMessagesRequest& from);
  void MergeFrom(const GetChannelMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetChannelMessagesRequest";
  }
  protected:
  explicit GetChannelMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kBeforeMessageFieldNumber = 3,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 before_message = 3 [jstype = JS_STRING];
  void clear_before_message();
  ::PROTOBUF_NAMESPACE_ID::uint64 before_message() const;
  void set_before_message(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_before_message() const;
  void _internal_set_before_message(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetChannelMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 before_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class GetChannelMessagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetChannelMessagesResponse) */ {
 public:
  inline GetChannelMessagesResponse() : GetChannelMessagesResponse(nullptr) {};
  virtual ~GetChannelMessagesResponse();

  GetChannelMessagesResponse(const GetChannelMessagesResponse& from);
  GetChannelMessagesResponse(GetChannelMessagesResponse&& from) noexcept
    : GetChannelMessagesResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelMessagesResponse& operator=(const GetChannelMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelMessagesResponse& operator=(GetChannelMessagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelMessagesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelMessagesResponse*>(
               &_GetChannelMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetChannelMessagesResponse& a, GetChannelMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelMessagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelMessagesResponse* New() const final {
    return CreateMaybeMessage<GetChannelMessagesResponse>(nullptr);
  }

  GetChannelMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelMessagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelMessagesResponse& from);
  void MergeFrom(const GetChannelMessagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetChannelMessagesResponse";
  }
  protected:
  explicit GetChannelMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kReachedTopFieldNumber = 1,
  };
  // repeated .protocol.harmonytypes.v1.Message messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::protocol::harmonytypes::v1::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Message >*
      mutable_messages();
  private:
  const ::protocol::harmonytypes::v1::Message& _internal_messages(int index) const;
  ::protocol::harmonytypes::v1::Message* _internal_add_messages();
  public:
  const ::protocol::harmonytypes::v1::Message& messages(int index) const;
  ::protocol::harmonytypes::v1::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Message >&
      messages() const;

  // bool reached_top = 1;
  void clear_reached_top();
  bool reached_top() const;
  void set_reached_top(bool value);
  private:
  bool _internal_reached_top() const;
  void _internal_set_reached_top(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetChannelMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Message > messages_;
  bool reached_top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class GetMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetMessageRequest) */ {
 public:
  inline GetMessageRequest() : GetMessageRequest(nullptr) {};
  virtual ~GetMessageRequest();

  GetMessageRequest(const GetMessageRequest& from);
  GetMessageRequest(GetMessageRequest&& from) noexcept
    : GetMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetMessageRequest& operator=(const GetMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageRequest& operator=(GetMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessageRequest*>(
               &_GetMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMessageRequest& a, GetMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessageRequest* New() const final {
    return CreateMaybeMessage<GetMessageRequest>(nullptr);
  }

  GetMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessageRequest& from);
  void MergeFrom(const GetMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetMessageRequest";
  }
  protected:
  explicit GetMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class GetMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.GetMessageResponse) */ {
 public:
  inline GetMessageResponse() : GetMessageResponse(nullptr) {};
  virtual ~GetMessageResponse();

  GetMessageResponse(const GetMessageResponse& from);
  GetMessageResponse(GetMessageResponse&& from) noexcept
    : GetMessageResponse() {
    *this = ::std::move(from);
  }

  inline GetMessageResponse& operator=(const GetMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageResponse& operator=(GetMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GetMessageResponse*>(
               &_GetMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetMessageResponse& a, GetMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessageResponse* New() const final {
    return CreateMaybeMessage<GetMessageResponse>(nullptr);
  }

  GetMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessageResponse& from);
  void MergeFrom(const GetMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.GetMessageResponse";
  }
  protected:
  explicit GetMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .protocol.harmonytypes.v1.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::protocol::harmonytypes::v1::Message& message() const;
  ::protocol::harmonytypes::v1::Message* release_message();
  ::protocol::harmonytypes::v1::Message* mutable_message();
  void set_allocated_message(::protocol::harmonytypes::v1::Message* message);
  private:
  const ::protocol::harmonytypes::v1::Message& _internal_message() const;
  ::protocol::harmonytypes::v1::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::protocol::harmonytypes::v1::Message* message);
  ::protocol::harmonytypes::v1::Message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.GetMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::harmonytypes::v1::Message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class UpdateMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.UpdateMessageRequest) */ {
 public:
  inline UpdateMessageRequest() : UpdateMessageRequest(nullptr) {};
  virtual ~UpdateMessageRequest();

  UpdateMessageRequest(const UpdateMessageRequest& from);
  UpdateMessageRequest(UpdateMessageRequest&& from) noexcept
    : UpdateMessageRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMessageRequest& operator=(const UpdateMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessageRequest& operator=(UpdateMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMessageRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMessageRequest*>(
               &_UpdateMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateMessageRequest& a, UpdateMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMessageRequest* New() const final {
    return CreateMaybeMessage<UpdateMessageRequest>(nullptr);
  }

  UpdateMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMessageRequest& from);
  void MergeFrom(const UpdateMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.UpdateMessageRequest";
  }
  protected:
  explicit UpdateMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbedsFieldNumber = 6,
    kActionsFieldNumber = 8,
    kAttachmentsFieldNumber = 10,
    kContentFieldNumber = 4,
    kOverridesFieldNumber = 12,
    kMetadataFieldNumber = 14,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kUpdateContentFieldNumber = 5,
    kUpdateEmbedsFieldNumber = 7,
    kUpdateActionsFieldNumber = 9,
    kUpdateAttachmentsFieldNumber = 11,
    kUpdateOverridesFieldNumber = 13,
    kUpdateMetadataFieldNumber = 15,
  };
  // repeated .protocol.harmonytypes.v1.Embed embeds = 6;
  int embeds_size() const;
  private:
  int _internal_embeds_size() const;
  public:
  void clear_embeds();
  ::protocol::harmonytypes::v1::Embed* mutable_embeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
      mutable_embeds();
  private:
  const ::protocol::harmonytypes::v1::Embed& _internal_embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* _internal_add_embeds();
  public:
  const ::protocol::harmonytypes::v1::Embed& embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* add_embeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
      embeds() const;

  // repeated .protocol.harmonytypes.v1.Action actions = 8;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protocol::harmonytypes::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_actions();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_actions(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_actions();
  public:
  const ::protocol::harmonytypes::v1::Action& actions(int index) const;
  ::protocol::harmonytypes::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      actions() const;

  // repeated string attachments = 10;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  const std::string& attachments(int index) const;
  std::string* mutable_attachments(int index);
  void set_attachments(int index, const std::string& value);
  void set_attachments(int index, std::string&& value);
  void set_attachments(int index, const char* value);
  void set_attachments(int index, const char* value, size_t size);
  std::string* add_attachments();
  void add_attachments(const std::string& value);
  void add_attachments(std::string&& value);
  void add_attachments(const char* value);
  void add_attachments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attachments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attachments();
  private:
  const std::string& _internal_attachments(int index) const;
  std::string* _internal_add_attachments();
  public:

  // string content = 4;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .protocol.harmonytypes.v1.Override overrides = 12;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::protocol::harmonytypes::v1::Override& overrides() const;
  ::protocol::harmonytypes::v1::Override* release_overrides();
  ::protocol::harmonytypes::v1::Override* mutable_overrides();
  void set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides);
  private:
  const ::protocol::harmonytypes::v1::Override& _internal_overrides() const;
  ::protocol::harmonytypes::v1::Override* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::protocol::harmonytypes::v1::Override* overrides);
  ::protocol::harmonytypes::v1::Override* unsafe_arena_release_overrides();

  // .protocol.harmonytypes.v1.Metadata metadata = 14;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool update_content = 5;
  void clear_update_content();
  bool update_content() const;
  void set_update_content(bool value);
  private:
  bool _internal_update_content() const;
  void _internal_set_update_content(bool value);
  public:

  // bool update_embeds = 7;
  void clear_update_embeds();
  bool update_embeds() const;
  void set_update_embeds(bool value);
  private:
  bool _internal_update_embeds() const;
  void _internal_set_update_embeds(bool value);
  public:

  // bool update_actions = 9;
  void clear_update_actions();
  bool update_actions() const;
  void set_update_actions(bool value);
  private:
  bool _internal_update_actions() const;
  void _internal_set_update_actions(bool value);
  public:

  // bool update_attachments = 11;
  void clear_update_attachments();
  bool update_attachments() const;
  void set_update_attachments(bool value);
  private:
  bool _internal_update_attachments() const;
  void _internal_set_update_attachments(bool value);
  public:

  // bool update_overrides = 13;
  void clear_update_overrides();
  bool update_overrides() const;
  void set_update_overrides(bool value);
  private:
  bool _internal_update_overrides() const;
  void _internal_set_update_overrides(bool value);
  public:

  // bool update_metadata = 15;
  void clear_update_metadata();
  bool update_metadata() const;
  void set_update_metadata(bool value);
  private:
  bool _internal_update_metadata() const;
  void _internal_set_update_metadata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.UpdateMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed > embeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::protocol::harmonytypes::v1::Override* overrides_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  bool update_content_;
  bool update_embeds_;
  bool update_actions_;
  bool update_attachments_;
  bool update_overrides_;
  bool update_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class DeleteMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.DeleteMessageRequest) */ {
 public:
  inline DeleteMessageRequest() : DeleteMessageRequest(nullptr) {};
  virtual ~DeleteMessageRequest();

  DeleteMessageRequest(const DeleteMessageRequest& from);
  DeleteMessageRequest(DeleteMessageRequest&& from) noexcept
    : DeleteMessageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMessageRequest& operator=(const DeleteMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageRequest& operator=(DeleteMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRequest*>(
               &_DeleteMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteMessageRequest& a, DeleteMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMessageRequest* New() const final {
    return CreateMaybeMessage<DeleteMessageRequest>(nullptr);
  }

  DeleteMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMessageRequest& from);
  void MergeFrom(const DeleteMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.DeleteMessageRequest";
  }
  protected:
  explicit DeleteMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.DeleteMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class TriggerActionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.TriggerActionRequest) */ {
 public:
  inline TriggerActionRequest() : TriggerActionRequest(nullptr) {};
  virtual ~TriggerActionRequest();

  TriggerActionRequest(const TriggerActionRequest& from);
  TriggerActionRequest(TriggerActionRequest&& from) noexcept
    : TriggerActionRequest() {
    *this = ::std::move(from);
  }

  inline TriggerActionRequest& operator=(const TriggerActionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerActionRequest& operator=(TriggerActionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerActionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TriggerActionRequest* internal_default_instance() {
    return reinterpret_cast<const TriggerActionRequest*>(
               &_TriggerActionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TriggerActionRequest& a, TriggerActionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerActionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerActionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerActionRequest* New() const final {
    return CreateMaybeMessage<TriggerActionRequest>(nullptr);
  }

  TriggerActionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerActionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerActionRequest& from);
  void MergeFrom(const TriggerActionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerActionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.TriggerActionRequest";
  }
  protected:
  explicit TriggerActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 4,
    kActionDataFieldNumber = 5,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // string action_id = 4;
  void clear_action_id();
  const std::string& action_id() const;
  void set_action_id(const std::string& value);
  void set_action_id(std::string&& value);
  void set_action_id(const char* value);
  void set_action_id(const char* value, size_t size);
  std::string* mutable_action_id();
  std::string* release_action_id();
  void set_allocated_action_id(std::string* action_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_id(
      std::string* action_id);
  private:
  const std::string& _internal_action_id() const;
  void _internal_set_action_id(const std::string& value);
  std::string* _internal_mutable_action_id();
  public:

  // string action_data = 5;
  void clear_action_data();
  const std::string& action_data() const;
  void set_action_data(const std::string& value);
  void set_action_data(std::string&& value);
  void set_action_data(const char* value);
  void set_action_data(const char* value, size_t size);
  std::string* mutable_action_data();
  std::string* release_action_data();
  void set_allocated_action_data(std::string* action_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_data(
      std::string* action_data);
  private:
  const std::string& _internal_action_data() const;
  void _internal_set_action_data(const std::string& value);
  std::string* _internal_mutable_action_data();
  public:

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.TriggerActionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SendMessageRequest) */ {
 public:
  inline SendMessageRequest() : SendMessageRequest(nullptr) {};
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SendMessageRequest";
  }
  protected:
  explicit SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 4,
    kEmbedsFieldNumber = 5,
    kAttachmentsFieldNumber = 6,
    kContentFieldNumber = 3,
    kOverridesFieldNumber = 8,
    kMetadataFieldNumber = 10,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kInReplyToFieldNumber = 7,
    kEchoIdFieldNumber = 9,
  };
  // repeated .protocol.harmonytypes.v1.Action actions = 4;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protocol::harmonytypes::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_actions();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_actions(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_actions();
  public:
  const ::protocol::harmonytypes::v1::Action& actions(int index) const;
  ::protocol::harmonytypes::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      actions() const;

  // repeated .protocol.harmonytypes.v1.Embed embeds = 5;
  int embeds_size() const;
  private:
  int _internal_embeds_size() const;
  public:
  void clear_embeds();
  ::protocol::harmonytypes::v1::Embed* mutable_embeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
      mutable_embeds();
  private:
  const ::protocol::harmonytypes::v1::Embed& _internal_embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* _internal_add_embeds();
  public:
  const ::protocol::harmonytypes::v1::Embed& embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* add_embeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
      embeds() const;

  // repeated string attachments = 6;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  const std::string& attachments(int index) const;
  std::string* mutable_attachments(int index);
  void set_attachments(int index, const std::string& value);
  void set_attachments(int index, std::string&& value);
  void set_attachments(int index, const char* value);
  void set_attachments(int index, const char* value, size_t size);
  std::string* add_attachments();
  void add_attachments(const std::string& value);
  void add_attachments(std::string&& value);
  void add_attachments(const char* value);
  void add_attachments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attachments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attachments();
  private:
  const std::string& _internal_attachments(int index) const;
  std::string* _internal_add_attachments();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .protocol.harmonytypes.v1.Override overrides = 8;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::protocol::harmonytypes::v1::Override& overrides() const;
  ::protocol::harmonytypes::v1::Override* release_overrides();
  ::protocol::harmonytypes::v1::Override* mutable_overrides();
  void set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides);
  private:
  const ::protocol::harmonytypes::v1::Override& _internal_overrides() const;
  ::protocol::harmonytypes::v1::Override* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::protocol::harmonytypes::v1::Override* overrides);
  ::protocol::harmonytypes::v1::Override* unsafe_arena_release_overrides();

  // .protocol.harmonytypes.v1.Metadata metadata = 10;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 in_reply_to = 7;
  void clear_in_reply_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 in_reply_to() const;
  void set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in_reply_to() const;
  void _internal_set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 echo_id = 9;
  void clear_echo_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_id() const;
  void set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_echo_id() const;
  void _internal_set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SendMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed > embeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::protocol::harmonytypes::v1::Override* overrides_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 in_reply_to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 echo_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.chat.v1.SendMessageResponse) */ {
 public:
  inline SendMessageResponse() : SendMessageResponse(nullptr) {};
  virtual ~SendMessageResponse();

  SendMessageResponse(const SendMessageResponse& from);
  SendMessageResponse(SendMessageResponse&& from) noexcept
    : SendMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResponse& operator=(SendMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponse*>(
               &_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendMessageResponse& a, SendMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageResponse* New() const final {
    return CreateMaybeMessage<SendMessageResponse>(nullptr);
  }

  SendMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.chat.v1.SendMessageResponse";
  }
  protected:
  explicit SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2fv1_2fmessages_2eproto);
    return ::descriptor_table_chat_2fv1_2fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // uint64 message_id = 1 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.chat.v1.SendMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2fv1_2fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetChannelMessagesRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetChannelMessagesRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetChannelMessagesRequest.guild_id)
  return _internal_guild_id();
}
inline void GetChannelMessagesRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetChannelMessagesRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetChannelMessagesRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void GetChannelMessagesRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetChannelMessagesRequest.channel_id)
  return _internal_channel_id();
}
inline void GetChannelMessagesRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetChannelMessagesRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetChannelMessagesRequest.channel_id)
}

// uint64 before_message = 3 [jstype = JS_STRING];
inline void GetChannelMessagesRequest::clear_before_message() {
  before_message_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::_internal_before_message() const {
  return before_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelMessagesRequest::before_message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetChannelMessagesRequest.before_message)
  return _internal_before_message();
}
inline void GetChannelMessagesRequest::_internal_set_before_message(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  before_message_ = value;
}
inline void GetChannelMessagesRequest::set_before_message(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_before_message(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetChannelMessagesRequest.before_message)
}

// -------------------------------------------------------------------

// GetChannelMessagesResponse

// bool reached_top = 1;
inline void GetChannelMessagesResponse::clear_reached_top() {
  reached_top_ = false;
}
inline bool GetChannelMessagesResponse::_internal_reached_top() const {
  return reached_top_;
}
inline bool GetChannelMessagesResponse::reached_top() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetChannelMessagesResponse.reached_top)
  return _internal_reached_top();
}
inline void GetChannelMessagesResponse::_internal_set_reached_top(bool value) {
  
  reached_top_ = value;
}
inline void GetChannelMessagesResponse::set_reached_top(bool value) {
  _internal_set_reached_top(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetChannelMessagesResponse.reached_top)
}

// repeated .protocol.harmonytypes.v1.Message messages = 2;
inline int GetChannelMessagesResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int GetChannelMessagesResponse::messages_size() const {
  return _internal_messages_size();
}
inline ::protocol::harmonytypes::v1::Message* GetChannelMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetChannelMessagesResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Message >*
GetChannelMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.GetChannelMessagesResponse.messages)
  return &messages_;
}
inline const ::protocol::harmonytypes::v1::Message& GetChannelMessagesResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Message& GetChannelMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetChannelMessagesResponse.messages)
  return _internal_messages(index);
}
inline ::protocol::harmonytypes::v1::Message* GetChannelMessagesResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::protocol::harmonytypes::v1::Message* GetChannelMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.GetChannelMessagesResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Message >&
GetChannelMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.GetChannelMessagesResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// GetMessageRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void GetMessageRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetMessageRequest.guild_id)
  return _internal_guild_id();
}
inline void GetMessageRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void GetMessageRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetMessageRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void GetMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void GetMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetMessageRequest.channel_id)
}

// uint64 message_id = 3 [jstype = JS_STRING];
inline void GetMessageRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetMessageRequest.message_id)
  return _internal_message_id();
}
inline void GetMessageRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void GetMessageRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.GetMessageRequest.message_id)
}

// -------------------------------------------------------------------

// GetMessageResponse

// .protocol.harmonytypes.v1.Message message = 1;
inline bool GetMessageResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool GetMessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::protocol::harmonytypes::v1::Message& GetMessageResponse::_internal_message() const {
  const ::protocol::harmonytypes::v1::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Message*>(
      &::protocol::harmonytypes::v1::_Message_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Message& GetMessageResponse::message() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.GetMessageResponse.message)
  return _internal_message();
}
inline void GetMessageResponse::unsafe_arena_set_allocated_message(
    ::protocol::harmonytypes::v1::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.GetMessageResponse.message)
}
inline ::protocol::harmonytypes::v1::Message* GetMessageResponse::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Message* GetMessageResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.GetMessageResponse.message)
  
  ::protocol::harmonytypes::v1::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Message* GetMessageResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::protocol::harmonytypes::v1::Message* GetMessageResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.GetMessageResponse.message)
  return _internal_mutable_message();
}
inline void GetMessageResponse::set_allocated_message(::protocol::harmonytypes::v1::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.GetMessageResponse.message)
}

// -------------------------------------------------------------------

// UpdateMessageRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void UpdateMessageRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.guild_id)
  return _internal_guild_id();
}
inline void UpdateMessageRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void UpdateMessageRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void UpdateMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void UpdateMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void UpdateMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.channel_id)
}

// uint64 message_id = 3 [jstype = JS_STRING];
inline void UpdateMessageRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.message_id)
  return _internal_message_id();
}
inline void UpdateMessageRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void UpdateMessageRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.message_id)
}

// string content = 4;
inline void UpdateMessageRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateMessageRequest::content() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.content)
  return _internal_content();
}
inline void UpdateMessageRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.content)
}
inline std::string* UpdateMessageRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.content)
  return _internal_mutable_content();
}
inline const std::string& UpdateMessageRequest::_internal_content() const {
  return content_.Get();
}
inline void UpdateMessageRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateMessageRequest::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.UpdateMessageRequest.content)
}
inline void UpdateMessageRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.UpdateMessageRequest.content)
}
inline void UpdateMessageRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.UpdateMessageRequest.content)
}
inline std::string* UpdateMessageRequest::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateMessageRequest::release_content() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateMessageRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateMessageRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateMessageRequest.content)
}
inline std::string* UpdateMessageRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.UpdateMessageRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateMessageRequest::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateMessageRequest.content)
}

// bool update_content = 5;
inline void UpdateMessageRequest::clear_update_content() {
  update_content_ = false;
}
inline bool UpdateMessageRequest::_internal_update_content() const {
  return update_content_;
}
inline bool UpdateMessageRequest::update_content() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_content)
  return _internal_update_content();
}
inline void UpdateMessageRequest::_internal_set_update_content(bool value) {
  
  update_content_ = value;
}
inline void UpdateMessageRequest::set_update_content(bool value) {
  _internal_set_update_content(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_content)
}

// repeated .protocol.harmonytypes.v1.Embed embeds = 6;
inline int UpdateMessageRequest::_internal_embeds_size() const {
  return embeds_.size();
}
inline int UpdateMessageRequest::embeds_size() const {
  return _internal_embeds_size();
}
inline ::protocol::harmonytypes::v1::Embed* UpdateMessageRequest::mutable_embeds(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.embeds)
  return embeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
UpdateMessageRequest::mutable_embeds() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.UpdateMessageRequest.embeds)
  return &embeds_;
}
inline const ::protocol::harmonytypes::v1::Embed& UpdateMessageRequest::_internal_embeds(int index) const {
  return embeds_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Embed& UpdateMessageRequest::embeds(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.embeds)
  return _internal_embeds(index);
}
inline ::protocol::harmonytypes::v1::Embed* UpdateMessageRequest::_internal_add_embeds() {
  return embeds_.Add();
}
inline ::protocol::harmonytypes::v1::Embed* UpdateMessageRequest::add_embeds() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.UpdateMessageRequest.embeds)
  return _internal_add_embeds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
UpdateMessageRequest::embeds() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.UpdateMessageRequest.embeds)
  return embeds_;
}

// bool update_embeds = 7;
inline void UpdateMessageRequest::clear_update_embeds() {
  update_embeds_ = false;
}
inline bool UpdateMessageRequest::_internal_update_embeds() const {
  return update_embeds_;
}
inline bool UpdateMessageRequest::update_embeds() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_embeds)
  return _internal_update_embeds();
}
inline void UpdateMessageRequest::_internal_set_update_embeds(bool value) {
  
  update_embeds_ = value;
}
inline void UpdateMessageRequest::set_update_embeds(bool value) {
  _internal_set_update_embeds(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_embeds)
}

// repeated .protocol.harmonytypes.v1.Action actions = 8;
inline int UpdateMessageRequest::_internal_actions_size() const {
  return actions_.size();
}
inline int UpdateMessageRequest::actions_size() const {
  return _internal_actions_size();
}
inline ::protocol::harmonytypes::v1::Action* UpdateMessageRequest::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
UpdateMessageRequest::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.UpdateMessageRequest.actions)
  return &actions_;
}
inline const ::protocol::harmonytypes::v1::Action& UpdateMessageRequest::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& UpdateMessageRequest::actions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.actions)
  return _internal_actions(index);
}
inline ::protocol::harmonytypes::v1::Action* UpdateMessageRequest::_internal_add_actions() {
  return actions_.Add();
}
inline ::protocol::harmonytypes::v1::Action* UpdateMessageRequest::add_actions() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.UpdateMessageRequest.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
UpdateMessageRequest::actions() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.UpdateMessageRequest.actions)
  return actions_;
}

// bool update_actions = 9;
inline void UpdateMessageRequest::clear_update_actions() {
  update_actions_ = false;
}
inline bool UpdateMessageRequest::_internal_update_actions() const {
  return update_actions_;
}
inline bool UpdateMessageRequest::update_actions() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_actions)
  return _internal_update_actions();
}
inline void UpdateMessageRequest::_internal_set_update_actions(bool value) {
  
  update_actions_ = value;
}
inline void UpdateMessageRequest::set_update_actions(bool value) {
  _internal_set_update_actions(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_actions)
}

// repeated string attachments = 10;
inline int UpdateMessageRequest::_internal_attachments_size() const {
  return attachments_.size();
}
inline int UpdateMessageRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void UpdateMessageRequest::clear_attachments() {
  attachments_.Clear();
}
inline std::string* UpdateMessageRequest::add_attachments() {
  // @@protoc_insertion_point(field_add_mutable:protocol.chat.v1.UpdateMessageRequest.attachments)
  return _internal_add_attachments();
}
inline const std::string& UpdateMessageRequest::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const std::string& UpdateMessageRequest::attachments(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.attachments)
  return _internal_attachments(index);
}
inline std::string* UpdateMessageRequest::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.attachments)
  return attachments_.Mutable(index);
}
inline void UpdateMessageRequest::set_attachments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.attachments)
  attachments_.Mutable(index)->assign(value);
}
inline void UpdateMessageRequest::set_attachments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.attachments)
  attachments_.Mutable(index)->assign(std::move(value));
}
inline void UpdateMessageRequest::set_attachments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline void UpdateMessageRequest::set_attachments(int index, const char* value, size_t size) {
  attachments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline std::string* UpdateMessageRequest::_internal_add_attachments() {
  return attachments_.Add();
}
inline void UpdateMessageRequest::add_attachments(const std::string& value) {
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline void UpdateMessageRequest::add_attachments(std::string&& value) {
  attachments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline void UpdateMessageRequest::add_attachments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline void UpdateMessageRequest::add_attachments(const char* value, size_t size) {
  attachments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.chat.v1.UpdateMessageRequest.attachments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateMessageRequest::attachments() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.UpdateMessageRequest.attachments)
  return attachments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateMessageRequest::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.UpdateMessageRequest.attachments)
  return &attachments_;
}

// bool update_attachments = 11;
inline void UpdateMessageRequest::clear_update_attachments() {
  update_attachments_ = false;
}
inline bool UpdateMessageRequest::_internal_update_attachments() const {
  return update_attachments_;
}
inline bool UpdateMessageRequest::update_attachments() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_attachments)
  return _internal_update_attachments();
}
inline void UpdateMessageRequest::_internal_set_update_attachments(bool value) {
  
  update_attachments_ = value;
}
inline void UpdateMessageRequest::set_update_attachments(bool value) {
  _internal_set_update_attachments(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_attachments)
}

// .protocol.harmonytypes.v1.Override overrides = 12;
inline bool UpdateMessageRequest::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool UpdateMessageRequest::has_overrides() const {
  return _internal_has_overrides();
}
inline const ::protocol::harmonytypes::v1::Override& UpdateMessageRequest::_internal_overrides() const {
  const ::protocol::harmonytypes::v1::Override* p = overrides_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Override*>(
      &::protocol::harmonytypes::v1::_Override_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Override& UpdateMessageRequest::overrides() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.overrides)
  return _internal_overrides();
}
inline void UpdateMessageRequest::unsafe_arena_set_allocated_overrides(
    ::protocol::harmonytypes::v1::Override* overrides) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateMessageRequest.overrides)
}
inline ::protocol::harmonytypes::v1::Override* UpdateMessageRequest::release_overrides() {
  auto temp = unsafe_arena_release_overrides();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* UpdateMessageRequest::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateMessageRequest.overrides)
  
  ::protocol::harmonytypes::v1::Override* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* UpdateMessageRequest::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Override>(GetArena());
    overrides_ = p;
  }
  return overrides_;
}
inline ::protocol::harmonytypes::v1::Override* UpdateMessageRequest::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.overrides)
  return _internal_mutable_overrides();
}
inline void UpdateMessageRequest::set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides)->GetArena();
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateMessageRequest.overrides)
}

// bool update_overrides = 13;
inline void UpdateMessageRequest::clear_update_overrides() {
  update_overrides_ = false;
}
inline bool UpdateMessageRequest::_internal_update_overrides() const {
  return update_overrides_;
}
inline bool UpdateMessageRequest::update_overrides() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_overrides)
  return _internal_update_overrides();
}
inline void UpdateMessageRequest::_internal_set_update_overrides(bool value) {
  
  update_overrides_ = value;
}
inline void UpdateMessageRequest::set_update_overrides(bool value) {
  _internal_set_update_overrides(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_overrides)
}

// .protocol.harmonytypes.v1.Metadata metadata = 14;
inline bool UpdateMessageRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool UpdateMessageRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateMessageRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& UpdateMessageRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.metadata)
  return _internal_metadata();
}
inline void UpdateMessageRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.UpdateMessageRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateMessageRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateMessageRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.UpdateMessageRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateMessageRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* UpdateMessageRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.UpdateMessageRequest.metadata)
  return _internal_mutable_metadata();
}
inline void UpdateMessageRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.UpdateMessageRequest.metadata)
}

// bool update_metadata = 15;
inline void UpdateMessageRequest::clear_update_metadata() {
  update_metadata_ = false;
}
inline bool UpdateMessageRequest::_internal_update_metadata() const {
  return update_metadata_;
}
inline bool UpdateMessageRequest::update_metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.UpdateMessageRequest.update_metadata)
  return _internal_update_metadata();
}
inline void UpdateMessageRequest::_internal_set_update_metadata(bool value) {
  
  update_metadata_ = value;
}
inline void UpdateMessageRequest::set_update_metadata(bool value) {
  _internal_set_update_metadata(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.UpdateMessageRequest.update_metadata)
}

// -------------------------------------------------------------------

// DeleteMessageRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void DeleteMessageRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteMessageRequest.guild_id)
  return _internal_guild_id();
}
inline void DeleteMessageRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void DeleteMessageRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteMessageRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void DeleteMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void DeleteMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void DeleteMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteMessageRequest.channel_id)
}

// uint64 message_id = 3 [jstype = JS_STRING];
inline void DeleteMessageRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.DeleteMessageRequest.message_id)
  return _internal_message_id();
}
inline void DeleteMessageRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void DeleteMessageRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.DeleteMessageRequest.message_id)
}

// -------------------------------------------------------------------

// TriggerActionRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void TriggerActionRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TriggerActionRequest.guild_id)
  return _internal_guild_id();
}
inline void TriggerActionRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void TriggerActionRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TriggerActionRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void TriggerActionRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TriggerActionRequest.channel_id)
  return _internal_channel_id();
}
inline void TriggerActionRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void TriggerActionRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TriggerActionRequest.channel_id)
}

// uint64 message_id = 3 [jstype = JS_STRING];
inline void TriggerActionRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TriggerActionRequest::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TriggerActionRequest.message_id)
  return _internal_message_id();
}
inline void TriggerActionRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void TriggerActionRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TriggerActionRequest.message_id)
}

// string action_id = 4;
inline void TriggerActionRequest::clear_action_id() {
  action_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TriggerActionRequest::action_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TriggerActionRequest.action_id)
  return _internal_action_id();
}
inline void TriggerActionRequest::set_action_id(const std::string& value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TriggerActionRequest.action_id)
}
inline std::string* TriggerActionRequest::mutable_action_id() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.TriggerActionRequest.action_id)
  return _internal_mutable_action_id();
}
inline const std::string& TriggerActionRequest::_internal_action_id() const {
  return action_id_.Get();
}
inline void TriggerActionRequest::_internal_set_action_id(const std::string& value) {
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TriggerActionRequest::set_action_id(std::string&& value) {
  
  action_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.TriggerActionRequest.action_id)
}
inline void TriggerActionRequest::set_action_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.TriggerActionRequest.action_id)
}
inline void TriggerActionRequest::set_action_id(const char* value,
    size_t size) {
  
  action_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.TriggerActionRequest.action_id)
}
inline std::string* TriggerActionRequest::_internal_mutable_action_id() {
  
  return action_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TriggerActionRequest::release_action_id() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.TriggerActionRequest.action_id)
  return action_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TriggerActionRequest::set_allocated_action_id(std::string* action_id) {
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.TriggerActionRequest.action_id)
}
inline std::string* TriggerActionRequest::unsafe_arena_release_action_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.TriggerActionRequest.action_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TriggerActionRequest::unsafe_arena_set_allocated_action_id(
    std::string* action_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.TriggerActionRequest.action_id)
}

// string action_data = 5;
inline void TriggerActionRequest::clear_action_data() {
  action_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TriggerActionRequest::action_data() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.TriggerActionRequest.action_data)
  return _internal_action_data();
}
inline void TriggerActionRequest::set_action_data(const std::string& value) {
  _internal_set_action_data(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.TriggerActionRequest.action_data)
}
inline std::string* TriggerActionRequest::mutable_action_data() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.TriggerActionRequest.action_data)
  return _internal_mutable_action_data();
}
inline const std::string& TriggerActionRequest::_internal_action_data() const {
  return action_data_.Get();
}
inline void TriggerActionRequest::_internal_set_action_data(const std::string& value) {
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TriggerActionRequest::set_action_data(std::string&& value) {
  
  action_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.TriggerActionRequest.action_data)
}
inline void TriggerActionRequest::set_action_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.TriggerActionRequest.action_data)
}
inline void TriggerActionRequest::set_action_data(const char* value,
    size_t size) {
  
  action_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.TriggerActionRequest.action_data)
}
inline std::string* TriggerActionRequest::_internal_mutable_action_data() {
  
  return action_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TriggerActionRequest::release_action_data() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.TriggerActionRequest.action_data)
  return action_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TriggerActionRequest::set_allocated_action_data(std::string* action_data) {
  if (action_data != nullptr) {
    
  } else {
    
  }
  action_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.TriggerActionRequest.action_data)
}
inline std::string* TriggerActionRequest::unsafe_arena_release_action_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.TriggerActionRequest.action_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TriggerActionRequest::unsafe_arena_set_allocated_action_data(
    std::string* action_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_data != nullptr) {
    
  } else {
    
  }
  action_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.TriggerActionRequest.action_data)
}

// -------------------------------------------------------------------

// SendMessageRequest

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void SendMessageRequest::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.guild_id)
  return _internal_guild_id();
}
inline void SendMessageRequest::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void SendMessageRequest::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void SendMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void SendMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void SendMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.channel_id)
}

// string content = 3;
inline void SendMessageRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendMessageRequest::content() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.content)
  return _internal_content();
}
inline void SendMessageRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.content)
  return _internal_mutable_content();
}
inline const std::string& SendMessageRequest::_internal_content() const {
  return content_.Get();
}
inline void SendMessageRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendMessageRequest::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.chat.v1.SendMessageRequest.content)
}
inline void SendMessageRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SendMessageRequest.content)
}
inline void SendMessageRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendMessageRequest::release_content() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SendMessageRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendMessageRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SendMessageRequest.content)
}
inline std::string* SendMessageRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.chat.v1.SendMessageRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SendMessageRequest::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SendMessageRequest.content)
}

// repeated .protocol.harmonytypes.v1.Action actions = 4;
inline int SendMessageRequest::_internal_actions_size() const {
  return actions_.size();
}
inline int SendMessageRequest::actions_size() const {
  return _internal_actions_size();
}
inline ::protocol::harmonytypes::v1::Action* SendMessageRequest::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
SendMessageRequest::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.SendMessageRequest.actions)
  return &actions_;
}
inline const ::protocol::harmonytypes::v1::Action& SendMessageRequest::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& SendMessageRequest::actions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.actions)
  return _internal_actions(index);
}
inline ::protocol::harmonytypes::v1::Action* SendMessageRequest::_internal_add_actions() {
  return actions_.Add();
}
inline ::protocol::harmonytypes::v1::Action* SendMessageRequest::add_actions() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.SendMessageRequest.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
SendMessageRequest::actions() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.SendMessageRequest.actions)
  return actions_;
}

// repeated .protocol.harmonytypes.v1.Embed embeds = 5;
inline int SendMessageRequest::_internal_embeds_size() const {
  return embeds_.size();
}
inline int SendMessageRequest::embeds_size() const {
  return _internal_embeds_size();
}
inline ::protocol::harmonytypes::v1::Embed* SendMessageRequest::mutable_embeds(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.embeds)
  return embeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
SendMessageRequest::mutable_embeds() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.SendMessageRequest.embeds)
  return &embeds_;
}
inline const ::protocol::harmonytypes::v1::Embed& SendMessageRequest::_internal_embeds(int index) const {
  return embeds_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Embed& SendMessageRequest::embeds(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.embeds)
  return _internal_embeds(index);
}
inline ::protocol::harmonytypes::v1::Embed* SendMessageRequest::_internal_add_embeds() {
  return embeds_.Add();
}
inline ::protocol::harmonytypes::v1::Embed* SendMessageRequest::add_embeds() {
  // @@protoc_insertion_point(field_add:protocol.chat.v1.SendMessageRequest.embeds)
  return _internal_add_embeds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
SendMessageRequest::embeds() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.SendMessageRequest.embeds)
  return embeds_;
}

// repeated string attachments = 6;
inline int SendMessageRequest::_internal_attachments_size() const {
  return attachments_.size();
}
inline int SendMessageRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void SendMessageRequest::clear_attachments() {
  attachments_.Clear();
}
inline std::string* SendMessageRequest::add_attachments() {
  // @@protoc_insertion_point(field_add_mutable:protocol.chat.v1.SendMessageRequest.attachments)
  return _internal_add_attachments();
}
inline const std::string& SendMessageRequest::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const std::string& SendMessageRequest::attachments(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.attachments)
  return _internal_attachments(index);
}
inline std::string* SendMessageRequest::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.attachments)
  return attachments_.Mutable(index);
}
inline void SendMessageRequest::set_attachments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.attachments)
  attachments_.Mutable(index)->assign(value);
}
inline void SendMessageRequest::set_attachments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.attachments)
  attachments_.Mutable(index)->assign(std::move(value));
}
inline void SendMessageRequest::set_attachments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.chat.v1.SendMessageRequest.attachments)
}
inline void SendMessageRequest::set_attachments(int index, const char* value, size_t size) {
  attachments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.chat.v1.SendMessageRequest.attachments)
}
inline std::string* SendMessageRequest::_internal_add_attachments() {
  return attachments_.Add();
}
inline void SendMessageRequest::add_attachments(const std::string& value) {
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.chat.v1.SendMessageRequest.attachments)
}
inline void SendMessageRequest::add_attachments(std::string&& value) {
  attachments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.chat.v1.SendMessageRequest.attachments)
}
inline void SendMessageRequest::add_attachments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.chat.v1.SendMessageRequest.attachments)
}
inline void SendMessageRequest::add_attachments(const char* value, size_t size) {
  attachments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.chat.v1.SendMessageRequest.attachments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SendMessageRequest::attachments() const {
  // @@protoc_insertion_point(field_list:protocol.chat.v1.SendMessageRequest.attachments)
  return attachments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SendMessageRequest::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chat.v1.SendMessageRequest.attachments)
  return &attachments_;
}

// uint64 in_reply_to = 7;
inline void SendMessageRequest::clear_in_reply_to() {
  in_reply_to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::_internal_in_reply_to() const {
  return in_reply_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::in_reply_to() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.in_reply_to)
  return _internal_in_reply_to();
}
inline void SendMessageRequest::_internal_set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  in_reply_to_ = value;
}
inline void SendMessageRequest::set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_in_reply_to(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.in_reply_to)
}

// .protocol.harmonytypes.v1.Override overrides = 8;
inline bool SendMessageRequest::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool SendMessageRequest::has_overrides() const {
  return _internal_has_overrides();
}
inline const ::protocol::harmonytypes::v1::Override& SendMessageRequest::_internal_overrides() const {
  const ::protocol::harmonytypes::v1::Override* p = overrides_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Override*>(
      &::protocol::harmonytypes::v1::_Override_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Override& SendMessageRequest::overrides() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.overrides)
  return _internal_overrides();
}
inline void SendMessageRequest::unsafe_arena_set_allocated_overrides(
    ::protocol::harmonytypes::v1::Override* overrides) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SendMessageRequest.overrides)
}
inline ::protocol::harmonytypes::v1::Override* SendMessageRequest::release_overrides() {
  auto temp = unsafe_arena_release_overrides();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* SendMessageRequest::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SendMessageRequest.overrides)
  
  ::protocol::harmonytypes::v1::Override* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* SendMessageRequest::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Override>(GetArena());
    overrides_ = p;
  }
  return overrides_;
}
inline ::protocol::harmonytypes::v1::Override* SendMessageRequest::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.overrides)
  return _internal_mutable_overrides();
}
inline void SendMessageRequest::set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides)->GetArena();
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SendMessageRequest.overrides)
}

// uint64 echo_id = 9;
inline void SendMessageRequest::clear_echo_id() {
  echo_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::_internal_echo_id() const {
  return echo_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageRequest::echo_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.echo_id)
  return _internal_echo_id();
}
inline void SendMessageRequest::_internal_set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  echo_id_ = value;
}
inline void SendMessageRequest::set_echo_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_echo_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageRequest.echo_id)
}

// .protocol.harmonytypes.v1.Metadata metadata = 10;
inline bool SendMessageRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SendMessageRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::protocol::harmonytypes::v1::Metadata& SendMessageRequest::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& SendMessageRequest::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageRequest.metadata)
  return _internal_metadata();
}
inline void SendMessageRequest::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.chat.v1.SendMessageRequest.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* SendMessageRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* SendMessageRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.chat.v1.SendMessageRequest.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* SendMessageRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* SendMessageRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.chat.v1.SendMessageRequest.metadata)
  return _internal_mutable_metadata();
}
inline void SendMessageRequest::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.chat.v1.SendMessageRequest.metadata)
}

// -------------------------------------------------------------------

// SendMessageResponse

// uint64 message_id = 1 [jstype = JS_STRING];
inline void SendMessageResponse::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageResponse::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendMessageResponse::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.chat.v1.SendMessageResponse.message_id)
  return _internal_message_id();
}
inline void SendMessageResponse::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void SendMessageResponse::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.chat.v1.SendMessageResponse.message_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace chat
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2fv1_2fmessages_2eproto
