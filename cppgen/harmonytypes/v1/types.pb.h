// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: harmonytypes/v1/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_harmonytypes_2fv1_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_harmonytypes_2fv1_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_harmonytypes_2fv1_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_harmonytypes_2fv1_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_harmonytypes_2fv1_2ftypes_2eproto;
namespace protocol {
namespace harmonytypes {
namespace v1 {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Attachment;
class AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
class Embed;
class EmbedDefaultTypeInternal;
extern EmbedDefaultTypeInternal _Embed_default_instance_;
class EmbedField;
class EmbedFieldDefaultTypeInternal;
extern EmbedFieldDefaultTypeInternal _EmbedField_default_instance_;
class EmbedHeading;
class EmbedHeadingDefaultTypeInternal;
extern EmbedHeadingDefaultTypeInternal _EmbedHeading_default_instance_;
class HarmonyMethodMetadata;
class HarmonyMethodMetadataDefaultTypeInternal;
extern HarmonyMethodMetadataDefaultTypeInternal _HarmonyMethodMetadata_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_ExtensionEntry_DoNotUse;
class Metadata_ExtensionEntry_DoNotUseDefaultTypeInternal;
extern Metadata_ExtensionEntry_DoNotUseDefaultTypeInternal _Metadata_ExtensionEntry_DoNotUse_default_instance_;
class Override;
class OverrideDefaultTypeInternal;
extern OverrideDefaultTypeInternal _Override_default_instance_;
}  // namespace v1
}  // namespace harmonytypes
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::harmonytypes::v1::Action* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Action>(Arena*);
template<> ::protocol::harmonytypes::v1::Attachment* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Attachment>(Arena*);
template<> ::protocol::harmonytypes::v1::Embed* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Embed>(Arena*);
template<> ::protocol::harmonytypes::v1::EmbedField* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::EmbedField>(Arena*);
template<> ::protocol::harmonytypes::v1::EmbedHeading* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::EmbedHeading>(Arena*);
template<> ::protocol::harmonytypes::v1::HarmonyMethodMetadata* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::HarmonyMethodMetadata>(Arena*);
template<> ::protocol::harmonytypes::v1::Message* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Message>(Arena*);
template<> ::protocol::harmonytypes::v1::Metadata* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(Arena*);
template<> ::protocol::harmonytypes::v1::Metadata_ExtensionEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata_ExtensionEntry_DoNotUse>(Arena*);
template<> ::protocol::harmonytypes::v1::Override* Arena::CreateMaybeMessage<::protocol::harmonytypes::v1::Override>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace harmonytypes {
namespace v1 {

enum UserStatus : int {
  USER_STATUS_ONLINE_UNSPECIFIED = 0,
  USER_STATUS_STREAMING = 1,
  USER_STATUS_DO_NOT_DISTURB = 2,
  USER_STATUS_IDLE = 3,
  USER_STATUS_OFFLINE = 4,
  UserStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserStatus_IsValid(int value);
constexpr UserStatus UserStatus_MIN = USER_STATUS_ONLINE_UNSPECIFIED;
constexpr UserStatus UserStatus_MAX = USER_STATUS_OFFLINE;
constexpr int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserStatus_descriptor();
template<typename T>
inline const std::string& UserStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserStatus_descriptor(), enum_t_value);
}
inline bool UserStatus_Parse(
    const std::string& name, UserStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
enum ActionType : int {
  Normal = 0,
  Primary = 1,
  Destructive = 2,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = Normal;
constexpr ActionType ActionType_MAX = Destructive;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    const std::string& name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum ActionPresentation : int {
  Button = 0,
  Dropdown = 1,
  Menu = 2,
  SmallEntry = 3,
  LargeEntry = 4,
  ActionPresentation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionPresentation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionPresentation_IsValid(int value);
constexpr ActionPresentation ActionPresentation_MIN = Button;
constexpr ActionPresentation ActionPresentation_MAX = LargeEntry;
constexpr int ActionPresentation_ARRAYSIZE = ActionPresentation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionPresentation_descriptor();
template<typename T>
inline const std::string& ActionPresentation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionPresentation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionPresentation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionPresentation_descriptor(), enum_t_value);
}
inline bool ActionPresentation_Parse(
    const std::string& name, ActionPresentation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionPresentation>(
    ActionPresentation_descriptor(), name, value);
}
enum FieldPresentation : int {
  Data = 0,
  CaptionedImage = 1,
  Row = 2,
  FieldPresentation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FieldPresentation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FieldPresentation_IsValid(int value);
constexpr FieldPresentation FieldPresentation_MIN = Data;
constexpr FieldPresentation FieldPresentation_MAX = Row;
constexpr int FieldPresentation_ARRAYSIZE = FieldPresentation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldPresentation_descriptor();
template<typename T>
inline const std::string& FieldPresentation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldPresentation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldPresentation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldPresentation_descriptor(), enum_t_value);
}
inline bool FieldPresentation_Parse(
    const std::string& name, FieldPresentation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldPresentation>(
    FieldPresentation_descriptor(), name, value);
}
// ===================================================================

class HarmonyMethodMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.HarmonyMethodMetadata) */ {
 public:
  inline HarmonyMethodMetadata() : HarmonyMethodMetadata(nullptr) {};
  virtual ~HarmonyMethodMetadata();

  HarmonyMethodMetadata(const HarmonyMethodMetadata& from);
  HarmonyMethodMetadata(HarmonyMethodMetadata&& from) noexcept
    : HarmonyMethodMetadata() {
    *this = ::std::move(from);
  }

  inline HarmonyMethodMetadata& operator=(const HarmonyMethodMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline HarmonyMethodMetadata& operator=(HarmonyMethodMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HarmonyMethodMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HarmonyMethodMetadata* internal_default_instance() {
    return reinterpret_cast<const HarmonyMethodMetadata*>(
               &_HarmonyMethodMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HarmonyMethodMetadata& a, HarmonyMethodMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(HarmonyMethodMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HarmonyMethodMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HarmonyMethodMetadata* New() const final {
    return CreateMaybeMessage<HarmonyMethodMetadata>(nullptr);
  }

  HarmonyMethodMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HarmonyMethodMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HarmonyMethodMetadata& from);
  void MergeFrom(const HarmonyMethodMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HarmonyMethodMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.HarmonyMethodMetadata";
  }
  protected:
  explicit HarmonyMethodMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiresPermissionNodeFieldNumber = 3,
    kRequiresAuthenticationFieldNumber = 1,
    kRequiresLocalFieldNumber = 2,
  };
  // string requires_permission_node = 3;
  void clear_requires_permission_node();
  const std::string& requires_permission_node() const;
  void set_requires_permission_node(const std::string& value);
  void set_requires_permission_node(std::string&& value);
  void set_requires_permission_node(const char* value);
  void set_requires_permission_node(const char* value, size_t size);
  std::string* mutable_requires_permission_node();
  std::string* release_requires_permission_node();
  void set_allocated_requires_permission_node(std::string* requires_permission_node);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requires_permission_node();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requires_permission_node(
      std::string* requires_permission_node);
  private:
  const std::string& _internal_requires_permission_node() const;
  void _internal_set_requires_permission_node(const std::string& value);
  std::string* _internal_mutable_requires_permission_node();
  public:

  // bool requires_authentication = 1;
  void clear_requires_authentication();
  bool requires_authentication() const;
  void set_requires_authentication(bool value);
  private:
  bool _internal_requires_authentication() const;
  void _internal_set_requires_authentication(bool value);
  public:

  // bool requires_local = 2;
  void clear_requires_local();
  bool requires_local() const;
  void set_requires_local(bool value);
  private:
  bool _internal_requires_local() const;
  void _internal_set_requires_local(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.HarmonyMethodMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requires_permission_node_;
  bool requires_authentication_;
  bool requires_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Override PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Override) */ {
 public:
  inline Override() : Override(nullptr) {};
  virtual ~Override();

  Override(const Override& from);
  Override(Override&& from) noexcept
    : Override() {
    *this = ::std::move(from);
  }

  inline Override& operator=(const Override& from) {
    CopyFrom(from);
    return *this;
  }
  inline Override& operator=(Override&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Override& default_instance();

  enum ReasonCase {
    kUserDefined = 3,
    kWebhook = 4,
    kSystemPlurality = 5,
    kSystemMessage = 6,
    kBridge = 7,
    REASON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Override* internal_default_instance() {
    return reinterpret_cast<const Override*>(
               &_Override_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Override& a, Override& b) {
    a.Swap(&b);
  }
  inline void Swap(Override* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Override* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Override* New() const final {
    return CreateMaybeMessage<Override>(nullptr);
  }

  Override* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Override>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Override& from);
  void MergeFrom(const Override& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Override* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Override";
  }
  protected:
  explicit Override(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAvatarFieldNumber = 2,
    kUserDefinedFieldNumber = 3,
    kWebhookFieldNumber = 4,
    kSystemPluralityFieldNumber = 5,
    kSystemMessageFieldNumber = 6,
    kBridgeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar = 2;
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avatar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avatar(
      std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string user_defined = 3;
  private:
  bool _internal_has_user_defined() const;
  public:
  void clear_user_defined();
  const std::string& user_defined() const;
  void set_user_defined(const std::string& value);
  void set_user_defined(std::string&& value);
  void set_user_defined(const char* value);
  void set_user_defined(const char* value, size_t size);
  std::string* mutable_user_defined();
  std::string* release_user_defined();
  void set_allocated_user_defined(std::string* user_defined);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_defined();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_defined(
      std::string* user_defined);
  private:
  const std::string& _internal_user_defined() const;
  void _internal_set_user_defined(const std::string& value);
  std::string* _internal_mutable_user_defined();
  public:

  // .google.protobuf.Empty webhook = 4;
  bool has_webhook() const;
  private:
  bool _internal_has_webhook() const;
  public:
  void clear_webhook();
  const PROTOBUF_NAMESPACE_ID::Empty& webhook() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_webhook();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_webhook();
  void set_allocated_webhook(PROTOBUF_NAMESPACE_ID::Empty* webhook);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_webhook() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_webhook();
  public:
  void unsafe_arena_set_allocated_webhook(
      PROTOBUF_NAMESPACE_ID::Empty* webhook);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_webhook();

  // .google.protobuf.Empty system_plurality = 5;
  bool has_system_plurality() const;
  private:
  bool _internal_has_system_plurality() const;
  public:
  void clear_system_plurality();
  const PROTOBUF_NAMESPACE_ID::Empty& system_plurality() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_system_plurality();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_system_plurality();
  void set_allocated_system_plurality(PROTOBUF_NAMESPACE_ID::Empty* system_plurality);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_system_plurality() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_system_plurality();
  public:
  void unsafe_arena_set_allocated_system_plurality(
      PROTOBUF_NAMESPACE_ID::Empty* system_plurality);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_system_plurality();

  // .google.protobuf.Empty system_message = 6;
  bool has_system_message() const;
  private:
  bool _internal_has_system_message() const;
  public:
  void clear_system_message();
  const PROTOBUF_NAMESPACE_ID::Empty& system_message() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_system_message();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_system_message();
  void set_allocated_system_message(PROTOBUF_NAMESPACE_ID::Empty* system_message);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_system_message() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_system_message();
  public:
  void unsafe_arena_set_allocated_system_message(
      PROTOBUF_NAMESPACE_ID::Empty* system_message);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_system_message();

  // .google.protobuf.Empty bridge = 7;
  bool has_bridge() const;
  private:
  bool _internal_has_bridge() const;
  public:
  void clear_bridge();
  const PROTOBUF_NAMESPACE_ID::Empty& bridge() const;
  PROTOBUF_NAMESPACE_ID::Empty* release_bridge();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_bridge();
  void set_allocated_bridge(PROTOBUF_NAMESPACE_ID::Empty* bridge);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_bridge() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_bridge();
  public:
  void unsafe_arena_set_allocated_bridge(
      PROTOBUF_NAMESPACE_ID::Empty* bridge);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_bridge();

  void clear_reason();
  ReasonCase reason_case() const;
  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Override)
 private:
  class _Internal;
  void set_has_user_defined();
  void set_has_webhook();
  void set_has_system_plurality();
  void set_has_system_message();
  void set_has_bridge();

  inline bool has_reason() const;
  inline void clear_has_reason();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  union ReasonUnion {
    ReasonUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_;
    PROTOBUF_NAMESPACE_ID::Empty* webhook_;
    PROTOBUF_NAMESPACE_ID::Empty* system_plurality_;
    PROTOBUF_NAMESPACE_ID::Empty* system_message_;
    PROTOBUF_NAMESPACE_ID::Empty* bridge_;
  } reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Action) */ {
 public:
  inline Action() : Action(nullptr) {};
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 6,
    kTextFieldNumber = 1,
    kUrlFieldNumber = 2,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kPresentationFieldNumber = 5,
  };
  // repeated .protocol.harmonytypes.v1.Action children = 6;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::protocol::harmonytypes::v1::Action* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_children();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_children(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_children();
  public:
  const ::protocol::harmonytypes::v1::Action& children(int index) const;
  ::protocol::harmonytypes::v1::Action* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      children() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .protocol.harmonytypes.v1.ActionType type = 4;
  void clear_type();
  ::protocol::harmonytypes::v1::ActionType type() const;
  void set_type(::protocol::harmonytypes::v1::ActionType value);
  private:
  ::protocol::harmonytypes::v1::ActionType _internal_type() const;
  void _internal_set_type(::protocol::harmonytypes::v1::ActionType value);
  public:

  // .protocol.harmonytypes.v1.ActionPresentation presentation = 5;
  void clear_presentation();
  ::protocol::harmonytypes::v1::ActionPresentation presentation() const;
  void set_presentation(::protocol::harmonytypes::v1::ActionPresentation value);
  private:
  ::protocol::harmonytypes::v1::ActionPresentation _internal_presentation() const;
  void _internal_set_presentation(::protocol::harmonytypes::v1::ActionPresentation value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  int presentation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class EmbedHeading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.EmbedHeading) */ {
 public:
  inline EmbedHeading() : EmbedHeading(nullptr) {};
  virtual ~EmbedHeading();

  EmbedHeading(const EmbedHeading& from);
  EmbedHeading(EmbedHeading&& from) noexcept
    : EmbedHeading() {
    *this = ::std::move(from);
  }

  inline EmbedHeading& operator=(const EmbedHeading& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedHeading& operator=(EmbedHeading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedHeading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedHeading* internal_default_instance() {
    return reinterpret_cast<const EmbedHeading*>(
               &_EmbedHeading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmbedHeading& a, EmbedHeading& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedHeading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedHeading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedHeading* New() const final {
    return CreateMaybeMessage<EmbedHeading>(nullptr);
  }

  EmbedHeading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedHeading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedHeading& from);
  void MergeFrom(const EmbedHeading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedHeading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.EmbedHeading";
  }
  protected:
  explicit EmbedHeading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kSubtextFieldNumber = 2,
    kUrlFieldNumber = 3,
    kIconFieldNumber = 4,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string subtext = 2;
  void clear_subtext();
  const std::string& subtext() const;
  void set_subtext(const std::string& value);
  void set_subtext(std::string&& value);
  void set_subtext(const char* value);
  void set_subtext(const char* value, size_t size);
  std::string* mutable_subtext();
  std::string* release_subtext();
  void set_allocated_subtext(std::string* subtext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subtext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subtext(
      std::string* subtext);
  private:
  const std::string& _internal_subtext() const;
  void _internal_set_subtext(const std::string& value);
  std::string* _internal_mutable_subtext();
  public:

  // string url = 3;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string icon = 4;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_icon();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_icon(
      std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.EmbedHeading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class EmbedField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.EmbedField) */ {
 public:
  inline EmbedField() : EmbedField(nullptr) {};
  virtual ~EmbedField();

  EmbedField(const EmbedField& from);
  EmbedField(EmbedField&& from) noexcept
    : EmbedField() {
    *this = ::std::move(from);
  }

  inline EmbedField& operator=(const EmbedField& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedField& operator=(EmbedField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmbedField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedField* internal_default_instance() {
    return reinterpret_cast<const EmbedField*>(
               &_EmbedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmbedField& a, EmbedField& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmbedField* New() const final {
    return CreateMaybeMessage<EmbedField>(nullptr);
  }

  EmbedField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmbedField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmbedField& from);
  void MergeFrom(const EmbedField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.EmbedField";
  }
  protected:
  explicit EmbedField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 6,
    kTitleFieldNumber = 1,
    kSubtitleFieldNumber = 2,
    kBodyFieldNumber = 3,
    kImageUrlFieldNumber = 4,
    kPresentationFieldNumber = 5,
  };
  // repeated .protocol.harmonytypes.v1.Action actions = 6;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protocol::harmonytypes::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_actions();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_actions(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_actions();
  public:
  const ::protocol::harmonytypes::v1::Action& actions(int index) const;
  ::protocol::harmonytypes::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      actions() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 2;
  void clear_subtitle();
  const std::string& subtitle() const;
  void set_subtitle(const std::string& value);
  void set_subtitle(std::string&& value);
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  std::string* mutable_subtitle();
  std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subtitle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subtitle(
      std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string body = 3;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string image_url = 4;
  void clear_image_url();
  const std::string& image_url() const;
  void set_image_url(const std::string& value);
  void set_image_url(std::string&& value);
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  std::string* mutable_image_url();
  std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_url(
      std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // .protocol.harmonytypes.v1.FieldPresentation presentation = 5;
  void clear_presentation();
  ::protocol::harmonytypes::v1::FieldPresentation presentation() const;
  void set_presentation(::protocol::harmonytypes::v1::FieldPresentation value);
  private:
  ::protocol::harmonytypes::v1::FieldPresentation _internal_presentation() const;
  void _internal_set_presentation(::protocol::harmonytypes::v1::FieldPresentation value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.EmbedField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  int presentation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Embed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Embed) */ {
 public:
  inline Embed() : Embed(nullptr) {};
  virtual ~Embed();

  Embed(const Embed& from);
  Embed(Embed&& from) noexcept
    : Embed() {
    *this = ::std::move(from);
  }

  inline Embed& operator=(const Embed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embed& operator=(Embed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Embed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Embed* internal_default_instance() {
    return reinterpret_cast<const Embed*>(
               &_Embed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Embed& a, Embed& b) {
    a.Swap(&b);
  }
  inline void Swap(Embed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Embed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Embed* New() const final {
    return CreateMaybeMessage<Embed>(nullptr);
  }

  Embed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Embed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Embed& from);
  void MergeFrom(const Embed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Embed";
  }
  protected:
  explicit Embed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 6,
    kActionsFieldNumber = 7,
    kTitleFieldNumber = 1,
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 4,
    kFooterFieldNumber = 5,
    kColorFieldNumber = 3,
  };
  // repeated .protocol.harmonytypes.v1.EmbedField fields = 6;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::protocol::harmonytypes::v1::EmbedField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::EmbedField >*
      mutable_fields();
  private:
  const ::protocol::harmonytypes::v1::EmbedField& _internal_fields(int index) const;
  ::protocol::harmonytypes::v1::EmbedField* _internal_add_fields();
  public:
  const ::protocol::harmonytypes::v1::EmbedField& fields(int index) const;
  ::protocol::harmonytypes::v1::EmbedField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::EmbedField >&
      fields() const;

  // repeated .protocol.harmonytypes.v1.Action actions = 7;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protocol::harmonytypes::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_actions();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_actions(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_actions();
  public:
  const ::protocol::harmonytypes::v1::Action& actions(int index) const;
  ::protocol::harmonytypes::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      actions() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .protocol.harmonytypes.v1.EmbedHeading header = 4;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::protocol::harmonytypes::v1::EmbedHeading& header() const;
  ::protocol::harmonytypes::v1::EmbedHeading* release_header();
  ::protocol::harmonytypes::v1::EmbedHeading* mutable_header();
  void set_allocated_header(::protocol::harmonytypes::v1::EmbedHeading* header);
  private:
  const ::protocol::harmonytypes::v1::EmbedHeading& _internal_header() const;
  ::protocol::harmonytypes::v1::EmbedHeading* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::protocol::harmonytypes::v1::EmbedHeading* header);
  ::protocol::harmonytypes::v1::EmbedHeading* unsafe_arena_release_header();

  // .protocol.harmonytypes.v1.EmbedHeading footer = 5;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const ::protocol::harmonytypes::v1::EmbedHeading& footer() const;
  ::protocol::harmonytypes::v1::EmbedHeading* release_footer();
  ::protocol::harmonytypes::v1::EmbedHeading* mutable_footer();
  void set_allocated_footer(::protocol::harmonytypes::v1::EmbedHeading* footer);
  private:
  const ::protocol::harmonytypes::v1::EmbedHeading& _internal_footer() const;
  ::protocol::harmonytypes::v1::EmbedHeading* _internal_mutable_footer();
  public:
  void unsafe_arena_set_allocated_footer(
      ::protocol::harmonytypes::v1::EmbedHeading* footer);
  ::protocol::harmonytypes::v1::EmbedHeading* unsafe_arena_release_footer();

  // int64 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int64 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Embed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::EmbedField > fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::protocol::harmonytypes::v1::EmbedHeading* header_;
  ::protocol::harmonytypes::v1::EmbedHeading* footer_;
  ::PROTOBUF_NAMESPACE_ID::int64 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Attachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Attachment) */ {
 public:
  inline Attachment() : Attachment(nullptr) {};
  virtual ~Attachment();

  Attachment(const Attachment& from);
  Attachment(Attachment&& from) noexcept
    : Attachment() {
    *this = ::std::move(from);
  }

  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attachment& operator=(Attachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attachment* internal_default_instance() {
    return reinterpret_cast<const Attachment*>(
               &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Attachment& a, Attachment& b) {
    a.Swap(&b);
  }
  inline void Swap(Attachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attachment* New() const final {
    return CreateMaybeMessage<Attachment>(nullptr);
  }

  Attachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attachment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attachment& from);
  void MergeFrom(const Attachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Attachment";
  }
  protected:
  explicit Attachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSizeFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Attachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Metadata_ExtensionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_ExtensionEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_ExtensionEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Metadata_ExtensionEntry_DoNotUse();
  Metadata_ExtensionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metadata_ExtensionEntry_DoNotUse& other);
  static const Metadata_ExtensionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_ExtensionEntry_DoNotUse*>(&_Metadata_ExtensionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.harmonytypes.v1.Metadata.ExtensionEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {};
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 2,
    kKindFieldNumber = 1,
  };
  // map<string, .google.protobuf.Any> extension = 2;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      _internal_extension() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_extension();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
      extension() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
      mutable_extension();

  // string kind = 1;
  void clear_kind();
  const std::string& kind() const;
  void set_kind(const std::string& value);
  void set_kind(std::string&& value);
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  std::string* mutable_kind();
  std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kind();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kind(
      std::string* kind);
  private:
  const std::string& _internal_kind() const;
  void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metadata_ExtensionEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.harmonytypes.v1.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.harmonytypes.v1.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto);
    return ::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbedsFieldNumber = 8,
    kActionsFieldNumber = 9,
    kAttachmentsFieldNumber = 10,
    kContentFieldNumber = 7,
    kCreatedAtFieldNumber = 5,
    kEditedAtFieldNumber = 6,
    kOverridesFieldNumber = 12,
    kMetadataFieldNumber = 13,
    kGuildIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kAuthorIdFieldNumber = 4,
    kInReplyToFieldNumber = 11,
  };
  // repeated .protocol.harmonytypes.v1.Embed embeds = 8;
  int embeds_size() const;
  private:
  int _internal_embeds_size() const;
  public:
  void clear_embeds();
  ::protocol::harmonytypes::v1::Embed* mutable_embeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
      mutable_embeds();
  private:
  const ::protocol::harmonytypes::v1::Embed& _internal_embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* _internal_add_embeds();
  public:
  const ::protocol::harmonytypes::v1::Embed& embeds(int index) const;
  ::protocol::harmonytypes::v1::Embed* add_embeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
      embeds() const;

  // repeated .protocol.harmonytypes.v1.Action actions = 9;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protocol::harmonytypes::v1::Action* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
      mutable_actions();
  private:
  const ::protocol::harmonytypes::v1::Action& _internal_actions(int index) const;
  ::protocol::harmonytypes::v1::Action* _internal_add_actions();
  public:
  const ::protocol::harmonytypes::v1::Action& actions(int index) const;
  ::protocol::harmonytypes::v1::Action* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
      actions() const;

  // repeated .protocol.harmonytypes.v1.Attachment attachments = 10;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::protocol::harmonytypes::v1::Attachment* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Attachment >*
      mutable_attachments();
  private:
  const ::protocol::harmonytypes::v1::Attachment& _internal_attachments(int index) const;
  ::protocol::harmonytypes::v1::Attachment* _internal_add_attachments();
  public:
  const ::protocol::harmonytypes::v1::Attachment& attachments(int index) const;
  ::protocol::harmonytypes::v1::Attachment* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Attachment >&
      attachments() const;

  // string content = 7;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp edited_at = 6;
  bool has_edited_at() const;
  private:
  bool _internal_has_edited_at() const;
  public:
  void clear_edited_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edited_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edited_at();
  void set_allocated_edited_at(PROTOBUF_NAMESPACE_ID::Timestamp* edited_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edited_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edited_at();
  public:
  void unsafe_arena_set_allocated_edited_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* edited_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edited_at();

  // .protocol.harmonytypes.v1.Override overrides = 12;
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::protocol::harmonytypes::v1::Override& overrides() const;
  ::protocol::harmonytypes::v1::Override* release_overrides();
  ::protocol::harmonytypes::v1::Override* mutable_overrides();
  void set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides);
  private:
  const ::protocol::harmonytypes::v1::Override& _internal_overrides() const;
  ::protocol::harmonytypes::v1::Override* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::protocol::harmonytypes::v1::Override* overrides);
  ::protocol::harmonytypes::v1::Override* unsafe_arena_release_overrides();

  // .protocol.harmonytypes.v1.Metadata metadata = 13;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::harmonytypes::v1::Metadata& metadata() const;
  ::protocol::harmonytypes::v1::Metadata* release_metadata();
  ::protocol::harmonytypes::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata);
  private:
  const ::protocol::harmonytypes::v1::Metadata& _internal_metadata() const;
  ::protocol::harmonytypes::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::harmonytypes::v1::Metadata* metadata);
  ::protocol::harmonytypes::v1::Metadata* unsafe_arena_release_metadata();

  // uint64 guild_id = 1 [jstype = JS_STRING];
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 3 [jstype = JS_STRING];
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 author_id = 4 [jstype = JS_STRING];
  void clear_author_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 author_id() const;
  void set_author_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_author_id() const;
  void _internal_set_author_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 in_reply_to = 11 [jstype = JS_STRING];
  void clear_in_reply_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 in_reply_to() const;
  void set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in_reply_to() const;
  void _internal_set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.harmonytypes.v1.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed > embeds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action > actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Attachment > attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edited_at_;
  ::protocol::harmonytypes::v1::Override* overrides_;
  ::protocol::harmonytypes::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 author_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 in_reply_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_harmonytypes_2fv1_2ftypes_2eproto;
};
// ===================================================================

static const int kMetadataFieldNumber = 1091;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protocol::harmonytypes::v1::HarmonyMethodMetadata >, 11, false >
  metadata;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HarmonyMethodMetadata

// bool requires_authentication = 1;
inline void HarmonyMethodMetadata::clear_requires_authentication() {
  requires_authentication_ = false;
}
inline bool HarmonyMethodMetadata::_internal_requires_authentication() const {
  return requires_authentication_;
}
inline bool HarmonyMethodMetadata::requires_authentication() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_authentication)
  return _internal_requires_authentication();
}
inline void HarmonyMethodMetadata::_internal_set_requires_authentication(bool value) {
  
  requires_authentication_ = value;
}
inline void HarmonyMethodMetadata::set_requires_authentication(bool value) {
  _internal_set_requires_authentication(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_authentication)
}

// bool requires_local = 2;
inline void HarmonyMethodMetadata::clear_requires_local() {
  requires_local_ = false;
}
inline bool HarmonyMethodMetadata::_internal_requires_local() const {
  return requires_local_;
}
inline bool HarmonyMethodMetadata::requires_local() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_local)
  return _internal_requires_local();
}
inline void HarmonyMethodMetadata::_internal_set_requires_local(bool value) {
  
  requires_local_ = value;
}
inline void HarmonyMethodMetadata::set_requires_local(bool value) {
  _internal_set_requires_local(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_local)
}

// string requires_permission_node = 3;
inline void HarmonyMethodMetadata::clear_requires_permission_node() {
  requires_permission_node_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HarmonyMethodMetadata::requires_permission_node() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
  return _internal_requires_permission_node();
}
inline void HarmonyMethodMetadata::set_requires_permission_node(const std::string& value) {
  _internal_set_requires_permission_node(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}
inline std::string* HarmonyMethodMetadata::mutable_requires_permission_node() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
  return _internal_mutable_requires_permission_node();
}
inline const std::string& HarmonyMethodMetadata::_internal_requires_permission_node() const {
  return requires_permission_node_.Get();
}
inline void HarmonyMethodMetadata::_internal_set_requires_permission_node(const std::string& value) {
  
  requires_permission_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HarmonyMethodMetadata::set_requires_permission_node(std::string&& value) {
  
  requires_permission_node_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}
inline void HarmonyMethodMetadata::set_requires_permission_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requires_permission_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}
inline void HarmonyMethodMetadata::set_requires_permission_node(const char* value,
    size_t size) {
  
  requires_permission_node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}
inline std::string* HarmonyMethodMetadata::_internal_mutable_requires_permission_node() {
  
  return requires_permission_node_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HarmonyMethodMetadata::release_requires_permission_node() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
  return requires_permission_node_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HarmonyMethodMetadata::set_allocated_requires_permission_node(std::string* requires_permission_node) {
  if (requires_permission_node != nullptr) {
    
  } else {
    
  }
  requires_permission_node_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requires_permission_node,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}
inline std::string* HarmonyMethodMetadata::unsafe_arena_release_requires_permission_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requires_permission_node_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HarmonyMethodMetadata::unsafe_arena_set_allocated_requires_permission_node(
    std::string* requires_permission_node) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requires_permission_node != nullptr) {
    
  } else {
    
  }
  requires_permission_node_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requires_permission_node, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.HarmonyMethodMetadata.requires_permission_node)
}

// -------------------------------------------------------------------

// Override

// string name = 1;
inline void Override::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Override::name() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.name)
  return _internal_name();
}
inline void Override::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Override.name)
}
inline std::string* Override::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.name)
  return _internal_mutable_name();
}
inline const std::string& Override::_internal_name() const {
  return name_.Get();
}
inline void Override::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Override::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Override.name)
}
inline void Override::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Override.name)
}
inline void Override::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Override.name)
}
inline std::string* Override::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Override::release_name() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Override::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Override.name)
}
inline std::string* Override::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Override::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.name)
}

// string avatar = 2;
inline void Override::clear_avatar() {
  avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Override::avatar() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.avatar)
  return _internal_avatar();
}
inline void Override::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Override.avatar)
}
inline std::string* Override::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& Override::_internal_avatar() const {
  return avatar_.Get();
}
inline void Override::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Override::set_avatar(std::string&& value) {
  
  avatar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Override.avatar)
}
inline void Override::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Override.avatar)
}
inline void Override::set_avatar(const char* value,
    size_t size) {
  
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Override.avatar)
}
inline std::string* Override::_internal_mutable_avatar() {
  
  return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Override::release_avatar() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Override::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Override.avatar)
}
inline std::string* Override::unsafe_arena_release_avatar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.avatar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Override::unsafe_arena_set_allocated_avatar(
    std::string* avatar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avatar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.avatar)
}

// string user_defined = 3;
inline bool Override::_internal_has_user_defined() const {
  return reason_case() == kUserDefined;
}
inline void Override::set_has_user_defined() {
  _oneof_case_[0] = kUserDefined;
}
inline void Override::clear_user_defined() {
  if (_internal_has_user_defined()) {
    reason_.user_defined_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_reason();
  }
}
inline const std::string& Override::user_defined() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.user_defined)
  return _internal_user_defined();
}
inline void Override::set_user_defined(const std::string& value) {
  _internal_set_user_defined(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Override.user_defined)
}
inline std::string* Override::mutable_user_defined() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.user_defined)
  return _internal_mutable_user_defined();
}
inline const std::string& Override::_internal_user_defined() const {
  if (_internal_has_user_defined()) {
    return reason_.user_defined_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Override::_internal_set_user_defined(const std::string& value) {
  if (!_internal_has_user_defined()) {
    clear_reason();
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  reason_.user_defined_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Override::set_user_defined(std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Override.user_defined)
  if (!_internal_has_user_defined()) {
    clear_reason();
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  reason_.user_defined_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Override.user_defined)
}
inline void Override::set_user_defined(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user_defined()) {
    clear_reason();
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  reason_.user_defined_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Override.user_defined)
}
inline void Override::set_user_defined(const char* value,
                             size_t size) {
  if (!_internal_has_user_defined()) {
    clear_reason();
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  reason_.user_defined_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Override.user_defined)
}
inline std::string* Override::_internal_mutable_user_defined() {
  if (!_internal_has_user_defined()) {
    clear_reason();
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return reason_.user_defined_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Override::release_user_defined() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.user_defined)
  if (_internal_has_user_defined()) {
    clear_has_reason();
    return reason_.user_defined_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Override::set_allocated_user_defined(std::string* user_defined) {
  if (has_reason()) {
    clear_reason();
  }
  if (user_defined != nullptr) {
    set_has_user_defined();
    reason_.user_defined_.UnsafeSetDefault(user_defined);
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Override.user_defined)
}
inline std::string* Override::unsafe_arena_release_user_defined() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.user_defined)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_user_defined()) {
    clear_has_reason();
    return reason_.user_defined_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Override::unsafe_arena_set_allocated_user_defined(std::string* user_defined) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_user_defined()) {
    reason_.user_defined_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_reason();
  if (user_defined) {
    set_has_user_defined();
    reason_.user_defined_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.user_defined)
}

// .google.protobuf.Empty webhook = 4;
inline bool Override::_internal_has_webhook() const {
  return reason_case() == kWebhook;
}
inline bool Override::has_webhook() const {
  return _internal_has_webhook();
}
inline void Override::set_has_webhook() {
  _oneof_case_[0] = kWebhook;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::release_webhook() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.webhook)
  if (_internal_has_webhook()) {
    clear_has_reason();
      PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.webhook_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reason_.webhook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::_internal_webhook() const {
  return _internal_has_webhook()
      ? *reason_.webhook_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::webhook() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.webhook)
  return _internal_webhook();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::unsafe_arena_release_webhook() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.webhook)
  if (_internal_has_webhook()) {
    clear_has_reason();
    PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.webhook_;
    reason_.webhook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Override::unsafe_arena_set_allocated_webhook(PROTOBUF_NAMESPACE_ID::Empty* webhook) {
  clear_reason();
  if (webhook) {
    set_has_webhook();
    reason_.webhook_ = webhook;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.webhook)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::_internal_mutable_webhook() {
  if (!_internal_has_webhook()) {
    clear_reason();
    set_has_webhook();
    reason_.webhook_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return reason_.webhook_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::mutable_webhook() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.webhook)
  return _internal_mutable_webhook();
}

// .google.protobuf.Empty system_plurality = 5;
inline bool Override::_internal_has_system_plurality() const {
  return reason_case() == kSystemPlurality;
}
inline bool Override::has_system_plurality() const {
  return _internal_has_system_plurality();
}
inline void Override::set_has_system_plurality() {
  _oneof_case_[0] = kSystemPlurality;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::release_system_plurality() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.system_plurality)
  if (_internal_has_system_plurality()) {
    clear_has_reason();
      PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.system_plurality_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reason_.system_plurality_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::_internal_system_plurality() const {
  return _internal_has_system_plurality()
      ? *reason_.system_plurality_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::system_plurality() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.system_plurality)
  return _internal_system_plurality();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::unsafe_arena_release_system_plurality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.system_plurality)
  if (_internal_has_system_plurality()) {
    clear_has_reason();
    PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.system_plurality_;
    reason_.system_plurality_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Override::unsafe_arena_set_allocated_system_plurality(PROTOBUF_NAMESPACE_ID::Empty* system_plurality) {
  clear_reason();
  if (system_plurality) {
    set_has_system_plurality();
    reason_.system_plurality_ = system_plurality;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.system_plurality)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::_internal_mutable_system_plurality() {
  if (!_internal_has_system_plurality()) {
    clear_reason();
    set_has_system_plurality();
    reason_.system_plurality_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return reason_.system_plurality_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::mutable_system_plurality() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.system_plurality)
  return _internal_mutable_system_plurality();
}

// .google.protobuf.Empty system_message = 6;
inline bool Override::_internal_has_system_message() const {
  return reason_case() == kSystemMessage;
}
inline bool Override::has_system_message() const {
  return _internal_has_system_message();
}
inline void Override::set_has_system_message() {
  _oneof_case_[0] = kSystemMessage;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::release_system_message() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.system_message)
  if (_internal_has_system_message()) {
    clear_has_reason();
      PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.system_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reason_.system_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::_internal_system_message() const {
  return _internal_has_system_message()
      ? *reason_.system_message_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::system_message() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.system_message)
  return _internal_system_message();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::unsafe_arena_release_system_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.system_message)
  if (_internal_has_system_message()) {
    clear_has_reason();
    PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.system_message_;
    reason_.system_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Override::unsafe_arena_set_allocated_system_message(PROTOBUF_NAMESPACE_ID::Empty* system_message) {
  clear_reason();
  if (system_message) {
    set_has_system_message();
    reason_.system_message_ = system_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.system_message)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::_internal_mutable_system_message() {
  if (!_internal_has_system_message()) {
    clear_reason();
    set_has_system_message();
    reason_.system_message_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return reason_.system_message_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::mutable_system_message() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.system_message)
  return _internal_mutable_system_message();
}

// .google.protobuf.Empty bridge = 7;
inline bool Override::_internal_has_bridge() const {
  return reason_case() == kBridge;
}
inline bool Override::has_bridge() const {
  return _internal_has_bridge();
}
inline void Override::set_has_bridge() {
  _oneof_case_[0] = kBridge;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::release_bridge() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Override.bridge)
  if (_internal_has_bridge()) {
    clear_has_reason();
      PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.bridge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reason_.bridge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::_internal_bridge() const {
  return _internal_has_bridge()
      ? *reason_.bridge_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty*>(&PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Override::bridge() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Override.bridge)
  return _internal_bridge();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::unsafe_arena_release_bridge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Override.bridge)
  if (_internal_has_bridge()) {
    clear_has_reason();
    PROTOBUF_NAMESPACE_ID::Empty* temp = reason_.bridge_;
    reason_.bridge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Override::unsafe_arena_set_allocated_bridge(PROTOBUF_NAMESPACE_ID::Empty* bridge) {
  clear_reason();
  if (bridge) {
    set_has_bridge();
    reason_.bridge_ = bridge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Override.bridge)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::_internal_mutable_bridge() {
  if (!_internal_has_bridge()) {
    clear_reason();
    set_has_bridge();
    reason_.bridge_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArena());
  }
  return reason_.bridge_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Override::mutable_bridge() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Override.bridge)
  return _internal_mutable_bridge();
}

inline bool Override::has_reason() const {
  return reason_case() != REASON_NOT_SET;
}
inline void Override::clear_has_reason() {
  _oneof_case_[0] = REASON_NOT_SET;
}
inline Override::ReasonCase Override::reason_case() const {
  return Override::ReasonCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action

// string text = 1;
inline void Action::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::text() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.text)
  return _internal_text();
}
inline void Action::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Action.text)
}
inline std::string* Action::mutable_text() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Action.text)
  return _internal_mutable_text();
}
inline const std::string& Action::_internal_text() const {
  return text_.Get();
}
inline void Action::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Action.text)
}
inline void Action::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Action.text)
}
inline void Action::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Action.text)
}
inline std::string* Action::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_text() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Action.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Action.text)
}
inline std::string* Action::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Action.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Action.text)
}

// string url = 2;
inline void Action::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::url() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.url)
  return _internal_url();
}
inline void Action::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Action.url)
}
inline std::string* Action::mutable_url() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Action.url)
  return _internal_mutable_url();
}
inline const std::string& Action::_internal_url() const {
  return url_.Get();
}
inline void Action::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Action.url)
}
inline void Action::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Action.url)
}
inline void Action::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Action.url)
}
inline std::string* Action::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_url() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Action.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Action.url)
}
inline std::string* Action::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Action.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Action.url)
}

// string id = 3;
inline void Action::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.id)
  return _internal_id();
}
inline void Action::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Action.id)
}
inline std::string* Action::mutable_id() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Action.id)
  return _internal_mutable_id();
}
inline const std::string& Action::_internal_id() const {
  return id_.Get();
}
inline void Action::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Action.id)
}
inline void Action::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Action.id)
}
inline void Action::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Action.id)
}
inline std::string* Action::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_id() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Action.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Action.id)
}
inline std::string* Action::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Action.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Action.id)
}

// .protocol.harmonytypes.v1.ActionType type = 4;
inline void Action::clear_type() {
  type_ = 0;
}
inline ::protocol::harmonytypes::v1::ActionType Action::_internal_type() const {
  return static_cast< ::protocol::harmonytypes::v1::ActionType >(type_);
}
inline ::protocol::harmonytypes::v1::ActionType Action::type() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.type)
  return _internal_type();
}
inline void Action::_internal_set_type(::protocol::harmonytypes::v1::ActionType value) {
  
  type_ = value;
}
inline void Action::set_type(::protocol::harmonytypes::v1::ActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Action.type)
}

// .protocol.harmonytypes.v1.ActionPresentation presentation = 5;
inline void Action::clear_presentation() {
  presentation_ = 0;
}
inline ::protocol::harmonytypes::v1::ActionPresentation Action::_internal_presentation() const {
  return static_cast< ::protocol::harmonytypes::v1::ActionPresentation >(presentation_);
}
inline ::protocol::harmonytypes::v1::ActionPresentation Action::presentation() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.presentation)
  return _internal_presentation();
}
inline void Action::_internal_set_presentation(::protocol::harmonytypes::v1::ActionPresentation value) {
  
  presentation_ = value;
}
inline void Action::set_presentation(::protocol::harmonytypes::v1::ActionPresentation value) {
  _internal_set_presentation(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Action.presentation)
}

// repeated .protocol.harmonytypes.v1.Action children = 6;
inline int Action::_internal_children_size() const {
  return children_.size();
}
inline int Action::children_size() const {
  return _internal_children_size();
}
inline void Action::clear_children() {
  children_.Clear();
}
inline ::protocol::harmonytypes::v1::Action* Action::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Action.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
Action::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Action.children)
  return &children_;
}
inline const ::protocol::harmonytypes::v1::Action& Action::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& Action::children(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Action.children)
  return _internal_children(index);
}
inline ::protocol::harmonytypes::v1::Action* Action::_internal_add_children() {
  return children_.Add();
}
inline ::protocol::harmonytypes::v1::Action* Action::add_children() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Action.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
Action::children() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Action.children)
  return children_;
}

// -------------------------------------------------------------------

// EmbedHeading

// string text = 1;
inline void EmbedHeading::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedHeading::text() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedHeading.text)
  return _internal_text();
}
inline void EmbedHeading::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedHeading.text)
}
inline std::string* EmbedHeading::mutable_text() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedHeading.text)
  return _internal_mutable_text();
}
inline const std::string& EmbedHeading::_internal_text() const {
  return text_.Get();
}
inline void EmbedHeading::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedHeading::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedHeading.text)
}
inline void EmbedHeading::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedHeading.text)
}
inline void EmbedHeading::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedHeading.text)
}
inline std::string* EmbedHeading::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedHeading::release_text() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedHeading.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedHeading::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedHeading.text)
}
inline std::string* EmbedHeading::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedHeading.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedHeading::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedHeading.text)
}

// string subtext = 2;
inline void EmbedHeading::clear_subtext() {
  subtext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedHeading::subtext() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedHeading.subtext)
  return _internal_subtext();
}
inline void EmbedHeading::set_subtext(const std::string& value) {
  _internal_set_subtext(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedHeading.subtext)
}
inline std::string* EmbedHeading::mutable_subtext() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedHeading.subtext)
  return _internal_mutable_subtext();
}
inline const std::string& EmbedHeading::_internal_subtext() const {
  return subtext_.Get();
}
inline void EmbedHeading::_internal_set_subtext(const std::string& value) {
  
  subtext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedHeading::set_subtext(std::string&& value) {
  
  subtext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedHeading.subtext)
}
inline void EmbedHeading::set_subtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedHeading.subtext)
}
inline void EmbedHeading::set_subtext(const char* value,
    size_t size) {
  
  subtext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedHeading.subtext)
}
inline std::string* EmbedHeading::_internal_mutable_subtext() {
  
  return subtext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedHeading::release_subtext() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedHeading.subtext)
  return subtext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedHeading::set_allocated_subtext(std::string* subtext) {
  if (subtext != nullptr) {
    
  } else {
    
  }
  subtext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtext,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedHeading.subtext)
}
inline std::string* EmbedHeading::unsafe_arena_release_subtext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedHeading.subtext)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subtext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedHeading::unsafe_arena_set_allocated_subtext(
    std::string* subtext) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subtext != nullptr) {
    
  } else {
    
  }
  subtext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subtext, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedHeading.subtext)
}

// string url = 3;
inline void EmbedHeading::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedHeading::url() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedHeading.url)
  return _internal_url();
}
inline void EmbedHeading::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedHeading.url)
}
inline std::string* EmbedHeading::mutable_url() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedHeading.url)
  return _internal_mutable_url();
}
inline const std::string& EmbedHeading::_internal_url() const {
  return url_.Get();
}
inline void EmbedHeading::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedHeading::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedHeading.url)
}
inline void EmbedHeading::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedHeading.url)
}
inline void EmbedHeading::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedHeading.url)
}
inline std::string* EmbedHeading::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedHeading::release_url() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedHeading.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedHeading::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedHeading.url)
}
inline std::string* EmbedHeading::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedHeading.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedHeading::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedHeading.url)
}

// string icon = 4;
inline void EmbedHeading::clear_icon() {
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedHeading::icon() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedHeading.icon)
  return _internal_icon();
}
inline void EmbedHeading::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedHeading.icon)
}
inline std::string* EmbedHeading::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedHeading.icon)
  return _internal_mutable_icon();
}
inline const std::string& EmbedHeading::_internal_icon() const {
  return icon_.Get();
}
inline void EmbedHeading::_internal_set_icon(const std::string& value) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedHeading::set_icon(std::string&& value) {
  
  icon_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedHeading.icon)
}
inline void EmbedHeading::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedHeading.icon)
}
inline void EmbedHeading::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedHeading.icon)
}
inline std::string* EmbedHeading::_internal_mutable_icon() {
  
  return icon_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedHeading::release_icon() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedHeading.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedHeading::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedHeading.icon)
}
inline std::string* EmbedHeading::unsafe_arena_release_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedHeading.icon)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return icon_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedHeading::unsafe_arena_set_allocated_icon(
    std::string* icon) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      icon, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedHeading.icon)
}

// -------------------------------------------------------------------

// EmbedField

// string title = 1;
inline void EmbedField::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedField::title() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.title)
  return _internal_title();
}
inline void EmbedField::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedField.title)
}
inline std::string* EmbedField::mutable_title() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedField.title)
  return _internal_mutable_title();
}
inline const std::string& EmbedField::_internal_title() const {
  return title_.Get();
}
inline void EmbedField::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedField::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedField.title)
}
inline void EmbedField::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedField.title)
}
inline void EmbedField::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedField.title)
}
inline std::string* EmbedField::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedField::release_title() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedField.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedField::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedField.title)
}
inline std::string* EmbedField::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedField.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedField::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedField.title)
}

// string subtitle = 2;
inline void EmbedField::clear_subtitle() {
  subtitle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedField::subtitle() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.subtitle)
  return _internal_subtitle();
}
inline void EmbedField::set_subtitle(const std::string& value) {
  _internal_set_subtitle(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedField.subtitle)
}
inline std::string* EmbedField::mutable_subtitle() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedField.subtitle)
  return _internal_mutable_subtitle();
}
inline const std::string& EmbedField::_internal_subtitle() const {
  return subtitle_.Get();
}
inline void EmbedField::_internal_set_subtitle(const std::string& value) {
  
  subtitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedField::set_subtitle(std::string&& value) {
  
  subtitle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedField.subtitle)
}
inline void EmbedField::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subtitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedField.subtitle)
}
inline void EmbedField::set_subtitle(const char* value,
    size_t size) {
  
  subtitle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedField.subtitle)
}
inline std::string* EmbedField::_internal_mutable_subtitle() {
  
  return subtitle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedField::release_subtitle() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedField.subtitle)
  return subtitle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedField::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  subtitle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtitle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedField.subtitle)
}
inline std::string* EmbedField::unsafe_arena_release_subtitle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedField.subtitle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subtitle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedField::unsafe_arena_set_allocated_subtitle(
    std::string* subtitle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subtitle != nullptr) {
    
  } else {
    
  }
  subtitle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subtitle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedField.subtitle)
}

// string body = 3;
inline void EmbedField::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedField::body() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.body)
  return _internal_body();
}
inline void EmbedField::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedField.body)
}
inline std::string* EmbedField::mutable_body() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedField.body)
  return _internal_mutable_body();
}
inline const std::string& EmbedField::_internal_body() const {
  return body_.Get();
}
inline void EmbedField::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedField::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedField.body)
}
inline void EmbedField::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedField.body)
}
inline void EmbedField::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedField.body)
}
inline std::string* EmbedField::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedField::release_body() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedField.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedField::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedField.body)
}
inline std::string* EmbedField::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedField.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedField::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedField.body)
}

// string image_url = 4;
inline void EmbedField::clear_image_url() {
  image_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmbedField::image_url() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.image_url)
  return _internal_image_url();
}
inline void EmbedField::set_image_url(const std::string& value) {
  _internal_set_image_url(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedField.image_url)
}
inline std::string* EmbedField::mutable_image_url() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedField.image_url)
  return _internal_mutable_image_url();
}
inline const std::string& EmbedField::_internal_image_url() const {
  return image_url_.Get();
}
inline void EmbedField::_internal_set_image_url(const std::string& value) {
  
  image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmbedField::set_image_url(std::string&& value) {
  
  image_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.EmbedField.image_url)
}
inline void EmbedField::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.EmbedField.image_url)
}
inline void EmbedField::set_image_url(const char* value,
    size_t size) {
  
  image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.EmbedField.image_url)
}
inline std::string* EmbedField::_internal_mutable_image_url() {
  
  return image_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmbedField::release_image_url() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.EmbedField.image_url)
  return image_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmbedField::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    
  } else {
    
  }
  image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.EmbedField.image_url)
}
inline std::string* EmbedField::unsafe_arena_release_image_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.EmbedField.image_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EmbedField::unsafe_arena_set_allocated_image_url(
    std::string* image_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_url != nullptr) {
    
  } else {
    
  }
  image_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.EmbedField.image_url)
}

// .protocol.harmonytypes.v1.FieldPresentation presentation = 5;
inline void EmbedField::clear_presentation() {
  presentation_ = 0;
}
inline ::protocol::harmonytypes::v1::FieldPresentation EmbedField::_internal_presentation() const {
  return static_cast< ::protocol::harmonytypes::v1::FieldPresentation >(presentation_);
}
inline ::protocol::harmonytypes::v1::FieldPresentation EmbedField::presentation() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.presentation)
  return _internal_presentation();
}
inline void EmbedField::_internal_set_presentation(::protocol::harmonytypes::v1::FieldPresentation value) {
  
  presentation_ = value;
}
inline void EmbedField::set_presentation(::protocol::harmonytypes::v1::FieldPresentation value) {
  _internal_set_presentation(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.EmbedField.presentation)
}

// repeated .protocol.harmonytypes.v1.Action actions = 6;
inline int EmbedField::_internal_actions_size() const {
  return actions_.size();
}
inline int EmbedField::actions_size() const {
  return _internal_actions_size();
}
inline void EmbedField::clear_actions() {
  actions_.Clear();
}
inline ::protocol::harmonytypes::v1::Action* EmbedField::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.EmbedField.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
EmbedField::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.EmbedField.actions)
  return &actions_;
}
inline const ::protocol::harmonytypes::v1::Action& EmbedField::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& EmbedField::actions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.EmbedField.actions)
  return _internal_actions(index);
}
inline ::protocol::harmonytypes::v1::Action* EmbedField::_internal_add_actions() {
  return actions_.Add();
}
inline ::protocol::harmonytypes::v1::Action* EmbedField::add_actions() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.EmbedField.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
EmbedField::actions() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.EmbedField.actions)
  return actions_;
}

// -------------------------------------------------------------------

// Embed

// string title = 1;
inline void Embed::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Embed::title() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.title)
  return _internal_title();
}
inline void Embed::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Embed.title)
}
inline std::string* Embed::mutable_title() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.title)
  return _internal_mutable_title();
}
inline const std::string& Embed::_internal_title() const {
  return title_.Get();
}
inline void Embed::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embed::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Embed.title)
}
inline void Embed::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Embed.title)
}
inline void Embed::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Embed.title)
}
inline std::string* Embed::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embed::release_title() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Embed.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embed::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Embed.title)
}
inline std::string* Embed::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Embed.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embed::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Embed.title)
}

// string body = 2;
inline void Embed::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Embed::body() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.body)
  return _internal_body();
}
inline void Embed::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Embed.body)
}
inline std::string* Embed::mutable_body() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.body)
  return _internal_mutable_body();
}
inline const std::string& Embed::_internal_body() const {
  return body_.Get();
}
inline void Embed::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Embed::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Embed.body)
}
inline void Embed::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Embed.body)
}
inline void Embed::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Embed.body)
}
inline std::string* Embed::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Embed::release_body() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Embed.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Embed::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Embed.body)
}
inline std::string* Embed::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Embed.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Embed::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Embed.body)
}

// int64 color = 3;
inline void Embed::clear_color() {
  color_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Embed::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Embed::color() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.color)
  return _internal_color();
}
inline void Embed::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  color_ = value;
}
inline void Embed::set_color(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Embed.color)
}

// .protocol.harmonytypes.v1.EmbedHeading header = 4;
inline bool Embed::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Embed::has_header() const {
  return _internal_has_header();
}
inline void Embed::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::protocol::harmonytypes::v1::EmbedHeading& Embed::_internal_header() const {
  const ::protocol::harmonytypes::v1::EmbedHeading* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::EmbedHeading*>(
      &::protocol::harmonytypes::v1::_EmbedHeading_default_instance_);
}
inline const ::protocol::harmonytypes::v1::EmbedHeading& Embed::header() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.header)
  return _internal_header();
}
inline void Embed::unsafe_arena_set_allocated_header(
    ::protocol::harmonytypes::v1::EmbedHeading* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Embed.header)
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Embed.header)
  
  ::protocol::harmonytypes::v1::EmbedHeading* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::EmbedHeading>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.header)
  return _internal_mutable_header();
}
inline void Embed::set_allocated_header(::protocol::harmonytypes::v1::EmbedHeading* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Embed.header)
}

// .protocol.harmonytypes.v1.EmbedHeading footer = 5;
inline bool Embed::_internal_has_footer() const {
  return this != internal_default_instance() && footer_ != nullptr;
}
inline bool Embed::has_footer() const {
  return _internal_has_footer();
}
inline void Embed::clear_footer() {
  if (GetArena() == nullptr && footer_ != nullptr) {
    delete footer_;
  }
  footer_ = nullptr;
}
inline const ::protocol::harmonytypes::v1::EmbedHeading& Embed::_internal_footer() const {
  const ::protocol::harmonytypes::v1::EmbedHeading* p = footer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::EmbedHeading*>(
      &::protocol::harmonytypes::v1::_EmbedHeading_default_instance_);
}
inline const ::protocol::harmonytypes::v1::EmbedHeading& Embed::footer() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.footer)
  return _internal_footer();
}
inline void Embed::unsafe_arena_set_allocated_footer(
    ::protocol::harmonytypes::v1::EmbedHeading* footer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_);
  }
  footer_ = footer;
  if (footer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Embed.footer)
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::release_footer() {
  auto temp = unsafe_arena_release_footer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::unsafe_arena_release_footer() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Embed.footer)
  
  ::protocol::harmonytypes::v1::EmbedHeading* temp = footer_;
  footer_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::_internal_mutable_footer() {
  
  if (footer_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::EmbedHeading>(GetArena());
    footer_ = p;
  }
  return footer_;
}
inline ::protocol::harmonytypes::v1::EmbedHeading* Embed::mutable_footer() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.footer)
  return _internal_mutable_footer();
}
inline void Embed::set_allocated_footer(::protocol::harmonytypes::v1::EmbedHeading* footer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footer_;
  }
  if (footer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footer);
    if (message_arena != submessage_arena) {
      footer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer, submessage_arena);
    }
    
  } else {
    
  }
  footer_ = footer;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Embed.footer)
}

// repeated .protocol.harmonytypes.v1.EmbedField fields = 6;
inline int Embed::_internal_fields_size() const {
  return fields_.size();
}
inline int Embed::fields_size() const {
  return _internal_fields_size();
}
inline void Embed::clear_fields() {
  fields_.Clear();
}
inline ::protocol::harmonytypes::v1::EmbedField* Embed::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::EmbedField >*
Embed::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Embed.fields)
  return &fields_;
}
inline const ::protocol::harmonytypes::v1::EmbedField& Embed::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::protocol::harmonytypes::v1::EmbedField& Embed::fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.fields)
  return _internal_fields(index);
}
inline ::protocol::harmonytypes::v1::EmbedField* Embed::_internal_add_fields() {
  return fields_.Add();
}
inline ::protocol::harmonytypes::v1::EmbedField* Embed::add_fields() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Embed.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::EmbedField >&
Embed::fields() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Embed.fields)
  return fields_;
}

// repeated .protocol.harmonytypes.v1.Action actions = 7;
inline int Embed::_internal_actions_size() const {
  return actions_.size();
}
inline int Embed::actions_size() const {
  return _internal_actions_size();
}
inline void Embed::clear_actions() {
  actions_.Clear();
}
inline ::protocol::harmonytypes::v1::Action* Embed::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Embed.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
Embed::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Embed.actions)
  return &actions_;
}
inline const ::protocol::harmonytypes::v1::Action& Embed::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& Embed::actions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Embed.actions)
  return _internal_actions(index);
}
inline ::protocol::harmonytypes::v1::Action* Embed::_internal_add_actions() {
  return actions_.Add();
}
inline ::protocol::harmonytypes::v1::Action* Embed::add_actions() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Embed.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
Embed::actions() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Embed.actions)
  return actions_;
}

// -------------------------------------------------------------------

// Attachment

// string id = 1;
inline void Attachment::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attachment::id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Attachment.id)
  return _internal_id();
}
inline void Attachment::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Attachment.id)
}
inline std::string* Attachment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Attachment.id)
  return _internal_mutable_id();
}
inline const std::string& Attachment::_internal_id() const {
  return id_.Get();
}
inline void Attachment::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attachment::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Attachment.id)
}
inline void Attachment::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Attachment.id)
}
inline void Attachment::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Attachment.id)
}
inline std::string* Attachment::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attachment::release_id() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Attachment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attachment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Attachment.id)
}
inline std::string* Attachment::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Attachment.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attachment::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Attachment.id)
}

// string name = 2;
inline void Attachment::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attachment::name() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Attachment.name)
  return _internal_name();
}
inline void Attachment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Attachment.name)
}
inline std::string* Attachment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Attachment.name)
  return _internal_mutable_name();
}
inline const std::string& Attachment::_internal_name() const {
  return name_.Get();
}
inline void Attachment::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attachment::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Attachment.name)
}
inline void Attachment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Attachment.name)
}
inline void Attachment::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Attachment.name)
}
inline std::string* Attachment::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attachment::release_name() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Attachment.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attachment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Attachment.name)
}
inline std::string* Attachment::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Attachment.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attachment::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Attachment.name)
}

// string type = 3;
inline void Attachment::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Attachment::type() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Attachment.type)
  return _internal_type();
}
inline void Attachment::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Attachment.type)
}
inline std::string* Attachment::mutable_type() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Attachment.type)
  return _internal_mutable_type();
}
inline const std::string& Attachment::_internal_type() const {
  return type_.Get();
}
inline void Attachment::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Attachment::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Attachment.type)
}
inline void Attachment::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Attachment.type)
}
inline void Attachment::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Attachment.type)
}
inline std::string* Attachment::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Attachment::release_type() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Attachment.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Attachment::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Attachment.type)
}
inline std::string* Attachment::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Attachment.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Attachment::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Attachment.type)
}

// int32 size = 4;
inline void Attachment::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attachment::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attachment::size() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Attachment.size)
  return _internal_size();
}
inline void Attachment::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Attachment::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Attachment.size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// string kind = 1;
inline void Metadata::clear_kind() {
  kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Metadata::kind() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Metadata.kind)
  return _internal_kind();
}
inline void Metadata::set_kind(const std::string& value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Metadata.kind)
}
inline std::string* Metadata::mutable_kind() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Metadata.kind)
  return _internal_mutable_kind();
}
inline const std::string& Metadata::_internal_kind() const {
  return kind_.Get();
}
inline void Metadata::_internal_set_kind(const std::string& value) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Metadata::set_kind(std::string&& value) {
  
  kind_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Metadata.kind)
}
inline void Metadata::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Metadata.kind)
}
inline void Metadata::set_kind(const char* value,
    size_t size) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Metadata.kind)
}
inline std::string* Metadata::_internal_mutable_kind() {
  
  return kind_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Metadata::release_kind() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Metadata.kind)
  return kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metadata::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Metadata.kind)
}
inline std::string* Metadata::unsafe_arena_release_kind() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Metadata.kind)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kind_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Metadata::unsafe_arena_set_allocated_kind(
    std::string* kind) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kind, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Metadata.kind)
}

// map<string, .google.protobuf.Any> extension = 2;
inline int Metadata::_internal_extension_size() const {
  return extension_.size();
}
inline int Metadata::extension_size() const {
  return _internal_extension_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
Metadata::_internal_extension() const {
  return extension_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >&
Metadata::extension() const {
  // @@protoc_insertion_point(field_map:protocol.harmonytypes.v1.Metadata.extension)
  return _internal_extension();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
Metadata::_internal_mutable_extension() {
  return extension_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Any >*
Metadata::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_map:protocol.harmonytypes.v1.Metadata.extension)
  return _internal_mutable_extension();
}

// -------------------------------------------------------------------

// Message

// .protocol.harmonytypes.v1.Metadata metadata = 13;
inline bool Message::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Message::has_metadata() const {
  return _internal_has_metadata();
}
inline void Message::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::protocol::harmonytypes::v1::Metadata& Message::_internal_metadata() const {
  const ::protocol::harmonytypes::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Metadata*>(
      &::protocol::harmonytypes::v1::_Metadata_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Metadata& Message::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.metadata)
  return _internal_metadata();
}
inline void Message::unsafe_arena_set_allocated_metadata(
    ::protocol::harmonytypes::v1::Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Message.metadata)
}
inline ::protocol::harmonytypes::v1::Metadata* Message::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Message::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Message.metadata)
  
  ::protocol::harmonytypes::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Metadata* Message::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::harmonytypes::v1::Metadata* Message::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.metadata)
  return _internal_mutable_metadata();
}
inline void Message::set_allocated_metadata(::protocol::harmonytypes::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Message.metadata)
}

// uint64 guild_id = 1 [jstype = JS_STRING];
inline void Message::clear_guild_id() {
  guild_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::guild_id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.guild_id)
  return _internal_guild_id();
}
inline void Message::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guild_id_ = value;
}
inline void Message::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.guild_id)
}

// uint64 channel_id = 2 [jstype = JS_STRING];
inline void Message::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.channel_id)
  return _internal_channel_id();
}
inline void Message::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Message::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.channel_id)
}

// uint64 message_id = 3 [jstype = JS_STRING];
inline void Message::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::message_id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.message_id)
  return _internal_message_id();
}
inline void Message::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void Message::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.message_id)
}

// uint64 author_id = 4 [jstype = JS_STRING];
inline void Message::clear_author_id() {
  author_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_author_id() const {
  return author_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::author_id() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.author_id)
  return _internal_author_id();
}
inline void Message::_internal_set_author_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  author_id_ = value;
}
inline void Message::set_author_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_author_id(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.author_id)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool Message::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Message::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::created_at() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.created_at)
  return _internal_created_at();
}
inline void Message::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Message.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_created_at() {
  auto temp = unsafe_arena_release_created_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Message.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.created_at)
  return _internal_mutable_created_at();
}
inline void Message::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Message.created_at)
}

// .google.protobuf.Timestamp edited_at = 6;
inline bool Message::_internal_has_edited_at() const {
  return this != internal_default_instance() && edited_at_ != nullptr;
}
inline bool Message::has_edited_at() const {
  return _internal_has_edited_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_edited_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edited_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::edited_at() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.edited_at)
  return _internal_edited_at();
}
inline void Message::unsafe_arena_set_allocated_edited_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* edited_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at_);
  }
  edited_at_ = edited_at;
  if (edited_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Message.edited_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_edited_at() {
  auto temp = unsafe_arena_release_edited_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_edited_at() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Message.edited_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edited_at_;
  edited_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_edited_at() {
  
  if (edited_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edited_at_ = p;
  }
  return edited_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_edited_at() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.edited_at)
  return _internal_mutable_edited_at();
}
inline void Message::set_allocated_edited_at(PROTOBUF_NAMESPACE_ID::Timestamp* edited_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at_);
  }
  if (edited_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edited_at)->GetArena();
    if (message_arena != submessage_arena) {
      edited_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edited_at, submessage_arena);
    }
    
  } else {
    
  }
  edited_at_ = edited_at;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Message.edited_at)
}

// string content = 7;
inline void Message::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.content)
  return _internal_content();
}
inline void Message::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.content)
}
inline std::string* Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.content)
  return _internal_mutable_content();
}
inline const std::string& Message::_internal_content() const {
  return content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.harmonytypes.v1.Message.content)
}
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.harmonytypes.v1.Message.content)
}
inline void Message::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.harmonytypes.v1.Message.content)
}
inline std::string* Message::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Message.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Message.content)
}
inline std::string* Message::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.harmonytypes.v1.Message.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Message.content)
}

// repeated .protocol.harmonytypes.v1.Embed embeds = 8;
inline int Message::_internal_embeds_size() const {
  return embeds_.size();
}
inline int Message::embeds_size() const {
  return _internal_embeds_size();
}
inline void Message::clear_embeds() {
  embeds_.Clear();
}
inline ::protocol::harmonytypes::v1::Embed* Message::mutable_embeds(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.embeds)
  return embeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >*
Message::mutable_embeds() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Message.embeds)
  return &embeds_;
}
inline const ::protocol::harmonytypes::v1::Embed& Message::_internal_embeds(int index) const {
  return embeds_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Embed& Message::embeds(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.embeds)
  return _internal_embeds(index);
}
inline ::protocol::harmonytypes::v1::Embed* Message::_internal_add_embeds() {
  return embeds_.Add();
}
inline ::protocol::harmonytypes::v1::Embed* Message::add_embeds() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Message.embeds)
  return _internal_add_embeds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Embed >&
Message::embeds() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Message.embeds)
  return embeds_;
}

// repeated .protocol.harmonytypes.v1.Action actions = 9;
inline int Message::_internal_actions_size() const {
  return actions_.size();
}
inline int Message::actions_size() const {
  return _internal_actions_size();
}
inline void Message::clear_actions() {
  actions_.Clear();
}
inline ::protocol::harmonytypes::v1::Action* Message::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >*
Message::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Message.actions)
  return &actions_;
}
inline const ::protocol::harmonytypes::v1::Action& Message::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Action& Message::actions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.actions)
  return _internal_actions(index);
}
inline ::protocol::harmonytypes::v1::Action* Message::_internal_add_actions() {
  return actions_.Add();
}
inline ::protocol::harmonytypes::v1::Action* Message::add_actions() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Message.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Action >&
Message::actions() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Message.actions)
  return actions_;
}

// repeated .protocol.harmonytypes.v1.Attachment attachments = 10;
inline int Message::_internal_attachments_size() const {
  return attachments_.size();
}
inline int Message::attachments_size() const {
  return _internal_attachments_size();
}
inline void Message::clear_attachments() {
  attachments_.Clear();
}
inline ::protocol::harmonytypes::v1::Attachment* Message::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.attachments)
  return attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Attachment >*
Message::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:protocol.harmonytypes.v1.Message.attachments)
  return &attachments_;
}
inline const ::protocol::harmonytypes::v1::Attachment& Message::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const ::protocol::harmonytypes::v1::Attachment& Message::attachments(int index) const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.attachments)
  return _internal_attachments(index);
}
inline ::protocol::harmonytypes::v1::Attachment* Message::_internal_add_attachments() {
  return attachments_.Add();
}
inline ::protocol::harmonytypes::v1::Attachment* Message::add_attachments() {
  // @@protoc_insertion_point(field_add:protocol.harmonytypes.v1.Message.attachments)
  return _internal_add_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::harmonytypes::v1::Attachment >&
Message::attachments() const {
  // @@protoc_insertion_point(field_list:protocol.harmonytypes.v1.Message.attachments)
  return attachments_;
}

// uint64 in_reply_to = 11 [jstype = JS_STRING];
inline void Message::clear_in_reply_to() {
  in_reply_to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_in_reply_to() const {
  return in_reply_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::in_reply_to() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.in_reply_to)
  return _internal_in_reply_to();
}
inline void Message::_internal_set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  in_reply_to_ = value;
}
inline void Message::set_in_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_in_reply_to(value);
  // @@protoc_insertion_point(field_set:protocol.harmonytypes.v1.Message.in_reply_to)
}

// .protocol.harmonytypes.v1.Override overrides = 12;
inline bool Message::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool Message::has_overrides() const {
  return _internal_has_overrides();
}
inline void Message::clear_overrides() {
  if (GetArena() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
inline const ::protocol::harmonytypes::v1::Override& Message::_internal_overrides() const {
  const ::protocol::harmonytypes::v1::Override* p = overrides_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::harmonytypes::v1::Override*>(
      &::protocol::harmonytypes::v1::_Override_default_instance_);
}
inline const ::protocol::harmonytypes::v1::Override& Message::overrides() const {
  // @@protoc_insertion_point(field_get:protocol.harmonytypes.v1.Message.overrides)
  return _internal_overrides();
}
inline void Message::unsafe_arena_set_allocated_overrides(
    ::protocol::harmonytypes::v1::Override* overrides) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.harmonytypes.v1.Message.overrides)
}
inline ::protocol::harmonytypes::v1::Override* Message::release_overrides() {
  auto temp = unsafe_arena_release_overrides();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* Message::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:protocol.harmonytypes.v1.Message.overrides)
  
  ::protocol::harmonytypes::v1::Override* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::protocol::harmonytypes::v1::Override* Message::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::harmonytypes::v1::Override>(GetArena());
    overrides_ = p;
  }
  return overrides_;
}
inline ::protocol::harmonytypes::v1::Override* Message::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable:protocol.harmonytypes.v1.Message.overrides)
  return _internal_mutable_overrides();
}
inline void Message::set_allocated_overrides(::protocol::harmonytypes::v1::Override* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overrides_;
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overrides);
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:protocol.harmonytypes.v1.Message.overrides)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace harmonytypes
}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::harmonytypes::v1::UserStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::harmonytypes::v1::UserStatus>() {
  return ::protocol::harmonytypes::v1::UserStatus_descriptor();
}
template <> struct is_proto_enum< ::protocol::harmonytypes::v1::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::harmonytypes::v1::ActionType>() {
  return ::protocol::harmonytypes::v1::ActionType_descriptor();
}
template <> struct is_proto_enum< ::protocol::harmonytypes::v1::ActionPresentation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::harmonytypes::v1::ActionPresentation>() {
  return ::protocol::harmonytypes::v1::ActionPresentation_descriptor();
}
template <> struct is_proto_enum< ::protocol::harmonytypes::v1::FieldPresentation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::harmonytypes::v1::FieldPresentation>() {
  return ::protocol::harmonytypes::v1::FieldPresentation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_harmonytypes_2fv1_2ftypes_2eproto
