// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediaproxy/v1/mediaproxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediaproxy_2fv1_2fmediaproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediaproxy_2fv1_2fmediaproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "harmonytypes/v1/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediaproxy_2fv1_2fmediaproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto;
namespace protocol {
namespace mediaproxy {
namespace v1 {
class CanInstantViewResponse;
class CanInstantViewResponseDefaultTypeInternal;
extern CanInstantViewResponseDefaultTypeInternal _CanInstantViewResponse_default_instance_;
class FetchLinkMetadataRequest;
class FetchLinkMetadataRequestDefaultTypeInternal;
extern FetchLinkMetadataRequestDefaultTypeInternal _FetchLinkMetadataRequest_default_instance_;
class InstantViewRequest;
class InstantViewRequestDefaultTypeInternal;
extern InstantViewRequestDefaultTypeInternal _InstantViewRequest_default_instance_;
class InstantViewResponse;
class InstantViewResponseDefaultTypeInternal;
extern InstantViewResponseDefaultTypeInternal _InstantViewResponse_default_instance_;
class SiteMetadata;
class SiteMetadataDefaultTypeInternal;
extern SiteMetadataDefaultTypeInternal _SiteMetadata_default_instance_;
}  // namespace v1
}  // namespace mediaproxy
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::mediaproxy::v1::CanInstantViewResponse* Arena::CreateMaybeMessage<::protocol::mediaproxy::v1::CanInstantViewResponse>(Arena*);
template<> ::protocol::mediaproxy::v1::FetchLinkMetadataRequest* Arena::CreateMaybeMessage<::protocol::mediaproxy::v1::FetchLinkMetadataRequest>(Arena*);
template<> ::protocol::mediaproxy::v1::InstantViewRequest* Arena::CreateMaybeMessage<::protocol::mediaproxy::v1::InstantViewRequest>(Arena*);
template<> ::protocol::mediaproxy::v1::InstantViewResponse* Arena::CreateMaybeMessage<::protocol::mediaproxy::v1::InstantViewResponse>(Arena*);
template<> ::protocol::mediaproxy::v1::SiteMetadata* Arena::CreateMaybeMessage<::protocol::mediaproxy::v1::SiteMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace mediaproxy {
namespace v1 {

// ===================================================================

class SiteMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mediaproxy.v1.SiteMetadata) */ {
 public:
  inline SiteMetadata() : SiteMetadata(nullptr) {};
  virtual ~SiteMetadata();

  SiteMetadata(const SiteMetadata& from);
  SiteMetadata(SiteMetadata&& from) noexcept
    : SiteMetadata() {
    *this = ::std::move(from);
  }

  inline SiteMetadata& operator=(const SiteMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteMetadata& operator=(SiteMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiteMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteMetadata* internal_default_instance() {
    return reinterpret_cast<const SiteMetadata*>(
               &_SiteMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteMetadata& a, SiteMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteMetadata* New() const final {
    return CreateMaybeMessage<SiteMetadata>(nullptr);
  }

  SiteMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiteMetadata& from);
  void MergeFrom(const SiteMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mediaproxy.v1.SiteMetadata";
  }
  protected:
  explicit SiteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto);
    return ::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteTitleFieldNumber = 1,
    kPageTitleFieldNumber = 2,
    kKindFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kUrlFieldNumber = 5,
    kImageFieldNumber = 6,
  };
  // string site_title = 1;
  void clear_site_title();
  const std::string& site_title() const;
  void set_site_title(const std::string& value);
  void set_site_title(std::string&& value);
  void set_site_title(const char* value);
  void set_site_title(const char* value, size_t size);
  std::string* mutable_site_title();
  std::string* release_site_title();
  void set_allocated_site_title(std::string* site_title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_title(
      std::string* site_title);
  private:
  const std::string& _internal_site_title() const;
  void _internal_set_site_title(const std::string& value);
  std::string* _internal_mutable_site_title();
  public:

  // string page_title = 2;
  void clear_page_title();
  const std::string& page_title() const;
  void set_page_title(const std::string& value);
  void set_page_title(std::string&& value);
  void set_page_title(const char* value);
  void set_page_title(const char* value, size_t size);
  std::string* mutable_page_title();
  std::string* release_page_title();
  void set_allocated_page_title(std::string* page_title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_title(
      std::string* page_title);
  private:
  const std::string& _internal_page_title() const;
  void _internal_set_page_title(const std::string& value);
  std::string* _internal_mutable_page_title();
  public:

  // string kind = 3;
  void clear_kind();
  const std::string& kind() const;
  void set_kind(const std::string& value);
  void set_kind(std::string&& value);
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  std::string* mutable_kind();
  std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kind();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kind(
      std::string* kind);
  private:
  const std::string& _internal_kind() const;
  void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 5;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string image = 6;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:protocol.mediaproxy.v1.SiteMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto;
};
// -------------------------------------------------------------------

class FetchLinkMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mediaproxy.v1.FetchLinkMetadataRequest) */ {
 public:
  inline FetchLinkMetadataRequest() : FetchLinkMetadataRequest(nullptr) {};
  virtual ~FetchLinkMetadataRequest();

  FetchLinkMetadataRequest(const FetchLinkMetadataRequest& from);
  FetchLinkMetadataRequest(FetchLinkMetadataRequest&& from) noexcept
    : FetchLinkMetadataRequest() {
    *this = ::std::move(from);
  }

  inline FetchLinkMetadataRequest& operator=(const FetchLinkMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLinkMetadataRequest& operator=(FetchLinkMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FetchLinkMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FetchLinkMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const FetchLinkMetadataRequest*>(
               &_FetchLinkMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FetchLinkMetadataRequest& a, FetchLinkMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLinkMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchLinkMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLinkMetadataRequest* New() const final {
    return CreateMaybeMessage<FetchLinkMetadataRequest>(nullptr);
  }

  FetchLinkMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLinkMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FetchLinkMetadataRequest& from);
  void MergeFrom(const FetchLinkMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLinkMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mediaproxy.v1.FetchLinkMetadataRequest";
  }
  protected:
  explicit FetchLinkMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto);
    return ::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto;
};
// -------------------------------------------------------------------

class InstantViewRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mediaproxy.v1.InstantViewRequest) */ {
 public:
  inline InstantViewRequest() : InstantViewRequest(nullptr) {};
  virtual ~InstantViewRequest();

  InstantViewRequest(const InstantViewRequest& from);
  InstantViewRequest(InstantViewRequest&& from) noexcept
    : InstantViewRequest() {
    *this = ::std::move(from);
  }

  inline InstantViewRequest& operator=(const InstantViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantViewRequest& operator=(InstantViewRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstantViewRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstantViewRequest* internal_default_instance() {
    return reinterpret_cast<const InstantViewRequest*>(
               &_InstantViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstantViewRequest& a, InstantViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantViewRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstantViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstantViewRequest* New() const final {
    return CreateMaybeMessage<InstantViewRequest>(nullptr);
  }

  InstantViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstantViewRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstantViewRequest& from);
  void MergeFrom(const InstantViewRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantViewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mediaproxy.v1.InstantViewRequest";
  }
  protected:
  explicit InstantViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto);
    return ::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:protocol.mediaproxy.v1.InstantViewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto;
};
// -------------------------------------------------------------------

class InstantViewResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mediaproxy.v1.InstantViewResponse) */ {
 public:
  inline InstantViewResponse() : InstantViewResponse(nullptr) {};
  virtual ~InstantViewResponse();

  InstantViewResponse(const InstantViewResponse& from);
  InstantViewResponse(InstantViewResponse&& from) noexcept
    : InstantViewResponse() {
    *this = ::std::move(from);
  }

  inline InstantViewResponse& operator=(const InstantViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstantViewResponse& operator=(InstantViewResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstantViewResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstantViewResponse* internal_default_instance() {
    return reinterpret_cast<const InstantViewResponse*>(
               &_InstantViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InstantViewResponse& a, InstantViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InstantViewResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstantViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstantViewResponse* New() const final {
    return CreateMaybeMessage<InstantViewResponse>(nullptr);
  }

  InstantViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstantViewResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstantViewResponse& from);
  void MergeFrom(const InstantViewResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstantViewResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mediaproxy.v1.InstantViewResponse";
  }
  protected:
  explicit InstantViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto);
    return ::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kMetadataFieldNumber = 1,
    kIsValidFieldNumber = 3,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .protocol.mediaproxy.v1.SiteMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::protocol::mediaproxy::v1::SiteMetadata& metadata() const;
  ::protocol::mediaproxy::v1::SiteMetadata* release_metadata();
  ::protocol::mediaproxy::v1::SiteMetadata* mutable_metadata();
  void set_allocated_metadata(::protocol::mediaproxy::v1::SiteMetadata* metadata);
  private:
  const ::protocol::mediaproxy::v1::SiteMetadata& _internal_metadata() const;
  ::protocol::mediaproxy::v1::SiteMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::protocol::mediaproxy::v1::SiteMetadata* metadata);
  ::protocol::mediaproxy::v1::SiteMetadata* unsafe_arena_release_metadata();

  // bool is_valid = 3;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mediaproxy.v1.InstantViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::protocol::mediaproxy::v1::SiteMetadata* metadata_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto;
};
// -------------------------------------------------------------------

class CanInstantViewResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.mediaproxy.v1.CanInstantViewResponse) */ {
 public:
  inline CanInstantViewResponse() : CanInstantViewResponse(nullptr) {};
  virtual ~CanInstantViewResponse();

  CanInstantViewResponse(const CanInstantViewResponse& from);
  CanInstantViewResponse(CanInstantViewResponse&& from) noexcept
    : CanInstantViewResponse() {
    *this = ::std::move(from);
  }

  inline CanInstantViewResponse& operator=(const CanInstantViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanInstantViewResponse& operator=(CanInstantViewResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanInstantViewResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanInstantViewResponse* internal_default_instance() {
    return reinterpret_cast<const CanInstantViewResponse*>(
               &_CanInstantViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CanInstantViewResponse& a, CanInstantViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CanInstantViewResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanInstantViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanInstantViewResponse* New() const final {
    return CreateMaybeMessage<CanInstantViewResponse>(nullptr);
  }

  CanInstantViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanInstantViewResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanInstantViewResponse& from);
  void MergeFrom(const CanInstantViewResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanInstantViewResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.mediaproxy.v1.CanInstantViewResponse";
  }
  protected:
  explicit CanInstantViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto);
    return ::descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanInstantViewFieldNumber = 1,
  };
  // bool can_instant_view = 1;
  void clear_can_instant_view();
  bool can_instant_view() const;
  void set_can_instant_view(bool value);
  private:
  bool _internal_can_instant_view() const;
  void _internal_set_can_instant_view(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.mediaproxy.v1.CanInstantViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool can_instant_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteMetadata

// string site_title = 1;
inline void SiteMetadata::clear_site_title() {
  site_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::site_title() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.site_title)
  return _internal_site_title();
}
inline void SiteMetadata::set_site_title(const std::string& value) {
  _internal_set_site_title(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.site_title)
}
inline std::string* SiteMetadata::mutable_site_title() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.site_title)
  return _internal_mutable_site_title();
}
inline const std::string& SiteMetadata::_internal_site_title() const {
  return site_title_.Get();
}
inline void SiteMetadata::_internal_set_site_title(const std::string& value) {
  
  site_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_site_title(std::string&& value) {
  
  site_title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.site_title)
}
inline void SiteMetadata::set_site_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.site_title)
}
inline void SiteMetadata::set_site_title(const char* value,
    size_t size) {
  
  site_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.site_title)
}
inline std::string* SiteMetadata::_internal_mutable_site_title() {
  
  return site_title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_site_title() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.site_title)
  return site_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_site_title(std::string* site_title) {
  if (site_title != nullptr) {
    
  } else {
    
  }
  site_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.site_title)
}
inline std::string* SiteMetadata::unsafe_arena_release_site_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.site_title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_site_title(
    std::string* site_title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_title != nullptr) {
    
  } else {
    
  }
  site_title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.site_title)
}

// string page_title = 2;
inline void SiteMetadata::clear_page_title() {
  page_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::page_title() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.page_title)
  return _internal_page_title();
}
inline void SiteMetadata::set_page_title(const std::string& value) {
  _internal_set_page_title(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.page_title)
}
inline std::string* SiteMetadata::mutable_page_title() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.page_title)
  return _internal_mutable_page_title();
}
inline const std::string& SiteMetadata::_internal_page_title() const {
  return page_title_.Get();
}
inline void SiteMetadata::_internal_set_page_title(const std::string& value) {
  
  page_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_page_title(std::string&& value) {
  
  page_title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.page_title)
}
inline void SiteMetadata::set_page_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.page_title)
}
inline void SiteMetadata::set_page_title(const char* value,
    size_t size) {
  
  page_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.page_title)
}
inline std::string* SiteMetadata::_internal_mutable_page_title() {
  
  return page_title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_page_title() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.page_title)
  return page_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_page_title(std::string* page_title) {
  if (page_title != nullptr) {
    
  } else {
    
  }
  page_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.page_title)
}
inline std::string* SiteMetadata::unsafe_arena_release_page_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.page_title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return page_title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_page_title(
    std::string* page_title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (page_title != nullptr) {
    
  } else {
    
  }
  page_title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.page_title)
}

// string kind = 3;
inline void SiteMetadata::clear_kind() {
  kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::kind() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.kind)
  return _internal_kind();
}
inline void SiteMetadata::set_kind(const std::string& value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.kind)
}
inline std::string* SiteMetadata::mutable_kind() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.kind)
  return _internal_mutable_kind();
}
inline const std::string& SiteMetadata::_internal_kind() const {
  return kind_.Get();
}
inline void SiteMetadata::_internal_set_kind(const std::string& value) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_kind(std::string&& value) {
  
  kind_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.kind)
}
inline void SiteMetadata::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.kind)
}
inline void SiteMetadata::set_kind(const char* value,
    size_t size) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.kind)
}
inline std::string* SiteMetadata::_internal_mutable_kind() {
  
  return kind_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_kind() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.kind)
  return kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.kind)
}
inline std::string* SiteMetadata::unsafe_arena_release_kind() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.kind)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return kind_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_kind(
    std::string* kind) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kind, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.kind)
}

// string description = 4;
inline void SiteMetadata::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::description() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.description)
  return _internal_description();
}
inline void SiteMetadata::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.description)
}
inline std::string* SiteMetadata::mutable_description() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.description)
  return _internal_mutable_description();
}
inline const std::string& SiteMetadata::_internal_description() const {
  return description_.Get();
}
inline void SiteMetadata::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.description)
}
inline void SiteMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.description)
}
inline void SiteMetadata::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.description)
}
inline std::string* SiteMetadata::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_description() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.description)
}
inline std::string* SiteMetadata::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.description)
}

// string url = 5;
inline void SiteMetadata::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::url() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.url)
  return _internal_url();
}
inline void SiteMetadata::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.url)
}
inline std::string* SiteMetadata::mutable_url() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.url)
  return _internal_mutable_url();
}
inline const std::string& SiteMetadata::_internal_url() const {
  return url_.Get();
}
inline void SiteMetadata::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.url)
}
inline void SiteMetadata::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.url)
}
inline void SiteMetadata::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.url)
}
inline std::string* SiteMetadata::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_url() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.url)
}
inline std::string* SiteMetadata::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.url)
}

// string image = 6;
inline void SiteMetadata::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteMetadata::image() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.SiteMetadata.image)
  return _internal_image();
}
inline void SiteMetadata::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.SiteMetadata.image)
}
inline std::string* SiteMetadata::mutable_image() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.SiteMetadata.image)
  return _internal_mutable_image();
}
inline const std::string& SiteMetadata::_internal_image() const {
  return image_.Get();
}
inline void SiteMetadata::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteMetadata::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.SiteMetadata.image)
}
inline void SiteMetadata::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.SiteMetadata.image)
}
inline void SiteMetadata::set_image(const char* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.SiteMetadata.image)
}
inline std::string* SiteMetadata::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteMetadata::release_image() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.SiteMetadata.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteMetadata::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.SiteMetadata.image)
}
inline std::string* SiteMetadata::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.SiteMetadata.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteMetadata::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.SiteMetadata.image)
}

// -------------------------------------------------------------------

// FetchLinkMetadataRequest

// string url = 1;
inline void FetchLinkMetadataRequest::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FetchLinkMetadataRequest::url() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
  return _internal_url();
}
inline void FetchLinkMetadataRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}
inline std::string* FetchLinkMetadataRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
  return _internal_mutable_url();
}
inline const std::string& FetchLinkMetadataRequest::_internal_url() const {
  return url_.Get();
}
inline void FetchLinkMetadataRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FetchLinkMetadataRequest::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}
inline void FetchLinkMetadataRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}
inline void FetchLinkMetadataRequest::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}
inline std::string* FetchLinkMetadataRequest::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FetchLinkMetadataRequest::release_url() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FetchLinkMetadataRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}
inline std::string* FetchLinkMetadataRequest::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FetchLinkMetadataRequest::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.FetchLinkMetadataRequest.url)
}

// -------------------------------------------------------------------

// InstantViewRequest

// string url = 1;
inline void InstantViewRequest::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstantViewRequest::url() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.InstantViewRequest.url)
  return _internal_url();
}
inline void InstantViewRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.InstantViewRequest.url)
}
inline std::string* InstantViewRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.InstantViewRequest.url)
  return _internal_mutable_url();
}
inline const std::string& InstantViewRequest::_internal_url() const {
  return url_.Get();
}
inline void InstantViewRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstantViewRequest::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.InstantViewRequest.url)
}
inline void InstantViewRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.InstantViewRequest.url)
}
inline void InstantViewRequest::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.InstantViewRequest.url)
}
inline std::string* InstantViewRequest::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstantViewRequest::release_url() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.InstantViewRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstantViewRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.InstantViewRequest.url)
}
inline std::string* InstantViewRequest::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.InstantViewRequest.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstantViewRequest::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.InstantViewRequest.url)
}

// -------------------------------------------------------------------

// InstantViewResponse

// .protocol.mediaproxy.v1.SiteMetadata metadata = 1;
inline bool InstantViewResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool InstantViewResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void InstantViewResponse::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::protocol::mediaproxy::v1::SiteMetadata& InstantViewResponse::_internal_metadata() const {
  const ::protocol::mediaproxy::v1::SiteMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::mediaproxy::v1::SiteMetadata*>(
      &::protocol::mediaproxy::v1::_SiteMetadata_default_instance_);
}
inline const ::protocol::mediaproxy::v1::SiteMetadata& InstantViewResponse::metadata() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.InstantViewResponse.metadata)
  return _internal_metadata();
}
inline void InstantViewResponse::unsafe_arena_set_allocated_metadata(
    ::protocol::mediaproxy::v1::SiteMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.InstantViewResponse.metadata)
}
inline ::protocol::mediaproxy::v1::SiteMetadata* InstantViewResponse::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::mediaproxy::v1::SiteMetadata* InstantViewResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.InstantViewResponse.metadata)
  
  ::protocol::mediaproxy::v1::SiteMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::protocol::mediaproxy::v1::SiteMetadata* InstantViewResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::mediaproxy::v1::SiteMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::protocol::mediaproxy::v1::SiteMetadata* InstantViewResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.InstantViewResponse.metadata)
  return _internal_mutable_metadata();
}
inline void InstantViewResponse::set_allocated_metadata(::protocol::mediaproxy::v1::SiteMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.InstantViewResponse.metadata)
}

// string content = 2;
inline void InstantViewResponse::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstantViewResponse::content() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.InstantViewResponse.content)
  return _internal_content();
}
inline void InstantViewResponse::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.InstantViewResponse.content)
}
inline std::string* InstantViewResponse::mutable_content() {
  // @@protoc_insertion_point(field_mutable:protocol.mediaproxy.v1.InstantViewResponse.content)
  return _internal_mutable_content();
}
inline const std::string& InstantViewResponse::_internal_content() const {
  return content_.Get();
}
inline void InstantViewResponse::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstantViewResponse::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.mediaproxy.v1.InstantViewResponse.content)
}
inline void InstantViewResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.mediaproxy.v1.InstantViewResponse.content)
}
inline void InstantViewResponse::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.mediaproxy.v1.InstantViewResponse.content)
}
inline std::string* InstantViewResponse::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstantViewResponse::release_content() {
  // @@protoc_insertion_point(field_release:protocol.mediaproxy.v1.InstantViewResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstantViewResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.mediaproxy.v1.InstantViewResponse.content)
}
inline std::string* InstantViewResponse::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.mediaproxy.v1.InstantViewResponse.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstantViewResponse::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.mediaproxy.v1.InstantViewResponse.content)
}

// bool is_valid = 3;
inline void InstantViewResponse::clear_is_valid() {
  is_valid_ = false;
}
inline bool InstantViewResponse::_internal_is_valid() const {
  return is_valid_;
}
inline bool InstantViewResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.InstantViewResponse.is_valid)
  return _internal_is_valid();
}
inline void InstantViewResponse::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void InstantViewResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.InstantViewResponse.is_valid)
}

// -------------------------------------------------------------------

// CanInstantViewResponse

// bool can_instant_view = 1;
inline void CanInstantViewResponse::clear_can_instant_view() {
  can_instant_view_ = false;
}
inline bool CanInstantViewResponse::_internal_can_instant_view() const {
  return can_instant_view_;
}
inline bool CanInstantViewResponse::can_instant_view() const {
  // @@protoc_insertion_point(field_get:protocol.mediaproxy.v1.CanInstantViewResponse.can_instant_view)
  return _internal_can_instant_view();
}
inline void CanInstantViewResponse::_internal_set_can_instant_view(bool value) {
  
  can_instant_view_ = value;
}
inline void CanInstantViewResponse::set_can_instant_view(bool value) {
  _internal_set_can_instant_view(value);
  // @@protoc_insertion_point(field_set:protocol.mediaproxy.v1.CanInstantViewResponse.can_instant_view)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace mediaproxy
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediaproxy_2fv1_2fmediaproxy_2eproto
