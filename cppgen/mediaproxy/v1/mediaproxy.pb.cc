// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediaproxy/v1/mediaproxy.proto

#include "mediaproxy/v1/mediaproxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mediaproxy_2fv1_2fmediaproxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto;
namespace protocol {
namespace mediaproxy {
namespace v1 {
class SiteMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteMetadata> _instance;
} _SiteMetadata_default_instance_;
class FetchLinkMetadataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FetchLinkMetadataRequest> _instance;
} _FetchLinkMetadataRequest_default_instance_;
class InstantViewRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstantViewRequest> _instance;
} _InstantViewRequest_default_instance_;
class InstantViewResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstantViewResponse> _instance;
} _InstantViewResponse_default_instance_;
class CanInstantViewResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanInstantViewResponse> _instance;
} _CanInstantViewResponse_default_instance_;
}  // namespace v1
}  // namespace mediaproxy
}  // namespace protocol
static void InitDefaultsscc_info_CanInstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::mediaproxy::v1::_CanInstantViewResponse_default_instance_;
    new (ptr) ::protocol::mediaproxy::v1::CanInstantViewResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::mediaproxy::v1::CanInstantViewResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanInstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CanInstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto}, {}};

static void InitDefaultsscc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::mediaproxy::v1::_FetchLinkMetadataRequest_default_instance_;
    new (ptr) ::protocol::mediaproxy::v1::FetchLinkMetadataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::mediaproxy::v1::FetchLinkMetadataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto}, {}};

static void InitDefaultsscc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::mediaproxy::v1::_InstantViewRequest_default_instance_;
    new (ptr) ::protocol::mediaproxy::v1::InstantViewRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::mediaproxy::v1::InstantViewRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto}, {}};

static void InitDefaultsscc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::mediaproxy::v1::_InstantViewResponse_default_instance_;
    new (ptr) ::protocol::mediaproxy::v1::InstantViewResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::mediaproxy::v1::InstantViewResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto}, {
      &scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto.base,}};

static void InitDefaultsscc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::mediaproxy::v1::_SiteMetadata_default_instance_;
    new (ptr) ::protocol::mediaproxy::v1::SiteMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::mediaproxy::v1::SiteMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediaproxy_2fv1_2fmediaproxy_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediaproxy_2fv1_2fmediaproxy_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediaproxy_2fv1_2fmediaproxy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, site_title_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, page_title_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, kind_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, url_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::SiteMetadata, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::FetchLinkMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::FetchLinkMetadataRequest, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewRequest, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewResponse, content_),
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::InstantViewResponse, is_valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::CanInstantViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::mediaproxy::v1::CanInstantViewResponse, can_instant_view_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::mediaproxy::v1::SiteMetadata)},
  { 11, -1, sizeof(::protocol::mediaproxy::v1::FetchLinkMetadataRequest)},
  { 17, -1, sizeof(::protocol::mediaproxy::v1::InstantViewRequest)},
  { 23, -1, sizeof(::protocol::mediaproxy::v1::InstantViewResponse)},
  { 31, -1, sizeof(::protocol::mediaproxy::v1::CanInstantViewResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::mediaproxy::v1::_SiteMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::mediaproxy::v1::_FetchLinkMetadataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::mediaproxy::v1::_InstantViewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::mediaproxy::v1::_InstantViewResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::mediaproxy::v1::_CanInstantViewResponse_default_instance_),
};

const char descriptor_table_protodef_mediaproxy_2fv1_2fmediaproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036mediaproxy/v1/mediaproxy.proto\022\026protoc"
  "ol.mediaproxy.v1\032\033harmonytypes/v1/types."
  "proto\"u\n\014SiteMetadata\022\022\n\nsite_title\030\001 \001("
  "\t\022\022\n\npage_title\030\002 \001(\t\022\014\n\004kind\030\003 \001(\t\022\023\n\013d"
  "escription\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\r\n\005image\030\006"
  " \001(\t\"\'\n\030FetchLinkMetadataRequest\022\013\n\003url\030"
  "\001 \001(\t\"!\n\022InstantViewRequest\022\013\n\003url\030\001 \001(\t"
  "\"p\n\023InstantViewResponse\0226\n\010metadata\030\001 \001("
  "\0132$.protocol.mediaproxy.v1.SiteMetadata\022"
  "\017\n\007content\030\002 \001(\t\022\020\n\010is_valid\030\003 \001(\010\"2\n\026Ca"
  "nInstantViewResponse\022\030\n\020can_instant_view"
  "\030\001 \001(\0102\353\002\n\021MediaProxyService\022r\n\021FetchLin"
  "kMetadata\0220.protocol.mediaproxy.v1.Fetch"
  "LinkMetadataRequest\032$.protocol.mediaprox"
  "y.v1.SiteMetadata\"\005\232D\002\010\001\022m\n\013InstantView\022"
  "*.protocol.mediaproxy.v1.InstantViewRequ"
  "est\032+.protocol.mediaproxy.v1.InstantView"
  "Response\"\005\232D\002\010\001\022s\n\016CanInstantView\022*.prot"
  "ocol.mediaproxy.v1.InstantViewRequest\032.."
  "protocol.mediaproxy.v1.CanInstantViewRes"
  "ponse\"\005\232D\002\010\001B9Z7github.com/harmony-devel"
  "opment/legato/gen/mediaproxy/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_deps[1] = {
  &::descriptor_table_harmonytypes_2fv1_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_sccs[5] = {
  &scc_info_CanInstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto.base,
  &scc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base,
  &scc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base,
  &scc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto.base,
  &scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto = {
  false, false, descriptor_table_protodef_mediaproxy_2fv1_2fmediaproxy_2eproto, "mediaproxy/v1/mediaproxy.proto", 879,
  &descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_once, descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_sccs, descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_mediaproxy_2fv1_2fmediaproxy_2eproto::offsets,
  file_level_metadata_mediaproxy_2fv1_2fmediaproxy_2eproto, 5, file_level_enum_descriptors_mediaproxy_2fv1_2fmediaproxy_2eproto, file_level_service_descriptors_mediaproxy_2fv1_2fmediaproxy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mediaproxy_2fv1_2fmediaproxy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mediaproxy_2fv1_2fmediaproxy_2eproto)), true);
namespace protocol {
namespace mediaproxy {
namespace v1 {

// ===================================================================

void SiteMetadata::InitAsDefaultInstance() {
}
class SiteMetadata::_Internal {
 public:
};

SiteMetadata::SiteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.mediaproxy.v1.SiteMetadata)
}
SiteMetadata::SiteMetadata(const SiteMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_title().empty()) {
    site_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_title(),
      GetArena());
  }
  page_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_title().empty()) {
    page_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_title(),
      GetArena());
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kind().empty()) {
    kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kind(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.mediaproxy.v1.SiteMetadata)
}

void SiteMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  site_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteMetadata::~SiteMetadata() {
  // @@protoc_insertion_point(destructor:protocol.mediaproxy.v1.SiteMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiteMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  site_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteMetadata::ArenaDtor(void* object) {
  SiteMetadata* _this = reinterpret_cast< SiteMetadata* >(object);
  (void)_this;
}
void SiteMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteMetadata& SiteMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteMetadata_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  return *internal_default_instance();
}


void SiteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.mediaproxy.v1.SiteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string site_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_site_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.site_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_page_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.page_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.SiteMetadata.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.mediaproxy.v1.SiteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_title = 1;
  if (this->site_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_title().data(), static_cast<int>(this->_internal_site_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.site_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_title(), target);
  }

  // string page_title = 2;
  if (this->page_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_title().data(), static_cast<int>(this->_internal_page_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.page_title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_title(), target);
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.kind");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_kind(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string url = 5;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // string image = 6;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.SiteMetadata.image");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.mediaproxy.v1.SiteMetadata)
  return target;
}

size_t SiteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.mediaproxy.v1.SiteMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_title = 1;
  if (this->site_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_title());
  }

  // string page_title = 2;
  if (this->page_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_title());
  }

  // string kind = 3;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string url = 5;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string image = 6;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.mediaproxy.v1.SiteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiteMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.mediaproxy.v1.SiteMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.mediaproxy.v1.SiteMetadata)
    MergeFrom(*source);
  }
}

void SiteMetadata::MergeFrom(const SiteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.mediaproxy.v1.SiteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.site_title().size() > 0) {
    _internal_set_site_title(from._internal_site_title());
  }
  if (from.page_title().size() > 0) {
    _internal_set_page_title(from._internal_page_title());
  }
  if (from.kind().size() > 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.image().size() > 0) {
    _internal_set_image(from._internal_image());
  }
}

void SiteMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.mediaproxy.v1.SiteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteMetadata::CopyFrom(const SiteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.mediaproxy.v1.SiteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteMetadata::IsInitialized() const {
  return true;
}

void SiteMetadata::InternalSwap(SiteMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  site_title_.Swap(&other->site_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_title_.Swap(&other->page_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kind_.Swap(&other->kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FetchLinkMetadataRequest::InitAsDefaultInstance() {
}
class FetchLinkMetadataRequest::_Internal {
 public:
};

FetchLinkMetadataRequest::FetchLinkMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
}
FetchLinkMetadataRequest::FetchLinkMetadataRequest(const FetchLinkMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
}

void FetchLinkMetadataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FetchLinkMetadataRequest::~FetchLinkMetadataRequest() {
  // @@protoc_insertion_point(destructor:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FetchLinkMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FetchLinkMetadataRequest::ArenaDtor(void* object) {
  FetchLinkMetadataRequest* _this = reinterpret_cast< FetchLinkMetadataRequest* >(object);
  (void)_this;
}
void FetchLinkMetadataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FetchLinkMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FetchLinkMetadataRequest& FetchLinkMetadataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FetchLinkMetadataRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  return *internal_default_instance();
}


void FetchLinkMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchLinkMetadataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.FetchLinkMetadataRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FetchLinkMetadataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.FetchLinkMetadataRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  return target;
}

size_t FetchLinkMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FetchLinkMetadataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FetchLinkMetadataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FetchLinkMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
    MergeFrom(*source);
  }
}

void FetchLinkMetadataRequest::MergeFrom(const FetchLinkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void FetchLinkMetadataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchLinkMetadataRequest::CopyFrom(const FetchLinkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.mediaproxy.v1.FetchLinkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchLinkMetadataRequest::IsInitialized() const {
  return true;
}

void FetchLinkMetadataRequest::InternalSwap(FetchLinkMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchLinkMetadataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstantViewRequest::InitAsDefaultInstance() {
}
class InstantViewRequest::_Internal {
 public:
};

InstantViewRequest::InstantViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.mediaproxy.v1.InstantViewRequest)
}
InstantViewRequest::InstantViewRequest(const InstantViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.mediaproxy.v1.InstantViewRequest)
}

void InstantViewRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InstantViewRequest::~InstantViewRequest() {
  // @@protoc_insertion_point(destructor:protocol.mediaproxy.v1.InstantViewRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstantViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstantViewRequest::ArenaDtor(void* object) {
  InstantViewRequest* _this = reinterpret_cast< InstantViewRequest* >(object);
  (void)_this;
}
void InstantViewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstantViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstantViewRequest& InstantViewRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstantViewRequest_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  return *internal_default_instance();
}


void InstantViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.mediaproxy.v1.InstantViewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantViewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.InstantViewRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstantViewRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.mediaproxy.v1.InstantViewRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.InstantViewRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.mediaproxy.v1.InstantViewRequest)
  return target;
}

size_t InstantViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.mediaproxy.v1.InstantViewRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstantViewRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.mediaproxy.v1.InstantViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InstantViewRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstantViewRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.mediaproxy.v1.InstantViewRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.mediaproxy.v1.InstantViewRequest)
    MergeFrom(*source);
  }
}

void InstantViewRequest::MergeFrom(const InstantViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.mediaproxy.v1.InstantViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
}

void InstantViewRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.mediaproxy.v1.InstantViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantViewRequest::CopyFrom(const InstantViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.mediaproxy.v1.InstantViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantViewRequest::IsInitialized() const {
  return true;
}

void InstantViewRequest::InternalSwap(InstantViewRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantViewRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstantViewResponse::InitAsDefaultInstance() {
  ::protocol::mediaproxy::v1::_InstantViewResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::protocol::mediaproxy::v1::SiteMetadata*>(
      ::protocol::mediaproxy::v1::SiteMetadata::internal_default_instance());
}
class InstantViewResponse::_Internal {
 public:
  static const ::protocol::mediaproxy::v1::SiteMetadata& metadata(const InstantViewResponse* msg);
};

const ::protocol::mediaproxy::v1::SiteMetadata&
InstantViewResponse::_Internal::metadata(const InstantViewResponse* msg) {
  return *msg->metadata_;
}
InstantViewResponse::InstantViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.mediaproxy.v1.InstantViewResponse)
}
InstantViewResponse::InstantViewResponse(const InstantViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::protocol::mediaproxy::v1::SiteMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:protocol.mediaproxy.v1.InstantViewResponse)
}

void InstantViewResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(is_valid_));
}

InstantViewResponse::~InstantViewResponse() {
  // @@protoc_insertion_point(destructor:protocol.mediaproxy.v1.InstantViewResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstantViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void InstantViewResponse::ArenaDtor(void* object) {
  InstantViewResponse* _this = reinterpret_cast< InstantViewResponse* >(object);
  (void)_this;
}
void InstantViewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstantViewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstantViewResponse& InstantViewResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  return *internal_default_instance();
}


void InstantViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.mediaproxy.v1.InstantViewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  is_valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantViewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.mediaproxy.v1.SiteMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.mediaproxy.v1.InstantViewResponse.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstantViewResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.mediaproxy.v1.InstantViewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.mediaproxy.v1.SiteMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.mediaproxy.v1.InstantViewResponse.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // bool is_valid = 3;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.mediaproxy.v1.InstantViewResponse)
  return target;
}

size_t InstantViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.mediaproxy.v1.InstantViewResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .protocol.mediaproxy.v1.SiteMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // bool is_valid = 3;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstantViewResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.mediaproxy.v1.InstantViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InstantViewResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstantViewResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.mediaproxy.v1.InstantViewResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.mediaproxy.v1.InstantViewResponse)
    MergeFrom(*source);
  }
}

void InstantViewResponse::MergeFrom(const InstantViewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.mediaproxy.v1.InstantViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::protocol::mediaproxy::v1::SiteMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
}

void InstantViewResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.mediaproxy.v1.InstantViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantViewResponse::CopyFrom(const InstantViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.mediaproxy.v1.InstantViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantViewResponse::IsInitialized() const {
  return true;
}

void InstantViewResponse::InternalSwap(InstantViewResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstantViewResponse, is_valid_)
      + sizeof(InstantViewResponse::is_valid_)
      - PROTOBUF_FIELD_OFFSET(InstantViewResponse, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantViewResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanInstantViewResponse::InitAsDefaultInstance() {
}
class CanInstantViewResponse::_Internal {
 public:
};

CanInstantViewResponse::CanInstantViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.mediaproxy.v1.CanInstantViewResponse)
}
CanInstantViewResponse::CanInstantViewResponse(const CanInstantViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  can_instant_view_ = from.can_instant_view_;
  // @@protoc_insertion_point(copy_constructor:protocol.mediaproxy.v1.CanInstantViewResponse)
}

void CanInstantViewResponse::SharedCtor() {
  can_instant_view_ = false;
}

CanInstantViewResponse::~CanInstantViewResponse() {
  // @@protoc_insertion_point(destructor:protocol.mediaproxy.v1.CanInstantViewResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CanInstantViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CanInstantViewResponse::ArenaDtor(void* object) {
  CanInstantViewResponse* _this = reinterpret_cast< CanInstantViewResponse* >(object);
  (void)_this;
}
void CanInstantViewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CanInstantViewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanInstantViewResponse& CanInstantViewResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanInstantViewResponse_mediaproxy_2fv1_2fmediaproxy_2eproto.base);
  return *internal_default_instance();
}


void CanInstantViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_instant_view_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanInstantViewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool can_instant_view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          can_instant_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanInstantViewResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_instant_view = 1;
  if (this->can_instant_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_instant_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.mediaproxy.v1.CanInstantViewResponse)
  return target;
}

size_t CanInstantViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool can_instant_view = 1;
  if (this->can_instant_view() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanInstantViewResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CanInstantViewResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanInstantViewResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.mediaproxy.v1.CanInstantViewResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.mediaproxy.v1.CanInstantViewResponse)
    MergeFrom(*source);
  }
}

void CanInstantViewResponse::MergeFrom(const CanInstantViewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.can_instant_view() != 0) {
    _internal_set_can_instant_view(from._internal_can_instant_view());
  }
}

void CanInstantViewResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanInstantViewResponse::CopyFrom(const CanInstantViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.mediaproxy.v1.CanInstantViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanInstantViewResponse::IsInitialized() const {
  return true;
}

void CanInstantViewResponse::InternalSwap(CanInstantViewResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(can_instant_view_, other->can_instant_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanInstantViewResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace mediaproxy
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::mediaproxy::v1::SiteMetadata* Arena::CreateMaybeMessage< ::protocol::mediaproxy::v1::SiteMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::mediaproxy::v1::SiteMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::mediaproxy::v1::FetchLinkMetadataRequest* Arena::CreateMaybeMessage< ::protocol::mediaproxy::v1::FetchLinkMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::mediaproxy::v1::FetchLinkMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::mediaproxy::v1::InstantViewRequest* Arena::CreateMaybeMessage< ::protocol::mediaproxy::v1::InstantViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::mediaproxy::v1::InstantViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::mediaproxy::v1::InstantViewResponse* Arena::CreateMaybeMessage< ::protocol::mediaproxy::v1::InstantViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::mediaproxy::v1::InstantViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::mediaproxy::v1::CanInstantViewResponse* Arena::CreateMaybeMessage< ::protocol::mediaproxy::v1::CanInstantViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::mediaproxy::v1::CanInstantViewResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
