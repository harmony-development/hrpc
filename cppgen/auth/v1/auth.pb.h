// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/v1/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2fv1_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2fv1_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2fv1_2fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2fv1_2fauth_2eproto;
namespace protocol {
namespace auth {
namespace v1 {
class AuthStep;
class AuthStepDefaultTypeInternal;
extern AuthStepDefaultTypeInternal _AuthStep_default_instance_;
class AuthStep_Choice;
class AuthStep_ChoiceDefaultTypeInternal;
extern AuthStep_ChoiceDefaultTypeInternal _AuthStep_Choice_default_instance_;
class AuthStep_Form;
class AuthStep_FormDefaultTypeInternal;
extern AuthStep_FormDefaultTypeInternal _AuthStep_Form_default_instance_;
class AuthStep_Form_FormField;
class AuthStep_Form_FormFieldDefaultTypeInternal;
extern AuthStep_Form_FormFieldDefaultTypeInternal _AuthStep_Form_FormField_default_instance_;
class AuthStep_Waiting;
class AuthStep_WaitingDefaultTypeInternal;
extern AuthStep_WaitingDefaultTypeInternal _AuthStep_Waiting_default_instance_;
class BeginAuthResponse;
class BeginAuthResponseDefaultTypeInternal;
extern BeginAuthResponseDefaultTypeInternal _BeginAuthResponse_default_instance_;
class FederateReply;
class FederateReplyDefaultTypeInternal;
extern FederateReplyDefaultTypeInternal _FederateReply_default_instance_;
class FederateRequest;
class FederateRequestDefaultTypeInternal;
extern FederateRequestDefaultTypeInternal _FederateRequest_default_instance_;
class KeyReply;
class KeyReplyDefaultTypeInternal;
extern KeyReplyDefaultTypeInternal _KeyReply_default_instance_;
class LoginFederatedRequest;
class LoginFederatedRequestDefaultTypeInternal;
extern LoginFederatedRequestDefaultTypeInternal _LoginFederatedRequest_default_instance_;
class NextStepRequest;
class NextStepRequestDefaultTypeInternal;
extern NextStepRequestDefaultTypeInternal _NextStepRequest_default_instance_;
class NextStepRequest_Choice;
class NextStepRequest_ChoiceDefaultTypeInternal;
extern NextStepRequest_ChoiceDefaultTypeInternal _NextStepRequest_Choice_default_instance_;
class NextStepRequest_Form;
class NextStepRequest_FormDefaultTypeInternal;
extern NextStepRequest_FormDefaultTypeInternal _NextStepRequest_Form_default_instance_;
class NextStepRequest_FormFields;
class NextStepRequest_FormFieldsDefaultTypeInternal;
extern NextStepRequest_FormFieldsDefaultTypeInternal _NextStepRequest_FormFields_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class StepBackRequest;
class StepBackRequestDefaultTypeInternal;
extern StepBackRequestDefaultTypeInternal _StepBackRequest_default_instance_;
class StreamStepsRequest;
class StreamStepsRequestDefaultTypeInternal;
extern StreamStepsRequestDefaultTypeInternal _StreamStepsRequest_default_instance_;
}  // namespace v1
}  // namespace auth
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::auth::v1::AuthStep* Arena::CreateMaybeMessage<::protocol::auth::v1::AuthStep>(Arena*);
template<> ::protocol::auth::v1::AuthStep_Choice* Arena::CreateMaybeMessage<::protocol::auth::v1::AuthStep_Choice>(Arena*);
template<> ::protocol::auth::v1::AuthStep_Form* Arena::CreateMaybeMessage<::protocol::auth::v1::AuthStep_Form>(Arena*);
template<> ::protocol::auth::v1::AuthStep_Form_FormField* Arena::CreateMaybeMessage<::protocol::auth::v1::AuthStep_Form_FormField>(Arena*);
template<> ::protocol::auth::v1::AuthStep_Waiting* Arena::CreateMaybeMessage<::protocol::auth::v1::AuthStep_Waiting>(Arena*);
template<> ::protocol::auth::v1::BeginAuthResponse* Arena::CreateMaybeMessage<::protocol::auth::v1::BeginAuthResponse>(Arena*);
template<> ::protocol::auth::v1::FederateReply* Arena::CreateMaybeMessage<::protocol::auth::v1::FederateReply>(Arena*);
template<> ::protocol::auth::v1::FederateRequest* Arena::CreateMaybeMessage<::protocol::auth::v1::FederateRequest>(Arena*);
template<> ::protocol::auth::v1::KeyReply* Arena::CreateMaybeMessage<::protocol::auth::v1::KeyReply>(Arena*);
template<> ::protocol::auth::v1::LoginFederatedRequest* Arena::CreateMaybeMessage<::protocol::auth::v1::LoginFederatedRequest>(Arena*);
template<> ::protocol::auth::v1::NextStepRequest* Arena::CreateMaybeMessage<::protocol::auth::v1::NextStepRequest>(Arena*);
template<> ::protocol::auth::v1::NextStepRequest_Choice* Arena::CreateMaybeMessage<::protocol::auth::v1::NextStepRequest_Choice>(Arena*);
template<> ::protocol::auth::v1::NextStepRequest_Form* Arena::CreateMaybeMessage<::protocol::auth::v1::NextStepRequest_Form>(Arena*);
template<> ::protocol::auth::v1::NextStepRequest_FormFields* Arena::CreateMaybeMessage<::protocol::auth::v1::NextStepRequest_FormFields>(Arena*);
template<> ::protocol::auth::v1::Session* Arena::CreateMaybeMessage<::protocol::auth::v1::Session>(Arena*);
template<> ::protocol::auth::v1::StepBackRequest* Arena::CreateMaybeMessage<::protocol::auth::v1::StepBackRequest>(Arena*);
template<> ::protocol::auth::v1::StreamStepsRequest* Arena::CreateMaybeMessage<::protocol::auth::v1::StreamStepsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace auth {
namespace v1 {

// ===================================================================

class BeginAuthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.BeginAuthResponse) */ {
 public:
  inline BeginAuthResponse() : BeginAuthResponse(nullptr) {};
  virtual ~BeginAuthResponse();

  BeginAuthResponse(const BeginAuthResponse& from);
  BeginAuthResponse(BeginAuthResponse&& from) noexcept
    : BeginAuthResponse() {
    *this = ::std::move(from);
  }

  inline BeginAuthResponse& operator=(const BeginAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginAuthResponse& operator=(BeginAuthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeginAuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginAuthResponse* internal_default_instance() {
    return reinterpret_cast<const BeginAuthResponse*>(
               &_BeginAuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BeginAuthResponse& a, BeginAuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginAuthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginAuthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginAuthResponse* New() const final {
    return CreateMaybeMessage<BeginAuthResponse>(nullptr);
  }

  BeginAuthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginAuthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeginAuthResponse& from);
  void MergeFrom(const BeginAuthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginAuthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.BeginAuthResponse";
  }
  protected:
  explicit BeginAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthIdFieldNumber = 1,
  };
  // string auth_id = 1;
  void clear_auth_id();
  const std::string& auth_id() const;
  void set_auth_id(const std::string& value);
  void set_auth_id(std::string&& value);
  void set_auth_id(const char* value);
  void set_auth_id(const char* value, size_t size);
  std::string* mutable_auth_id();
  std::string* release_auth_id();
  void set_allocated_auth_id(std::string* auth_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_id(
      std::string* auth_id);
  private:
  const std::string& _internal_auth_id() const;
  void _internal_set_auth_id(const std::string& value);
  std::string* _internal_mutable_auth_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.BeginAuthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.Session) */ {
 public:
  inline Session() : Session(nullptr) {};
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionTokenFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string session_token = 2;
  void clear_session_token();
  const std::string& session_token() const;
  void set_session_token(const std::string& value);
  void set_session_token(std::string&& value);
  void set_session_token(const char* value);
  void set_session_token(const char* value, size_t size);
  std::string* mutable_session_token();
  std::string* release_session_token();
  void set_allocated_session_token(std::string* session_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_token(
      std::string* session_token);
  private:
  const std::string& _internal_session_token() const;
  void _internal_set_session_token(const std::string& value);
  std::string* _internal_mutable_session_token();
  public:

  // uint64 user_id = 1 [jstype = JS_STRING];
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthStep_Choice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.AuthStep.Choice) */ {
 public:
  inline AuthStep_Choice() : AuthStep_Choice(nullptr) {};
  virtual ~AuthStep_Choice();

  AuthStep_Choice(const AuthStep_Choice& from);
  AuthStep_Choice(AuthStep_Choice&& from) noexcept
    : AuthStep_Choice() {
    *this = ::std::move(from);
  }

  inline AuthStep_Choice& operator=(const AuthStep_Choice& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthStep_Choice& operator=(AuthStep_Choice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthStep_Choice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthStep_Choice* internal_default_instance() {
    return reinterpret_cast<const AuthStep_Choice*>(
               &_AuthStep_Choice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthStep_Choice& a, AuthStep_Choice& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthStep_Choice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthStep_Choice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthStep_Choice* New() const final {
    return CreateMaybeMessage<AuthStep_Choice>(nullptr);
  }

  AuthStep_Choice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthStep_Choice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthStep_Choice& from);
  void MergeFrom(const AuthStep_Choice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthStep_Choice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.AuthStep.Choice";
  }
  protected:
  explicit AuthStep_Choice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kTitleFieldNumber = 1,
  };
  // repeated string options = 2;
  int options_size() const;
  private:
  int _internal_options_size() const;
  public:
  void clear_options();
  const std::string& options(int index) const;
  std::string* mutable_options(int index);
  void set_options(int index, const std::string& value);
  void set_options(int index, std::string&& value);
  void set_options(int index, const char* value);
  void set_options(int index, const char* value, size_t size);
  std::string* add_options();
  void add_options(const std::string& value);
  void add_options(std::string&& value);
  void add_options(const char* value);
  void add_options(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_options();
  private:
  const std::string& _internal_options(int index) const;
  std::string* _internal_add_options();
  public:

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.AuthStep.Choice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> options_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthStep_Form_FormField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.AuthStep.Form.FormField) */ {
 public:
  inline AuthStep_Form_FormField() : AuthStep_Form_FormField(nullptr) {};
  virtual ~AuthStep_Form_FormField();

  AuthStep_Form_FormField(const AuthStep_Form_FormField& from);
  AuthStep_Form_FormField(AuthStep_Form_FormField&& from) noexcept
    : AuthStep_Form_FormField() {
    *this = ::std::move(from);
  }

  inline AuthStep_Form_FormField& operator=(const AuthStep_Form_FormField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthStep_Form_FormField& operator=(AuthStep_Form_FormField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthStep_Form_FormField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthStep_Form_FormField* internal_default_instance() {
    return reinterpret_cast<const AuthStep_Form_FormField*>(
               &_AuthStep_Form_FormField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthStep_Form_FormField& a, AuthStep_Form_FormField& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthStep_Form_FormField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthStep_Form_FormField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthStep_Form_FormField* New() const final {
    return CreateMaybeMessage<AuthStep_Form_FormField>(nullptr);
  }

  AuthStep_Form_FormField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthStep_Form_FormField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthStep_Form_FormField& from);
  void MergeFrom(const AuthStep_Form_FormField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthStep_Form_FormField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.AuthStep.Form.FormField";
  }
  protected:
  explicit AuthStep_Form_FormField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.AuthStep.Form.FormField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthStep_Form PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.AuthStep.Form) */ {
 public:
  inline AuthStep_Form() : AuthStep_Form(nullptr) {};
  virtual ~AuthStep_Form();

  AuthStep_Form(const AuthStep_Form& from);
  AuthStep_Form(AuthStep_Form&& from) noexcept
    : AuthStep_Form() {
    *this = ::std::move(from);
  }

  inline AuthStep_Form& operator=(const AuthStep_Form& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthStep_Form& operator=(AuthStep_Form&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthStep_Form& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthStep_Form* internal_default_instance() {
    return reinterpret_cast<const AuthStep_Form*>(
               &_AuthStep_Form_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthStep_Form& a, AuthStep_Form& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthStep_Form* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthStep_Form* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthStep_Form* New() const final {
    return CreateMaybeMessage<AuthStep_Form>(nullptr);
  }

  AuthStep_Form* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthStep_Form>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthStep_Form& from);
  void MergeFrom(const AuthStep_Form& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthStep_Form* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.AuthStep.Form";
  }
  protected:
  explicit AuthStep_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthStep_Form_FormField FormField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kTitleFieldNumber = 1,
  };
  // repeated .protocol.auth.v1.AuthStep.Form.FormField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::protocol::auth::v1::AuthStep_Form_FormField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::AuthStep_Form_FormField >*
      mutable_fields();
  private:
  const ::protocol::auth::v1::AuthStep_Form_FormField& _internal_fields(int index) const;
  ::protocol::auth::v1::AuthStep_Form_FormField* _internal_add_fields();
  public:
  const ::protocol::auth::v1::AuthStep_Form_FormField& fields(int index) const;
  ::protocol::auth::v1::AuthStep_Form_FormField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::AuthStep_Form_FormField >&
      fields() const;

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.AuthStep.Form)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::AuthStep_Form_FormField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthStep_Waiting PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.AuthStep.Waiting) */ {
 public:
  inline AuthStep_Waiting() : AuthStep_Waiting(nullptr) {};
  virtual ~AuthStep_Waiting();

  AuthStep_Waiting(const AuthStep_Waiting& from);
  AuthStep_Waiting(AuthStep_Waiting&& from) noexcept
    : AuthStep_Waiting() {
    *this = ::std::move(from);
  }

  inline AuthStep_Waiting& operator=(const AuthStep_Waiting& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthStep_Waiting& operator=(AuthStep_Waiting&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthStep_Waiting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthStep_Waiting* internal_default_instance() {
    return reinterpret_cast<const AuthStep_Waiting*>(
               &_AuthStep_Waiting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthStep_Waiting& a, AuthStep_Waiting& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthStep_Waiting* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthStep_Waiting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthStep_Waiting* New() const final {
    return CreateMaybeMessage<AuthStep_Waiting>(nullptr);
  }

  AuthStep_Waiting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthStep_Waiting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthStep_Waiting& from);
  void MergeFrom(const AuthStep_Waiting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthStep_Waiting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.AuthStep.Waiting";
  }
  protected:
  explicit AuthStep_Waiting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.AuthStep.Waiting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class AuthStep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.AuthStep) */ {
 public:
  inline AuthStep() : AuthStep(nullptr) {};
  virtual ~AuthStep();

  AuthStep(const AuthStep& from);
  AuthStep(AuthStep&& from) noexcept
    : AuthStep() {
    *this = ::std::move(from);
  }

  inline AuthStep& operator=(const AuthStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthStep& operator=(AuthStep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthStep& default_instance();

  enum StepCase {
    kChoice = 3,
    kForm = 4,
    kSession = 5,
    kWaiting = 6,
    STEP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthStep* internal_default_instance() {
    return reinterpret_cast<const AuthStep*>(
               &_AuthStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthStep& a, AuthStep& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthStep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthStep* New() const final {
    return CreateMaybeMessage<AuthStep>(nullptr);
  }

  AuthStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthStep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthStep& from);
  void MergeFrom(const AuthStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.AuthStep";
  }
  protected:
  explicit AuthStep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthStep_Choice Choice;
  typedef AuthStep_Form Form;
  typedef AuthStep_Waiting Waiting;

  // accessors -------------------------------------------------------

  enum : int {
    kFallbackUrlFieldNumber = 1,
    kCanGoBackFieldNumber = 2,
    kChoiceFieldNumber = 3,
    kFormFieldNumber = 4,
    kSessionFieldNumber = 5,
    kWaitingFieldNumber = 6,
  };
  // string fallback_url = 1;
  void clear_fallback_url();
  const std::string& fallback_url() const;
  void set_fallback_url(const std::string& value);
  void set_fallback_url(std::string&& value);
  void set_fallback_url(const char* value);
  void set_fallback_url(const char* value, size_t size);
  std::string* mutable_fallback_url();
  std::string* release_fallback_url();
  void set_allocated_fallback_url(std::string* fallback_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fallback_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fallback_url(
      std::string* fallback_url);
  private:
  const std::string& _internal_fallback_url() const;
  void _internal_set_fallback_url(const std::string& value);
  std::string* _internal_mutable_fallback_url();
  public:

  // bool can_go_back = 2;
  void clear_can_go_back();
  bool can_go_back() const;
  void set_can_go_back(bool value);
  private:
  bool _internal_can_go_back() const;
  void _internal_set_can_go_back(bool value);
  public:

  // .protocol.auth.v1.AuthStep.Choice choice = 3;
  bool has_choice() const;
  private:
  bool _internal_has_choice() const;
  public:
  void clear_choice();
  const ::protocol::auth::v1::AuthStep_Choice& choice() const;
  ::protocol::auth::v1::AuthStep_Choice* release_choice();
  ::protocol::auth::v1::AuthStep_Choice* mutable_choice();
  void set_allocated_choice(::protocol::auth::v1::AuthStep_Choice* choice);
  private:
  const ::protocol::auth::v1::AuthStep_Choice& _internal_choice() const;
  ::protocol::auth::v1::AuthStep_Choice* _internal_mutable_choice();
  public:
  void unsafe_arena_set_allocated_choice(
      ::protocol::auth::v1::AuthStep_Choice* choice);
  ::protocol::auth::v1::AuthStep_Choice* unsafe_arena_release_choice();

  // .protocol.auth.v1.AuthStep.Form form = 4;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::protocol::auth::v1::AuthStep_Form& form() const;
  ::protocol::auth::v1::AuthStep_Form* release_form();
  ::protocol::auth::v1::AuthStep_Form* mutable_form();
  void set_allocated_form(::protocol::auth::v1::AuthStep_Form* form);
  private:
  const ::protocol::auth::v1::AuthStep_Form& _internal_form() const;
  ::protocol::auth::v1::AuthStep_Form* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::protocol::auth::v1::AuthStep_Form* form);
  ::protocol::auth::v1::AuthStep_Form* unsafe_arena_release_form();

  // .protocol.auth.v1.Session session = 5;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::protocol::auth::v1::Session& session() const;
  ::protocol::auth::v1::Session* release_session();
  ::protocol::auth::v1::Session* mutable_session();
  void set_allocated_session(::protocol::auth::v1::Session* session);
  private:
  const ::protocol::auth::v1::Session& _internal_session() const;
  ::protocol::auth::v1::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::protocol::auth::v1::Session* session);
  ::protocol::auth::v1::Session* unsafe_arena_release_session();

  // .protocol.auth.v1.AuthStep.Waiting waiting = 6;
  bool has_waiting() const;
  private:
  bool _internal_has_waiting() const;
  public:
  void clear_waiting();
  const ::protocol::auth::v1::AuthStep_Waiting& waiting() const;
  ::protocol::auth::v1::AuthStep_Waiting* release_waiting();
  ::protocol::auth::v1::AuthStep_Waiting* mutable_waiting();
  void set_allocated_waiting(::protocol::auth::v1::AuthStep_Waiting* waiting);
  private:
  const ::protocol::auth::v1::AuthStep_Waiting& _internal_waiting() const;
  ::protocol::auth::v1::AuthStep_Waiting* _internal_mutable_waiting();
  public:
  void unsafe_arena_set_allocated_waiting(
      ::protocol::auth::v1::AuthStep_Waiting* waiting);
  ::protocol::auth::v1::AuthStep_Waiting* unsafe_arena_release_waiting();

  void clear_step();
  StepCase step_case() const;
  // @@protoc_insertion_point(class_scope:protocol.auth.v1.AuthStep)
 private:
  class _Internal;
  void set_has_choice();
  void set_has_form();
  void set_has_session();
  void set_has_waiting();

  inline bool has_step() const;
  inline void clear_has_step();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_url_;
  bool can_go_back_;
  union StepUnion {
    StepUnion() {}
    ::protocol::auth::v1::AuthStep_Choice* choice_;
    ::protocol::auth::v1::AuthStep_Form* form_;
    ::protocol::auth::v1::Session* session_;
    ::protocol::auth::v1::AuthStep_Waiting* waiting_;
  } step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class NextStepRequest_Choice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.NextStepRequest.Choice) */ {
 public:
  inline NextStepRequest_Choice() : NextStepRequest_Choice(nullptr) {};
  virtual ~NextStepRequest_Choice();

  NextStepRequest_Choice(const NextStepRequest_Choice& from);
  NextStepRequest_Choice(NextStepRequest_Choice&& from) noexcept
    : NextStepRequest_Choice() {
    *this = ::std::move(from);
  }

  inline NextStepRequest_Choice& operator=(const NextStepRequest_Choice& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextStepRequest_Choice& operator=(NextStepRequest_Choice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextStepRequest_Choice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextStepRequest_Choice* internal_default_instance() {
    return reinterpret_cast<const NextStepRequest_Choice*>(
               &_NextStepRequest_Choice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NextStepRequest_Choice& a, NextStepRequest_Choice& b) {
    a.Swap(&b);
  }
  inline void Swap(NextStepRequest_Choice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextStepRequest_Choice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextStepRequest_Choice* New() const final {
    return CreateMaybeMessage<NextStepRequest_Choice>(nullptr);
  }

  NextStepRequest_Choice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextStepRequest_Choice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextStepRequest_Choice& from);
  void MergeFrom(const NextStepRequest_Choice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextStepRequest_Choice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.NextStepRequest.Choice";
  }
  protected:
  explicit NextStepRequest_Choice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChoiceFieldNumber = 1,
  };
  // string choice = 1;
  void clear_choice();
  const std::string& choice() const;
  void set_choice(const std::string& value);
  void set_choice(std::string&& value);
  void set_choice(const char* value);
  void set_choice(const char* value, size_t size);
  std::string* mutable_choice();
  std::string* release_choice();
  void set_allocated_choice(std::string* choice);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_choice();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_choice(
      std::string* choice);
  private:
  const std::string& _internal_choice() const;
  void _internal_set_choice(const std::string& value);
  std::string* _internal_mutable_choice();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.NextStepRequest.Choice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr choice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class NextStepRequest_FormFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.NextStepRequest.FormFields) */ {
 public:
  inline NextStepRequest_FormFields() : NextStepRequest_FormFields(nullptr) {};
  virtual ~NextStepRequest_FormFields();

  NextStepRequest_FormFields(const NextStepRequest_FormFields& from);
  NextStepRequest_FormFields(NextStepRequest_FormFields&& from) noexcept
    : NextStepRequest_FormFields() {
    *this = ::std::move(from);
  }

  inline NextStepRequest_FormFields& operator=(const NextStepRequest_FormFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextStepRequest_FormFields& operator=(NextStepRequest_FormFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextStepRequest_FormFields& default_instance();

  enum FieldCase {
    kBytes = 1,
    kString = 2,
    kNumber = 3,
    FIELD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextStepRequest_FormFields* internal_default_instance() {
    return reinterpret_cast<const NextStepRequest_FormFields*>(
               &_NextStepRequest_FormFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NextStepRequest_FormFields& a, NextStepRequest_FormFields& b) {
    a.Swap(&b);
  }
  inline void Swap(NextStepRequest_FormFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextStepRequest_FormFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextStepRequest_FormFields* New() const final {
    return CreateMaybeMessage<NextStepRequest_FormFields>(nullptr);
  }

  NextStepRequest_FormFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextStepRequest_FormFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextStepRequest_FormFields& from);
  void MergeFrom(const NextStepRequest_FormFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextStepRequest_FormFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.NextStepRequest.FormFields";
  }
  protected:
  explicit NextStepRequest_FormFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
    kStringFieldNumber = 2,
    kNumberFieldNumber = 3,
  };
  // bytes bytes = 1;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes(
      std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // string string = 2;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string(
      std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // int64 number = 3;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_field();
  FieldCase field_case() const;
  // @@protoc_insertion_point(class_scope:protocol.auth.v1.NextStepRequest.FormFields)
 private:
  class _Internal;
  void set_has_bytes();
  void set_has_string();
  void set_has_number();

  inline bool has_field() const;
  inline void clear_has_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FieldUnion {
    FieldUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::int64 number_;
  } field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class NextStepRequest_Form PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.NextStepRequest.Form) */ {
 public:
  inline NextStepRequest_Form() : NextStepRequest_Form(nullptr) {};
  virtual ~NextStepRequest_Form();

  NextStepRequest_Form(const NextStepRequest_Form& from);
  NextStepRequest_Form(NextStepRequest_Form&& from) noexcept
    : NextStepRequest_Form() {
    *this = ::std::move(from);
  }

  inline NextStepRequest_Form& operator=(const NextStepRequest_Form& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextStepRequest_Form& operator=(NextStepRequest_Form&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextStepRequest_Form& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextStepRequest_Form* internal_default_instance() {
    return reinterpret_cast<const NextStepRequest_Form*>(
               &_NextStepRequest_Form_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NextStepRequest_Form& a, NextStepRequest_Form& b) {
    a.Swap(&b);
  }
  inline void Swap(NextStepRequest_Form* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextStepRequest_Form* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextStepRequest_Form* New() const final {
    return CreateMaybeMessage<NextStepRequest_Form>(nullptr);
  }

  NextStepRequest_Form* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextStepRequest_Form>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextStepRequest_Form& from);
  void MergeFrom(const NextStepRequest_Form& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextStepRequest_Form* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.NextStepRequest.Form";
  }
  protected:
  explicit NextStepRequest_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .protocol.auth.v1.NextStepRequest.FormFields fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::protocol::auth::v1::NextStepRequest_FormFields* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::NextStepRequest_FormFields >*
      mutable_fields();
  private:
  const ::protocol::auth::v1::NextStepRequest_FormFields& _internal_fields(int index) const;
  ::protocol::auth::v1::NextStepRequest_FormFields* _internal_add_fields();
  public:
  const ::protocol::auth::v1::NextStepRequest_FormFields& fields(int index) const;
  ::protocol::auth::v1::NextStepRequest_FormFields* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::NextStepRequest_FormFields >&
      fields() const;

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.NextStepRequest.Form)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::NextStepRequest_FormFields > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class NextStepRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.NextStepRequest) */ {
 public:
  inline NextStepRequest() : NextStepRequest(nullptr) {};
  virtual ~NextStepRequest();

  NextStepRequest(const NextStepRequest& from);
  NextStepRequest(NextStepRequest&& from) noexcept
    : NextStepRequest() {
    *this = ::std::move(from);
  }

  inline NextStepRequest& operator=(const NextStepRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextStepRequest& operator=(NextStepRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextStepRequest& default_instance();

  enum StepCase {
    kChoice = 2,
    kForm = 3,
    STEP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextStepRequest* internal_default_instance() {
    return reinterpret_cast<const NextStepRequest*>(
               &_NextStepRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NextStepRequest& a, NextStepRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NextStepRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextStepRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextStepRequest* New() const final {
    return CreateMaybeMessage<NextStepRequest>(nullptr);
  }

  NextStepRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextStepRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextStepRequest& from);
  void MergeFrom(const NextStepRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextStepRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.NextStepRequest";
  }
  protected:
  explicit NextStepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NextStepRequest_Choice Choice;
  typedef NextStepRequest_FormFields FormFields;
  typedef NextStepRequest_Form Form;

  // accessors -------------------------------------------------------

  enum : int {
    kAuthIdFieldNumber = 1,
    kChoiceFieldNumber = 2,
    kFormFieldNumber = 3,
  };
  // string auth_id = 1;
  void clear_auth_id();
  const std::string& auth_id() const;
  void set_auth_id(const std::string& value);
  void set_auth_id(std::string&& value);
  void set_auth_id(const char* value);
  void set_auth_id(const char* value, size_t size);
  std::string* mutable_auth_id();
  std::string* release_auth_id();
  void set_allocated_auth_id(std::string* auth_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_id(
      std::string* auth_id);
  private:
  const std::string& _internal_auth_id() const;
  void _internal_set_auth_id(const std::string& value);
  std::string* _internal_mutable_auth_id();
  public:

  // .protocol.auth.v1.NextStepRequest.Choice choice = 2;
  bool has_choice() const;
  private:
  bool _internal_has_choice() const;
  public:
  void clear_choice();
  const ::protocol::auth::v1::NextStepRequest_Choice& choice() const;
  ::protocol::auth::v1::NextStepRequest_Choice* release_choice();
  ::protocol::auth::v1::NextStepRequest_Choice* mutable_choice();
  void set_allocated_choice(::protocol::auth::v1::NextStepRequest_Choice* choice);
  private:
  const ::protocol::auth::v1::NextStepRequest_Choice& _internal_choice() const;
  ::protocol::auth::v1::NextStepRequest_Choice* _internal_mutable_choice();
  public:
  void unsafe_arena_set_allocated_choice(
      ::protocol::auth::v1::NextStepRequest_Choice* choice);
  ::protocol::auth::v1::NextStepRequest_Choice* unsafe_arena_release_choice();

  // .protocol.auth.v1.NextStepRequest.Form form = 3;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::protocol::auth::v1::NextStepRequest_Form& form() const;
  ::protocol::auth::v1::NextStepRequest_Form* release_form();
  ::protocol::auth::v1::NextStepRequest_Form* mutable_form();
  void set_allocated_form(::protocol::auth::v1::NextStepRequest_Form* form);
  private:
  const ::protocol::auth::v1::NextStepRequest_Form& _internal_form() const;
  ::protocol::auth::v1::NextStepRequest_Form* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::protocol::auth::v1::NextStepRequest_Form* form);
  ::protocol::auth::v1::NextStepRequest_Form* unsafe_arena_release_form();

  void clear_step();
  StepCase step_case() const;
  // @@protoc_insertion_point(class_scope:protocol.auth.v1.NextStepRequest)
 private:
  class _Internal;
  void set_has_choice();
  void set_has_form();

  inline bool has_step() const;
  inline void clear_has_step();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_id_;
  union StepUnion {
    StepUnion() {}
    ::protocol::auth::v1::NextStepRequest_Choice* choice_;
    ::protocol::auth::v1::NextStepRequest_Form* form_;
  } step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class StepBackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.StepBackRequest) */ {
 public:
  inline StepBackRequest() : StepBackRequest(nullptr) {};
  virtual ~StepBackRequest();

  StepBackRequest(const StepBackRequest& from);
  StepBackRequest(StepBackRequest&& from) noexcept
    : StepBackRequest() {
    *this = ::std::move(from);
  }

  inline StepBackRequest& operator=(const StepBackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepBackRequest& operator=(StepBackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepBackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepBackRequest* internal_default_instance() {
    return reinterpret_cast<const StepBackRequest*>(
               &_StepBackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StepBackRequest& a, StepBackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StepBackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepBackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepBackRequest* New() const final {
    return CreateMaybeMessage<StepBackRequest>(nullptr);
  }

  StepBackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepBackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepBackRequest& from);
  void MergeFrom(const StepBackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepBackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.StepBackRequest";
  }
  protected:
  explicit StepBackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthIdFieldNumber = 1,
  };
  // string auth_id = 1;
  void clear_auth_id();
  const std::string& auth_id() const;
  void set_auth_id(const std::string& value);
  void set_auth_id(std::string&& value);
  void set_auth_id(const char* value);
  void set_auth_id(const char* value, size_t size);
  std::string* mutable_auth_id();
  std::string* release_auth_id();
  void set_allocated_auth_id(std::string* auth_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_id(
      std::string* auth_id);
  private:
  const std::string& _internal_auth_id() const;
  void _internal_set_auth_id(const std::string& value);
  std::string* _internal_mutable_auth_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.StepBackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class StreamStepsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.StreamStepsRequest) */ {
 public:
  inline StreamStepsRequest() : StreamStepsRequest(nullptr) {};
  virtual ~StreamStepsRequest();

  StreamStepsRequest(const StreamStepsRequest& from);
  StreamStepsRequest(StreamStepsRequest&& from) noexcept
    : StreamStepsRequest() {
    *this = ::std::move(from);
  }

  inline StreamStepsRequest& operator=(const StreamStepsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStepsRequest& operator=(StreamStepsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStepsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStepsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamStepsRequest*>(
               &_StreamStepsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StreamStepsRequest& a, StreamStepsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStepsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStepsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStepsRequest* New() const final {
    return CreateMaybeMessage<StreamStepsRequest>(nullptr);
  }

  StreamStepsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStepsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStepsRequest& from);
  void MergeFrom(const StreamStepsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStepsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.StreamStepsRequest";
  }
  protected:
  explicit StreamStepsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthIdFieldNumber = 1,
  };
  // string auth_id = 1;
  void clear_auth_id();
  const std::string& auth_id() const;
  void set_auth_id(const std::string& value);
  void set_auth_id(std::string&& value);
  void set_auth_id(const char* value);
  void set_auth_id(const char* value, size_t size);
  std::string* mutable_auth_id();
  std::string* release_auth_id();
  void set_allocated_auth_id(std::string* auth_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_id(
      std::string* auth_id);
  private:
  const std::string& _internal_auth_id() const;
  void _internal_set_auth_id(const std::string& value);
  std::string* _internal_mutable_auth_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.StreamStepsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class FederateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.FederateRequest) */ {
 public:
  inline FederateRequest() : FederateRequest(nullptr) {};
  virtual ~FederateRequest();

  FederateRequest(const FederateRequest& from);
  FederateRequest(FederateRequest&& from) noexcept
    : FederateRequest() {
    *this = ::std::move(from);
  }

  inline FederateRequest& operator=(const FederateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateRequest& operator=(FederateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FederateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FederateRequest* internal_default_instance() {
    return reinterpret_cast<const FederateRequest*>(
               &_FederateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FederateRequest& a, FederateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FederateRequest* New() const final {
    return CreateMaybeMessage<FederateRequest>(nullptr);
  }

  FederateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FederateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FederateRequest& from);
  void MergeFrom(const FederateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.FederateRequest";
  }
  protected:
  explicit FederateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.FederateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class FederateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.FederateReply) */ {
 public:
  inline FederateReply() : FederateReply(nullptr) {};
  virtual ~FederateReply();

  FederateReply(const FederateReply& from);
  FederateReply(FederateReply&& from) noexcept
    : FederateReply() {
    *this = ::std::move(from);
  }

  inline FederateReply& operator=(const FederateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateReply& operator=(FederateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FederateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FederateReply* internal_default_instance() {
    return reinterpret_cast<const FederateReply*>(
               &_FederateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FederateReply& a, FederateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FederateReply* New() const final {
    return CreateMaybeMessage<FederateReply>(nullptr);
  }

  FederateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FederateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FederateReply& from);
  void MergeFrom(const FederateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.FederateReply";
  }
  protected:
  explicit FederateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNonceFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.FederateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class KeyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.KeyReply) */ {
 public:
  inline KeyReply() : KeyReply(nullptr) {};
  virtual ~KeyReply();

  KeyReply(const KeyReply& from);
  KeyReply(KeyReply&& from) noexcept
    : KeyReply() {
    *this = ::std::move(from);
  }

  inline KeyReply& operator=(const KeyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyReply& operator=(KeyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyReply* internal_default_instance() {
    return reinterpret_cast<const KeyReply*>(
               &_KeyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KeyReply& a, KeyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyReply* New() const final {
    return CreateMaybeMessage<KeyReply>(nullptr);
  }

  KeyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyReply& from);
  void MergeFrom(const KeyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.KeyReply";
  }
  protected:
  explicit KeyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.KeyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// -------------------------------------------------------------------

class LoginFederatedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.auth.v1.LoginFederatedRequest) */ {
 public:
  inline LoginFederatedRequest() : LoginFederatedRequest(nullptr) {};
  virtual ~LoginFederatedRequest();

  LoginFederatedRequest(const LoginFederatedRequest& from);
  LoginFederatedRequest(LoginFederatedRequest&& from) noexcept
    : LoginFederatedRequest() {
    *this = ::std::move(from);
  }

  inline LoginFederatedRequest& operator=(const LoginFederatedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginFederatedRequest& operator=(LoginFederatedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginFederatedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginFederatedRequest* internal_default_instance() {
    return reinterpret_cast<const LoginFederatedRequest*>(
               &_LoginFederatedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoginFederatedRequest& a, LoginFederatedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginFederatedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginFederatedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginFederatedRequest* New() const final {
    return CreateMaybeMessage<LoginFederatedRequest>(nullptr);
  }

  LoginFederatedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginFederatedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginFederatedRequest& from);
  void MergeFrom(const LoginFederatedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginFederatedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.auth.v1.LoginFederatedRequest";
  }
  protected:
  explicit LoginFederatedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2fv1_2fauth_2eproto);
    return ::descriptor_table_auth_2fv1_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthTokenFieldNumber = 1,
    kDomainFieldNumber = 2,
  };
  // string auth_token = 1;
  void clear_auth_token();
  const std::string& auth_token() const;
  void set_auth_token(const std::string& value);
  void set_auth_token(std::string&& value);
  void set_auth_token(const char* value);
  void set_auth_token(const char* value, size_t size);
  std::string* mutable_auth_token();
  std::string* release_auth_token();
  void set_allocated_auth_token(std::string* auth_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auth_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auth_token(
      std::string* auth_token);
  private:
  const std::string& _internal_auth_token() const;
  void _internal_set_auth_token(const std::string& value);
  std::string* _internal_mutable_auth_token();
  public:

  // string domain = 2;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domain(
      std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // @@protoc_insertion_point(class_scope:protocol.auth.v1.LoginFederatedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2fv1_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeginAuthResponse

// string auth_id = 1;
inline void BeginAuthResponse::clear_auth_id() {
  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BeginAuthResponse::auth_id() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.BeginAuthResponse.auth_id)
  return _internal_auth_id();
}
inline void BeginAuthResponse::set_auth_id(const std::string& value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.BeginAuthResponse.auth_id)
}
inline std::string* BeginAuthResponse::mutable_auth_id() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.BeginAuthResponse.auth_id)
  return _internal_mutable_auth_id();
}
inline const std::string& BeginAuthResponse::_internal_auth_id() const {
  return auth_id_.Get();
}
inline void BeginAuthResponse::_internal_set_auth_id(const std::string& value) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BeginAuthResponse::set_auth_id(std::string&& value) {
  
  auth_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.BeginAuthResponse.auth_id)
}
inline void BeginAuthResponse::set_auth_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.BeginAuthResponse.auth_id)
}
inline void BeginAuthResponse::set_auth_id(const char* value,
    size_t size) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.BeginAuthResponse.auth_id)
}
inline std::string* BeginAuthResponse::_internal_mutable_auth_id() {
  
  return auth_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BeginAuthResponse::release_auth_id() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.BeginAuthResponse.auth_id)
  return auth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeginAuthResponse::set_allocated_auth_id(std::string* auth_id) {
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.BeginAuthResponse.auth_id)
}
inline std::string* BeginAuthResponse::unsafe_arena_release_auth_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.BeginAuthResponse.auth_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BeginAuthResponse::unsafe_arena_set_allocated_auth_id(
    std::string* auth_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.BeginAuthResponse.auth_id)
}

// -------------------------------------------------------------------

// Session

// uint64 user_id = 1 [jstype = JS_STRING];
inline void Session::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::user_id() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.Session.user_id)
  return _internal_user_id();
}
inline void Session::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Session::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.Session.user_id)
}

// string session_token = 2;
inline void Session::clear_session_token() {
  session_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::session_token() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.Session.session_token)
  return _internal_session_token();
}
inline void Session::set_session_token(const std::string& value) {
  _internal_set_session_token(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.Session.session_token)
}
inline std::string* Session::mutable_session_token() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.Session.session_token)
  return _internal_mutable_session_token();
}
inline const std::string& Session::_internal_session_token() const {
  return session_token_.Get();
}
inline void Session::_internal_set_session_token(const std::string& value) {
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_session_token(std::string&& value) {
  
  session_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.Session.session_token)
}
inline void Session::set_session_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.Session.session_token)
}
inline void Session::set_session_token(const char* value,
    size_t size) {
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.Session.session_token)
}
inline std::string* Session::_internal_mutable_session_token() {
  
  return session_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_session_token() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.Session.session_token)
  return session_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_session_token(std::string* session_token) {
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.Session.session_token)
}
inline std::string* Session::unsafe_arena_release_session_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.Session.session_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Session::unsafe_arena_set_allocated_session_token(
    std::string* session_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.Session.session_token)
}

// -------------------------------------------------------------------

// AuthStep_Choice

// string title = 1;
inline void AuthStep_Choice::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Choice::title() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Choice.title)
  return _internal_title();
}
inline void AuthStep_Choice::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Choice.title)
}
inline std::string* AuthStep_Choice::mutable_title() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Choice.title)
  return _internal_mutable_title();
}
inline const std::string& AuthStep_Choice::_internal_title() const {
  return title_.Get();
}
inline void AuthStep_Choice::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Choice::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Choice.title)
}
inline void AuthStep_Choice::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Choice.title)
}
inline void AuthStep_Choice::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Choice.title)
}
inline std::string* AuthStep_Choice::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Choice::release_title() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Choice.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Choice::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Choice.title)
}
inline std::string* AuthStep_Choice::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Choice.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Choice::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Choice.title)
}

// repeated string options = 2;
inline int AuthStep_Choice::_internal_options_size() const {
  return options_.size();
}
inline int AuthStep_Choice::options_size() const {
  return _internal_options_size();
}
inline void AuthStep_Choice::clear_options() {
  options_.Clear();
}
inline std::string* AuthStep_Choice::add_options() {
  // @@protoc_insertion_point(field_add_mutable:protocol.auth.v1.AuthStep.Choice.options)
  return _internal_add_options();
}
inline const std::string& AuthStep_Choice::_internal_options(int index) const {
  return options_.Get(index);
}
inline const std::string& AuthStep_Choice::options(int index) const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Choice.options)
  return _internal_options(index);
}
inline std::string* AuthStep_Choice::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Choice.options)
  return options_.Mutable(index);
}
inline void AuthStep_Choice::set_options(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Choice.options)
  options_.Mutable(index)->assign(value);
}
inline void AuthStep_Choice::set_options(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Choice.options)
  options_.Mutable(index)->assign(std::move(value));
}
inline void AuthStep_Choice::set_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Choice.options)
}
inline void AuthStep_Choice::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Choice.options)
}
inline std::string* AuthStep_Choice::_internal_add_options() {
  return options_.Add();
}
inline void AuthStep_Choice::add_options(const std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.auth.v1.AuthStep.Choice.options)
}
inline void AuthStep_Choice::add_options(std::string&& value) {
  options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.auth.v1.AuthStep.Choice.options)
}
inline void AuthStep_Choice::add_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.auth.v1.AuthStep.Choice.options)
}
inline void AuthStep_Choice::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.auth.v1.AuthStep.Choice.options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthStep_Choice::options() const {
  // @@protoc_insertion_point(field_list:protocol.auth.v1.AuthStep.Choice.options)
  return options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthStep_Choice::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:protocol.auth.v1.AuthStep.Choice.options)
  return &options_;
}

// -------------------------------------------------------------------

// AuthStep_Form_FormField

// string name = 1;
inline void AuthStep_Form_FormField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Form_FormField::name() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Form.FormField.name)
  return _internal_name();
}
inline void AuthStep_Form_FormField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Form.FormField.name)
}
inline std::string* AuthStep_Form_FormField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Form.FormField.name)
  return _internal_mutable_name();
}
inline const std::string& AuthStep_Form_FormField::_internal_name() const {
  return name_.Get();
}
inline void AuthStep_Form_FormField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Form_FormField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Form.FormField.name)
}
inline void AuthStep_Form_FormField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Form.FormField.name)
}
inline void AuthStep_Form_FormField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Form.FormField.name)
}
inline std::string* AuthStep_Form_FormField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Form_FormField::release_name() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Form.FormField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Form_FormField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Form.FormField.name)
}
inline std::string* AuthStep_Form_FormField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Form.FormField.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Form_FormField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Form.FormField.name)
}

// string type = 2;
inline void AuthStep_Form_FormField::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Form_FormField::type() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Form.FormField.type)
  return _internal_type();
}
inline void AuthStep_Form_FormField::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Form.FormField.type)
}
inline std::string* AuthStep_Form_FormField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Form.FormField.type)
  return _internal_mutable_type();
}
inline const std::string& AuthStep_Form_FormField::_internal_type() const {
  return type_.Get();
}
inline void AuthStep_Form_FormField::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Form_FormField::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Form.FormField.type)
}
inline void AuthStep_Form_FormField::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Form.FormField.type)
}
inline void AuthStep_Form_FormField::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Form.FormField.type)
}
inline std::string* AuthStep_Form_FormField::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Form_FormField::release_type() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Form.FormField.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Form_FormField::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Form.FormField.type)
}
inline std::string* AuthStep_Form_FormField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Form.FormField.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Form_FormField::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Form.FormField.type)
}

// -------------------------------------------------------------------

// AuthStep_Form

// string title = 1;
inline void AuthStep_Form::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Form::title() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Form.title)
  return _internal_title();
}
inline void AuthStep_Form::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Form.title)
}
inline std::string* AuthStep_Form::mutable_title() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Form.title)
  return _internal_mutable_title();
}
inline const std::string& AuthStep_Form::_internal_title() const {
  return title_.Get();
}
inline void AuthStep_Form::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Form::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Form.title)
}
inline void AuthStep_Form::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Form.title)
}
inline void AuthStep_Form::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Form.title)
}
inline std::string* AuthStep_Form::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Form::release_title() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Form.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Form::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Form.title)
}
inline std::string* AuthStep_Form::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Form.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Form::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Form.title)
}

// repeated .protocol.auth.v1.AuthStep.Form.FormField fields = 2;
inline int AuthStep_Form::_internal_fields_size() const {
  return fields_.size();
}
inline int AuthStep_Form::fields_size() const {
  return _internal_fields_size();
}
inline void AuthStep_Form::clear_fields() {
  fields_.Clear();
}
inline ::protocol::auth::v1::AuthStep_Form_FormField* AuthStep_Form::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Form.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::AuthStep_Form_FormField >*
AuthStep_Form::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.auth.v1.AuthStep.Form.fields)
  return &fields_;
}
inline const ::protocol::auth::v1::AuthStep_Form_FormField& AuthStep_Form::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::protocol::auth::v1::AuthStep_Form_FormField& AuthStep_Form::fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Form.fields)
  return _internal_fields(index);
}
inline ::protocol::auth::v1::AuthStep_Form_FormField* AuthStep_Form::_internal_add_fields() {
  return fields_.Add();
}
inline ::protocol::auth::v1::AuthStep_Form_FormField* AuthStep_Form::add_fields() {
  // @@protoc_insertion_point(field_add:protocol.auth.v1.AuthStep.Form.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::AuthStep_Form_FormField >&
AuthStep_Form::fields() const {
  // @@protoc_insertion_point(field_list:protocol.auth.v1.AuthStep.Form.fields)
  return fields_;
}

// -------------------------------------------------------------------

// AuthStep_Waiting

// string title = 1;
inline void AuthStep_Waiting::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Waiting::title() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Waiting.title)
  return _internal_title();
}
inline void AuthStep_Waiting::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Waiting.title)
}
inline std::string* AuthStep_Waiting::mutable_title() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Waiting.title)
  return _internal_mutable_title();
}
inline const std::string& AuthStep_Waiting::_internal_title() const {
  return title_.Get();
}
inline void AuthStep_Waiting::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Waiting::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Waiting.title)
}
inline void AuthStep_Waiting::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Waiting.title)
}
inline void AuthStep_Waiting::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Waiting.title)
}
inline std::string* AuthStep_Waiting::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Waiting::release_title() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Waiting.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Waiting::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Waiting.title)
}
inline std::string* AuthStep_Waiting::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Waiting.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Waiting::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Waiting.title)
}

// string description = 2;
inline void AuthStep_Waiting::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep_Waiting::description() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.Waiting.description)
  return _internal_description();
}
inline void AuthStep_Waiting::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.Waiting.description)
}
inline std::string* AuthStep_Waiting::mutable_description() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.Waiting.description)
  return _internal_mutable_description();
}
inline const std::string& AuthStep_Waiting::_internal_description() const {
  return description_.Get();
}
inline void AuthStep_Waiting::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep_Waiting::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.Waiting.description)
}
inline void AuthStep_Waiting::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.Waiting.description)
}
inline void AuthStep_Waiting::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.Waiting.description)
}
inline std::string* AuthStep_Waiting::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep_Waiting::release_description() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.Waiting.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep_Waiting::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.Waiting.description)
}
inline std::string* AuthStep_Waiting::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.Waiting.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep_Waiting::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.Waiting.description)
}

// -------------------------------------------------------------------

// AuthStep

// string fallback_url = 1;
inline void AuthStep::clear_fallback_url() {
  fallback_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthStep::fallback_url() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.fallback_url)
  return _internal_fallback_url();
}
inline void AuthStep::set_fallback_url(const std::string& value) {
  _internal_set_fallback_url(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.fallback_url)
}
inline std::string* AuthStep::mutable_fallback_url() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.fallback_url)
  return _internal_mutable_fallback_url();
}
inline const std::string& AuthStep::_internal_fallback_url() const {
  return fallback_url_.Get();
}
inline void AuthStep::_internal_set_fallback_url(const std::string& value) {
  
  fallback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthStep::set_fallback_url(std::string&& value) {
  
  fallback_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.AuthStep.fallback_url)
}
inline void AuthStep::set_fallback_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.AuthStep.fallback_url)
}
inline void AuthStep::set_fallback_url(const char* value,
    size_t size) {
  
  fallback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.AuthStep.fallback_url)
}
inline std::string* AuthStep::_internal_mutable_fallback_url() {
  
  return fallback_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthStep::release_fallback_url() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.fallback_url)
  return fallback_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthStep::set_allocated_fallback_url(std::string* fallback_url) {
  if (fallback_url != nullptr) {
    
  } else {
    
  }
  fallback_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.fallback_url)
}
inline std::string* AuthStep::unsafe_arena_release_fallback_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.fallback_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fallback_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AuthStep::unsafe_arena_set_allocated_fallback_url(
    std::string* fallback_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fallback_url != nullptr) {
    
  } else {
    
  }
  fallback_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fallback_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.fallback_url)
}

// bool can_go_back = 2;
inline void AuthStep::clear_can_go_back() {
  can_go_back_ = false;
}
inline bool AuthStep::_internal_can_go_back() const {
  return can_go_back_;
}
inline bool AuthStep::can_go_back() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.can_go_back)
  return _internal_can_go_back();
}
inline void AuthStep::_internal_set_can_go_back(bool value) {
  
  can_go_back_ = value;
}
inline void AuthStep::set_can_go_back(bool value) {
  _internal_set_can_go_back(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.AuthStep.can_go_back)
}

// .protocol.auth.v1.AuthStep.Choice choice = 3;
inline bool AuthStep::_internal_has_choice() const {
  return step_case() == kChoice;
}
inline bool AuthStep::has_choice() const {
  return _internal_has_choice();
}
inline void AuthStep::set_has_choice() {
  _oneof_case_[0] = kChoice;
}
inline void AuthStep::clear_choice() {
  if (_internal_has_choice()) {
    if (GetArena() == nullptr) {
      delete step_.choice_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::AuthStep_Choice* AuthStep::release_choice() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.choice)
  if (_internal_has_choice()) {
    clear_has_step();
      ::protocol::auth::v1::AuthStep_Choice* temp = step_.choice_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::AuthStep_Choice& AuthStep::_internal_choice() const {
  return _internal_has_choice()
      ? *step_.choice_
      : *reinterpret_cast< ::protocol::auth::v1::AuthStep_Choice*>(&::protocol::auth::v1::_AuthStep_Choice_default_instance_);
}
inline const ::protocol::auth::v1::AuthStep_Choice& AuthStep::choice() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.choice)
  return _internal_choice();
}
inline ::protocol::auth::v1::AuthStep_Choice* AuthStep::unsafe_arena_release_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.choice)
  if (_internal_has_choice()) {
    clear_has_step();
    ::protocol::auth::v1::AuthStep_Choice* temp = step_.choice_;
    step_.choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthStep::unsafe_arena_set_allocated_choice(::protocol::auth::v1::AuthStep_Choice* choice) {
  clear_step();
  if (choice) {
    set_has_choice();
    step_.choice_ = choice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.choice)
}
inline ::protocol::auth::v1::AuthStep_Choice* AuthStep::_internal_mutable_choice() {
  if (!_internal_has_choice()) {
    clear_step();
    set_has_choice();
    step_.choice_ = CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Choice >(GetArena());
  }
  return step_.choice_;
}
inline ::protocol::auth::v1::AuthStep_Choice* AuthStep::mutable_choice() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.choice)
  return _internal_mutable_choice();
}

// .protocol.auth.v1.AuthStep.Form form = 4;
inline bool AuthStep::_internal_has_form() const {
  return step_case() == kForm;
}
inline bool AuthStep::has_form() const {
  return _internal_has_form();
}
inline void AuthStep::set_has_form() {
  _oneof_case_[0] = kForm;
}
inline void AuthStep::clear_form() {
  if (_internal_has_form()) {
    if (GetArena() == nullptr) {
      delete step_.form_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::AuthStep_Form* AuthStep::release_form() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.form)
  if (_internal_has_form()) {
    clear_has_step();
      ::protocol::auth::v1::AuthStep_Form* temp = step_.form_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.form_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::AuthStep_Form& AuthStep::_internal_form() const {
  return _internal_has_form()
      ? *step_.form_
      : *reinterpret_cast< ::protocol::auth::v1::AuthStep_Form*>(&::protocol::auth::v1::_AuthStep_Form_default_instance_);
}
inline const ::protocol::auth::v1::AuthStep_Form& AuthStep::form() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.form)
  return _internal_form();
}
inline ::protocol::auth::v1::AuthStep_Form* AuthStep::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.form)
  if (_internal_has_form()) {
    clear_has_step();
    ::protocol::auth::v1::AuthStep_Form* temp = step_.form_;
    step_.form_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthStep::unsafe_arena_set_allocated_form(::protocol::auth::v1::AuthStep_Form* form) {
  clear_step();
  if (form) {
    set_has_form();
    step_.form_ = form;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.form)
}
inline ::protocol::auth::v1::AuthStep_Form* AuthStep::_internal_mutable_form() {
  if (!_internal_has_form()) {
    clear_step();
    set_has_form();
    step_.form_ = CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Form >(GetArena());
  }
  return step_.form_;
}
inline ::protocol::auth::v1::AuthStep_Form* AuthStep::mutable_form() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.form)
  return _internal_mutable_form();
}

// .protocol.auth.v1.Session session = 5;
inline bool AuthStep::_internal_has_session() const {
  return step_case() == kSession;
}
inline bool AuthStep::has_session() const {
  return _internal_has_session();
}
inline void AuthStep::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void AuthStep::clear_session() {
  if (_internal_has_session()) {
    if (GetArena() == nullptr) {
      delete step_.session_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::Session* AuthStep::release_session() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.session)
  if (_internal_has_session()) {
    clear_has_step();
      ::protocol::auth::v1::Session* temp = step_.session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::Session& AuthStep::_internal_session() const {
  return _internal_has_session()
      ? *step_.session_
      : *reinterpret_cast< ::protocol::auth::v1::Session*>(&::protocol::auth::v1::_Session_default_instance_);
}
inline const ::protocol::auth::v1::Session& AuthStep::session() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.session)
  return _internal_session();
}
inline ::protocol::auth::v1::Session* AuthStep::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.session)
  if (_internal_has_session()) {
    clear_has_step();
    ::protocol::auth::v1::Session* temp = step_.session_;
    step_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthStep::unsafe_arena_set_allocated_session(::protocol::auth::v1::Session* session) {
  clear_step();
  if (session) {
    set_has_session();
    step_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.session)
}
inline ::protocol::auth::v1::Session* AuthStep::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_step();
    set_has_session();
    step_.session_ = CreateMaybeMessage< ::protocol::auth::v1::Session >(GetArena());
  }
  return step_.session_;
}
inline ::protocol::auth::v1::Session* AuthStep::mutable_session() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.session)
  return _internal_mutable_session();
}

// .protocol.auth.v1.AuthStep.Waiting waiting = 6;
inline bool AuthStep::_internal_has_waiting() const {
  return step_case() == kWaiting;
}
inline bool AuthStep::has_waiting() const {
  return _internal_has_waiting();
}
inline void AuthStep::set_has_waiting() {
  _oneof_case_[0] = kWaiting;
}
inline void AuthStep::clear_waiting() {
  if (_internal_has_waiting()) {
    if (GetArena() == nullptr) {
      delete step_.waiting_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::AuthStep_Waiting* AuthStep::release_waiting() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.AuthStep.waiting)
  if (_internal_has_waiting()) {
    clear_has_step();
      ::protocol::auth::v1::AuthStep_Waiting* temp = step_.waiting_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.waiting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::AuthStep_Waiting& AuthStep::_internal_waiting() const {
  return _internal_has_waiting()
      ? *step_.waiting_
      : *reinterpret_cast< ::protocol::auth::v1::AuthStep_Waiting*>(&::protocol::auth::v1::_AuthStep_Waiting_default_instance_);
}
inline const ::protocol::auth::v1::AuthStep_Waiting& AuthStep::waiting() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.AuthStep.waiting)
  return _internal_waiting();
}
inline ::protocol::auth::v1::AuthStep_Waiting* AuthStep::unsafe_arena_release_waiting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.AuthStep.waiting)
  if (_internal_has_waiting()) {
    clear_has_step();
    ::protocol::auth::v1::AuthStep_Waiting* temp = step_.waiting_;
    step_.waiting_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthStep::unsafe_arena_set_allocated_waiting(::protocol::auth::v1::AuthStep_Waiting* waiting) {
  clear_step();
  if (waiting) {
    set_has_waiting();
    step_.waiting_ = waiting;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.AuthStep.waiting)
}
inline ::protocol::auth::v1::AuthStep_Waiting* AuthStep::_internal_mutable_waiting() {
  if (!_internal_has_waiting()) {
    clear_step();
    set_has_waiting();
    step_.waiting_ = CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Waiting >(GetArena());
  }
  return step_.waiting_;
}
inline ::protocol::auth::v1::AuthStep_Waiting* AuthStep::mutable_waiting() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.AuthStep.waiting)
  return _internal_mutable_waiting();
}

inline bool AuthStep::has_step() const {
  return step_case() != STEP_NOT_SET;
}
inline void AuthStep::clear_has_step() {
  _oneof_case_[0] = STEP_NOT_SET;
}
inline AuthStep::StepCase AuthStep::step_case() const {
  return AuthStep::StepCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NextStepRequest_Choice

// string choice = 1;
inline void NextStepRequest_Choice::clear_choice() {
  choice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NextStepRequest_Choice::choice() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.Choice.choice)
  return _internal_choice();
}
inline void NextStepRequest_Choice::set_choice(const std::string& value) {
  _internal_set_choice(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.Choice.choice)
}
inline std::string* NextStepRequest_Choice::mutable_choice() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.Choice.choice)
  return _internal_mutable_choice();
}
inline const std::string& NextStepRequest_Choice::_internal_choice() const {
  return choice_.Get();
}
inline void NextStepRequest_Choice::_internal_set_choice(const std::string& value) {
  
  choice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NextStepRequest_Choice::set_choice(std::string&& value) {
  
  choice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.NextStepRequest.Choice.choice)
}
inline void NextStepRequest_Choice::set_choice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  choice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.NextStepRequest.Choice.choice)
}
inline void NextStepRequest_Choice::set_choice(const char* value,
    size_t size) {
  
  choice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.NextStepRequest.Choice.choice)
}
inline std::string* NextStepRequest_Choice::_internal_mutable_choice() {
  
  return choice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NextStepRequest_Choice::release_choice() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.Choice.choice)
  return choice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NextStepRequest_Choice::set_allocated_choice(std::string* choice) {
  if (choice != nullptr) {
    
  } else {
    
  }
  choice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), choice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.Choice.choice)
}
inline std::string* NextStepRequest_Choice::unsafe_arena_release_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.Choice.choice)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return choice_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NextStepRequest_Choice::unsafe_arena_set_allocated_choice(
    std::string* choice) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (choice != nullptr) {
    
  } else {
    
  }
  choice_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      choice, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.Choice.choice)
}

// -------------------------------------------------------------------

// NextStepRequest_FormFields

// bytes bytes = 1;
inline bool NextStepRequest_FormFields::_internal_has_bytes() const {
  return field_case() == kBytes;
}
inline void NextStepRequest_FormFields::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void NextStepRequest_FormFields::clear_bytes() {
  if (_internal_has_bytes()) {
    field_.bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_field();
  }
}
inline const std::string& NextStepRequest_FormFields::bytes() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.FormFields.bytes)
  return _internal_bytes();
}
inline void NextStepRequest_FormFields::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}
inline std::string* NextStepRequest_FormFields::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.FormFields.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& NextStepRequest_FormFields::_internal_bytes() const {
  if (_internal_has_bytes()) {
    return field_.bytes_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void NextStepRequest_FormFields::_internal_set_bytes(const std::string& value) {
  if (!_internal_has_bytes()) {
    clear_field();
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NextStepRequest_FormFields::set_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.FormFields.bytes)
  if (!_internal_has_bytes()) {
    clear_field();
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}
inline void NextStepRequest_FormFields::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes()) {
    clear_field();
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}
inline void NextStepRequest_FormFields::set_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_bytes()) {
    clear_field();
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.bytes_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}
inline std::string* NextStepRequest_FormFields::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_field();
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return field_.bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NextStepRequest_FormFields::release_bytes() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.FormFields.bytes)
  if (_internal_has_bytes()) {
    clear_has_field();
    return field_.bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void NextStepRequest_FormFields::set_allocated_bytes(std::string* bytes) {
  if (has_field()) {
    clear_field();
  }
  if (bytes != nullptr) {
    set_has_bytes();
    field_.bytes_.UnsafeSetDefault(bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}
inline std::string* NextStepRequest_FormFields::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.FormFields.bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_bytes()) {
    clear_has_field();
    return field_.bytes_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void NextStepRequest_FormFields::unsafe_arena_set_allocated_bytes(std::string* bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_bytes()) {
    field_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_field();
  if (bytes) {
    set_has_bytes();
    field_.bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.FormFields.bytes)
}

// string string = 2;
inline bool NextStepRequest_FormFields::_internal_has_string() const {
  return field_case() == kString;
}
inline void NextStepRequest_FormFields::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void NextStepRequest_FormFields::clear_string() {
  if (_internal_has_string()) {
    field_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_field();
  }
}
inline const std::string& NextStepRequest_FormFields::string() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.FormFields.string)
  return _internal_string();
}
inline void NextStepRequest_FormFields::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.FormFields.string)
}
inline std::string* NextStepRequest_FormFields::mutable_string() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.FormFields.string)
  return _internal_mutable_string();
}
inline const std::string& NextStepRequest_FormFields::_internal_string() const {
  if (_internal_has_string()) {
    return field_.string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void NextStepRequest_FormFields::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_field();
    set_has_string();
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NextStepRequest_FormFields::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.FormFields.string)
  if (!_internal_has_string()) {
    clear_field();
    set_has_string();
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.NextStepRequest.FormFields.string)
}
inline void NextStepRequest_FormFields::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_field();
    set_has_string();
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.NextStepRequest.FormFields.string)
}
inline void NextStepRequest_FormFields::set_string(const char* value,
                             size_t size) {
  if (!_internal_has_string()) {
    clear_field();
    set_has_string();
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  field_.string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.NextStepRequest.FormFields.string)
}
inline std::string* NextStepRequest_FormFields::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_field();
    set_has_string();
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return field_.string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NextStepRequest_FormFields::release_string() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.FormFields.string)
  if (_internal_has_string()) {
    clear_has_field();
    return field_.string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void NextStepRequest_FormFields::set_allocated_string(std::string* string) {
  if (has_field()) {
    clear_field();
  }
  if (string != nullptr) {
    set_has_string();
    field_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.FormFields.string)
}
inline std::string* NextStepRequest_FormFields::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.FormFields.string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string()) {
    clear_has_field();
    return field_.string_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void NextStepRequest_FormFields::unsafe_arena_set_allocated_string(std::string* string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string()) {
    field_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_field();
  if (string) {
    set_has_string();
    field_.string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.FormFields.string)
}

// int64 number = 3;
inline bool NextStepRequest_FormFields::_internal_has_number() const {
  return field_case() == kNumber;
}
inline void NextStepRequest_FormFields::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void NextStepRequest_FormFields::clear_number() {
  if (_internal_has_number()) {
    field_.number_ = PROTOBUF_LONGLONG(0);
    clear_has_field();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NextStepRequest_FormFields::_internal_number() const {
  if (_internal_has_number()) {
    return field_.number_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void NextStepRequest_FormFields::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_number()) {
    clear_field();
    set_has_number();
  }
  field_.number_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NextStepRequest_FormFields::number() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.FormFields.number)
  return _internal_number();
}
inline void NextStepRequest_FormFields::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.FormFields.number)
}

inline bool NextStepRequest_FormFields::has_field() const {
  return field_case() != FIELD_NOT_SET;
}
inline void NextStepRequest_FormFields::clear_has_field() {
  _oneof_case_[0] = FIELD_NOT_SET;
}
inline NextStepRequest_FormFields::FieldCase NextStepRequest_FormFields::field_case() const {
  return NextStepRequest_FormFields::FieldCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NextStepRequest_Form

// repeated .protocol.auth.v1.NextStepRequest.FormFields fields = 1;
inline int NextStepRequest_Form::_internal_fields_size() const {
  return fields_.size();
}
inline int NextStepRequest_Form::fields_size() const {
  return _internal_fields_size();
}
inline void NextStepRequest_Form::clear_fields() {
  fields_.Clear();
}
inline ::protocol::auth::v1::NextStepRequest_FormFields* NextStepRequest_Form::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.Form.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::NextStepRequest_FormFields >*
NextStepRequest_Form::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.auth.v1.NextStepRequest.Form.fields)
  return &fields_;
}
inline const ::protocol::auth::v1::NextStepRequest_FormFields& NextStepRequest_Form::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::protocol::auth::v1::NextStepRequest_FormFields& NextStepRequest_Form::fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.Form.fields)
  return _internal_fields(index);
}
inline ::protocol::auth::v1::NextStepRequest_FormFields* NextStepRequest_Form::_internal_add_fields() {
  return fields_.Add();
}
inline ::protocol::auth::v1::NextStepRequest_FormFields* NextStepRequest_Form::add_fields() {
  // @@protoc_insertion_point(field_add:protocol.auth.v1.NextStepRequest.Form.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::auth::v1::NextStepRequest_FormFields >&
NextStepRequest_Form::fields() const {
  // @@protoc_insertion_point(field_list:protocol.auth.v1.NextStepRequest.Form.fields)
  return fields_;
}

// -------------------------------------------------------------------

// NextStepRequest

// string auth_id = 1;
inline void NextStepRequest::clear_auth_id() {
  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NextStepRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.auth_id)
  return _internal_auth_id();
}
inline void NextStepRequest::set_auth_id(const std::string& value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.NextStepRequest.auth_id)
}
inline std::string* NextStepRequest::mutable_auth_id() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.auth_id)
  return _internal_mutable_auth_id();
}
inline const std::string& NextStepRequest::_internal_auth_id() const {
  return auth_id_.Get();
}
inline void NextStepRequest::_internal_set_auth_id(const std::string& value) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NextStepRequest::set_auth_id(std::string&& value) {
  
  auth_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.NextStepRequest.auth_id)
}
inline void NextStepRequest::set_auth_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.NextStepRequest.auth_id)
}
inline void NextStepRequest::set_auth_id(const char* value,
    size_t size) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.NextStepRequest.auth_id)
}
inline std::string* NextStepRequest::_internal_mutable_auth_id() {
  
  return auth_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NextStepRequest::release_auth_id() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.auth_id)
  return auth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NextStepRequest::set_allocated_auth_id(std::string* auth_id) {
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.auth_id)
}
inline std::string* NextStepRequest::unsafe_arena_release_auth_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.auth_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NextStepRequest::unsafe_arena_set_allocated_auth_id(
    std::string* auth_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.auth_id)
}

// .protocol.auth.v1.NextStepRequest.Choice choice = 2;
inline bool NextStepRequest::_internal_has_choice() const {
  return step_case() == kChoice;
}
inline bool NextStepRequest::has_choice() const {
  return _internal_has_choice();
}
inline void NextStepRequest::set_has_choice() {
  _oneof_case_[0] = kChoice;
}
inline void NextStepRequest::clear_choice() {
  if (_internal_has_choice()) {
    if (GetArena() == nullptr) {
      delete step_.choice_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::NextStepRequest_Choice* NextStepRequest::release_choice() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.choice)
  if (_internal_has_choice()) {
    clear_has_step();
      ::protocol::auth::v1::NextStepRequest_Choice* temp = step_.choice_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::NextStepRequest_Choice& NextStepRequest::_internal_choice() const {
  return _internal_has_choice()
      ? *step_.choice_
      : *reinterpret_cast< ::protocol::auth::v1::NextStepRequest_Choice*>(&::protocol::auth::v1::_NextStepRequest_Choice_default_instance_);
}
inline const ::protocol::auth::v1::NextStepRequest_Choice& NextStepRequest::choice() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.choice)
  return _internal_choice();
}
inline ::protocol::auth::v1::NextStepRequest_Choice* NextStepRequest::unsafe_arena_release_choice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.choice)
  if (_internal_has_choice()) {
    clear_has_step();
    ::protocol::auth::v1::NextStepRequest_Choice* temp = step_.choice_;
    step_.choice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextStepRequest::unsafe_arena_set_allocated_choice(::protocol::auth::v1::NextStepRequest_Choice* choice) {
  clear_step();
  if (choice) {
    set_has_choice();
    step_.choice_ = choice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.choice)
}
inline ::protocol::auth::v1::NextStepRequest_Choice* NextStepRequest::_internal_mutable_choice() {
  if (!_internal_has_choice()) {
    clear_step();
    set_has_choice();
    step_.choice_ = CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest_Choice >(GetArena());
  }
  return step_.choice_;
}
inline ::protocol::auth::v1::NextStepRequest_Choice* NextStepRequest::mutable_choice() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.choice)
  return _internal_mutable_choice();
}

// .protocol.auth.v1.NextStepRequest.Form form = 3;
inline bool NextStepRequest::_internal_has_form() const {
  return step_case() == kForm;
}
inline bool NextStepRequest::has_form() const {
  return _internal_has_form();
}
inline void NextStepRequest::set_has_form() {
  _oneof_case_[0] = kForm;
}
inline void NextStepRequest::clear_form() {
  if (_internal_has_form()) {
    if (GetArena() == nullptr) {
      delete step_.form_;
    }
    clear_has_step();
  }
}
inline ::protocol::auth::v1::NextStepRequest_Form* NextStepRequest::release_form() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.NextStepRequest.form)
  if (_internal_has_form()) {
    clear_has_step();
      ::protocol::auth::v1::NextStepRequest_Form* temp = step_.form_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    step_.form_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::auth::v1::NextStepRequest_Form& NextStepRequest::_internal_form() const {
  return _internal_has_form()
      ? *step_.form_
      : *reinterpret_cast< ::protocol::auth::v1::NextStepRequest_Form*>(&::protocol::auth::v1::_NextStepRequest_Form_default_instance_);
}
inline const ::protocol::auth::v1::NextStepRequest_Form& NextStepRequest::form() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.NextStepRequest.form)
  return _internal_form();
}
inline ::protocol::auth::v1::NextStepRequest_Form* NextStepRequest::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.NextStepRequest.form)
  if (_internal_has_form()) {
    clear_has_step();
    ::protocol::auth::v1::NextStepRequest_Form* temp = step_.form_;
    step_.form_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NextStepRequest::unsafe_arena_set_allocated_form(::protocol::auth::v1::NextStepRequest_Form* form) {
  clear_step();
  if (form) {
    set_has_form();
    step_.form_ = form;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.NextStepRequest.form)
}
inline ::protocol::auth::v1::NextStepRequest_Form* NextStepRequest::_internal_mutable_form() {
  if (!_internal_has_form()) {
    clear_step();
    set_has_form();
    step_.form_ = CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest_Form >(GetArena());
  }
  return step_.form_;
}
inline ::protocol::auth::v1::NextStepRequest_Form* NextStepRequest::mutable_form() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.NextStepRequest.form)
  return _internal_mutable_form();
}

inline bool NextStepRequest::has_step() const {
  return step_case() != STEP_NOT_SET;
}
inline void NextStepRequest::clear_has_step() {
  _oneof_case_[0] = STEP_NOT_SET;
}
inline NextStepRequest::StepCase NextStepRequest::step_case() const {
  return NextStepRequest::StepCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StepBackRequest

// string auth_id = 1;
inline void StepBackRequest::clear_auth_id() {
  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StepBackRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.StepBackRequest.auth_id)
  return _internal_auth_id();
}
inline void StepBackRequest::set_auth_id(const std::string& value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.StepBackRequest.auth_id)
}
inline std::string* StepBackRequest::mutable_auth_id() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.StepBackRequest.auth_id)
  return _internal_mutable_auth_id();
}
inline const std::string& StepBackRequest::_internal_auth_id() const {
  return auth_id_.Get();
}
inline void StepBackRequest::_internal_set_auth_id(const std::string& value) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StepBackRequest::set_auth_id(std::string&& value) {
  
  auth_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.StepBackRequest.auth_id)
}
inline void StepBackRequest::set_auth_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.StepBackRequest.auth_id)
}
inline void StepBackRequest::set_auth_id(const char* value,
    size_t size) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.StepBackRequest.auth_id)
}
inline std::string* StepBackRequest::_internal_mutable_auth_id() {
  
  return auth_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StepBackRequest::release_auth_id() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.StepBackRequest.auth_id)
  return auth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StepBackRequest::set_allocated_auth_id(std::string* auth_id) {
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.StepBackRequest.auth_id)
}
inline std::string* StepBackRequest::unsafe_arena_release_auth_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.StepBackRequest.auth_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StepBackRequest::unsafe_arena_set_allocated_auth_id(
    std::string* auth_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.StepBackRequest.auth_id)
}

// -------------------------------------------------------------------

// StreamStepsRequest

// string auth_id = 1;
inline void StreamStepsRequest::clear_auth_id() {
  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamStepsRequest::auth_id() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.StreamStepsRequest.auth_id)
  return _internal_auth_id();
}
inline void StreamStepsRequest::set_auth_id(const std::string& value) {
  _internal_set_auth_id(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.StreamStepsRequest.auth_id)
}
inline std::string* StreamStepsRequest::mutable_auth_id() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.StreamStepsRequest.auth_id)
  return _internal_mutable_auth_id();
}
inline const std::string& StreamStepsRequest::_internal_auth_id() const {
  return auth_id_.Get();
}
inline void StreamStepsRequest::_internal_set_auth_id(const std::string& value) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamStepsRequest::set_auth_id(std::string&& value) {
  
  auth_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.StreamStepsRequest.auth_id)
}
inline void StreamStepsRequest::set_auth_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.StreamStepsRequest.auth_id)
}
inline void StreamStepsRequest::set_auth_id(const char* value,
    size_t size) {
  
  auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.StreamStepsRequest.auth_id)
}
inline std::string* StreamStepsRequest::_internal_mutable_auth_id() {
  
  return auth_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamStepsRequest::release_auth_id() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.StreamStepsRequest.auth_id)
  return auth_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamStepsRequest::set_allocated_auth_id(std::string* auth_id) {
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.StreamStepsRequest.auth_id)
}
inline std::string* StreamStepsRequest::unsafe_arena_release_auth_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.StreamStepsRequest.auth_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamStepsRequest::unsafe_arena_set_allocated_auth_id(
    std::string* auth_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_id != nullptr) {
    
  } else {
    
  }
  auth_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.StreamStepsRequest.auth_id)
}

// -------------------------------------------------------------------

// FederateRequest

// string target = 1;
inline void FederateRequest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FederateRequest::target() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.FederateRequest.target)
  return _internal_target();
}
inline void FederateRequest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.FederateRequest.target)
}
inline std::string* FederateRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.FederateRequest.target)
  return _internal_mutable_target();
}
inline const std::string& FederateRequest::_internal_target() const {
  return target_.Get();
}
inline void FederateRequest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FederateRequest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.FederateRequest.target)
}
inline void FederateRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.FederateRequest.target)
}
inline void FederateRequest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.FederateRequest.target)
}
inline std::string* FederateRequest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FederateRequest::release_target() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.FederateRequest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FederateRequest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.FederateRequest.target)
}
inline std::string* FederateRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.FederateRequest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FederateRequest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.FederateRequest.target)
}

// -------------------------------------------------------------------

// FederateReply

// string token = 1;
inline void FederateReply::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FederateReply::token() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.FederateReply.token)
  return _internal_token();
}
inline void FederateReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.FederateReply.token)
}
inline std::string* FederateReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.FederateReply.token)
  return _internal_mutable_token();
}
inline const std::string& FederateReply::_internal_token() const {
  return token_.Get();
}
inline void FederateReply::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FederateReply::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.FederateReply.token)
}
inline void FederateReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.FederateReply.token)
}
inline void FederateReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.FederateReply.token)
}
inline std::string* FederateReply::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FederateReply::release_token() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.FederateReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FederateReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.FederateReply.token)
}
inline std::string* FederateReply::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.FederateReply.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FederateReply::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.FederateReply.token)
}

// string nonce = 2;
inline void FederateReply::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FederateReply::nonce() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.FederateReply.nonce)
  return _internal_nonce();
}
inline void FederateReply::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.FederateReply.nonce)
}
inline std::string* FederateReply::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.FederateReply.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& FederateReply::_internal_nonce() const {
  return nonce_.Get();
}
inline void FederateReply::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FederateReply::set_nonce(std::string&& value) {
  
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.FederateReply.nonce)
}
inline void FederateReply::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.FederateReply.nonce)
}
inline void FederateReply::set_nonce(const char* value,
    size_t size) {
  
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.FederateReply.nonce)
}
inline std::string* FederateReply::_internal_mutable_nonce() {
  
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FederateReply::release_nonce() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.FederateReply.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FederateReply::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.FederateReply.nonce)
}
inline std::string* FederateReply::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.FederateReply.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FederateReply::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.FederateReply.nonce)
}

// -------------------------------------------------------------------

// KeyReply

// string key = 1;
inline void KeyReply::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyReply::key() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.KeyReply.key)
  return _internal_key();
}
inline void KeyReply::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.KeyReply.key)
}
inline std::string* KeyReply::mutable_key() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.KeyReply.key)
  return _internal_mutable_key();
}
inline const std::string& KeyReply::_internal_key() const {
  return key_.Get();
}
inline void KeyReply::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyReply::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.KeyReply.key)
}
inline void KeyReply::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.KeyReply.key)
}
inline void KeyReply::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.KeyReply.key)
}
inline std::string* KeyReply::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyReply::release_key() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.KeyReply.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyReply::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.KeyReply.key)
}
inline std::string* KeyReply::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.KeyReply.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyReply::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.KeyReply.key)
}

// -------------------------------------------------------------------

// LoginFederatedRequest

// string auth_token = 1;
inline void LoginFederatedRequest::clear_auth_token() {
  auth_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginFederatedRequest::auth_token() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.LoginFederatedRequest.auth_token)
  return _internal_auth_token();
}
inline void LoginFederatedRequest::set_auth_token(const std::string& value) {
  _internal_set_auth_token(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.LoginFederatedRequest.auth_token)
}
inline std::string* LoginFederatedRequest::mutable_auth_token() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.LoginFederatedRequest.auth_token)
  return _internal_mutable_auth_token();
}
inline const std::string& LoginFederatedRequest::_internal_auth_token() const {
  return auth_token_.Get();
}
inline void LoginFederatedRequest::_internal_set_auth_token(const std::string& value) {
  
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginFederatedRequest::set_auth_token(std::string&& value) {
  
  auth_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.LoginFederatedRequest.auth_token)
}
inline void LoginFederatedRequest::set_auth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.LoginFederatedRequest.auth_token)
}
inline void LoginFederatedRequest::set_auth_token(const char* value,
    size_t size) {
  
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.LoginFederatedRequest.auth_token)
}
inline std::string* LoginFederatedRequest::_internal_mutable_auth_token() {
  
  return auth_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginFederatedRequest::release_auth_token() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.LoginFederatedRequest.auth_token)
  return auth_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginFederatedRequest::set_allocated_auth_token(std::string* auth_token) {
  if (auth_token != nullptr) {
    
  } else {
    
  }
  auth_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.LoginFederatedRequest.auth_token)
}
inline std::string* LoginFederatedRequest::unsafe_arena_release_auth_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.LoginFederatedRequest.auth_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auth_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginFederatedRequest::unsafe_arena_set_allocated_auth_token(
    std::string* auth_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auth_token != nullptr) {
    
  } else {
    
  }
  auth_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auth_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.LoginFederatedRequest.auth_token)
}

// string domain = 2;
inline void LoginFederatedRequest::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginFederatedRequest::domain() const {
  // @@protoc_insertion_point(field_get:protocol.auth.v1.LoginFederatedRequest.domain)
  return _internal_domain();
}
inline void LoginFederatedRequest::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:protocol.auth.v1.LoginFederatedRequest.domain)
}
inline std::string* LoginFederatedRequest::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:protocol.auth.v1.LoginFederatedRequest.domain)
  return _internal_mutable_domain();
}
inline const std::string& LoginFederatedRequest::_internal_domain() const {
  return domain_.Get();
}
inline void LoginFederatedRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginFederatedRequest::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.auth.v1.LoginFederatedRequest.domain)
}
inline void LoginFederatedRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.auth.v1.LoginFederatedRequest.domain)
}
inline void LoginFederatedRequest::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.auth.v1.LoginFederatedRequest.domain)
}
inline std::string* LoginFederatedRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginFederatedRequest::release_domain() {
  // @@protoc_insertion_point(field_release:protocol.auth.v1.LoginFederatedRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginFederatedRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.LoginFederatedRequest.domain)
}
inline std::string* LoginFederatedRequest::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.auth.v1.LoginFederatedRequest.domain)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginFederatedRequest::unsafe_arena_set_allocated_domain(
    std::string* domain) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.auth.v1.LoginFederatedRequest.domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace auth
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2fv1_2fauth_2eproto
