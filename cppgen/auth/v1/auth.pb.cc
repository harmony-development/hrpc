// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/v1/auth.proto

#include "auth/v1/auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2fv1_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Session_auth_2fv1_2fauth_2eproto;
namespace protocol {
namespace auth {
namespace v1 {
class BeginAuthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeginAuthResponse> _instance;
} _BeginAuthResponse_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Session> _instance;
} _Session_default_instance_;
class AuthStep_ChoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthStep_Choice> _instance;
} _AuthStep_Choice_default_instance_;
class AuthStep_Form_FormFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthStep_Form_FormField> _instance;
} _AuthStep_Form_FormField_default_instance_;
class AuthStep_FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthStep_Form> _instance;
} _AuthStep_Form_default_instance_;
class AuthStep_WaitingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthStep_Waiting> _instance;
} _AuthStep_Waiting_default_instance_;
class AuthStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthStep> _instance;
  const ::protocol::auth::v1::AuthStep_Choice* choice_;
  const ::protocol::auth::v1::AuthStep_Form* form_;
  const ::protocol::auth::v1::Session* session_;
  const ::protocol::auth::v1::AuthStep_Waiting* waiting_;
} _AuthStep_default_instance_;
class NextStepRequest_ChoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextStepRequest_Choice> _instance;
} _NextStepRequest_Choice_default_instance_;
class NextStepRequest_FormFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextStepRequest_FormFields> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
} _NextStepRequest_FormFields_default_instance_;
class NextStepRequest_FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextStepRequest_Form> _instance;
} _NextStepRequest_Form_default_instance_;
class NextStepRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextStepRequest> _instance;
  const ::protocol::auth::v1::NextStepRequest_Choice* choice_;
  const ::protocol::auth::v1::NextStepRequest_Form* form_;
} _NextStepRequest_default_instance_;
class StepBackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepBackRequest> _instance;
} _StepBackRequest_default_instance_;
class StreamStepsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStepsRequest> _instance;
} _StreamStepsRequest_default_instance_;
class FederateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FederateRequest> _instance;
} _FederateRequest_default_instance_;
class FederateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FederateReply> _instance;
} _FederateReply_default_instance_;
class KeyReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyReply> _instance;
} _KeyReply_default_instance_;
class LoginFederatedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginFederatedRequest> _instance;
} _LoginFederatedRequest_default_instance_;
}  // namespace v1
}  // namespace auth
}  // namespace protocol
static void InitDefaultsscc_info_AuthStep_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_AuthStep_default_instance_;
    new (ptr) ::protocol::auth::v1::AuthStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::AuthStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AuthStep_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AuthStep_auth_2fv1_2fauth_2eproto}, {
      &scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto.base,
      &scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto.base,
      &scc_info_Session_auth_2fv1_2fauth_2eproto.base,
      &scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto.base,}};

static void InitDefaultsscc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_AuthStep_Choice_default_instance_;
    new (ptr) ::protocol::auth::v1::AuthStep_Choice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::AuthStep_Choice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_AuthStep_Form_default_instance_;
    new (ptr) ::protocol::auth::v1::AuthStep_Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::AuthStep_Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto}, {
      &scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto.base,}};

static void InitDefaultsscc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_AuthStep_Form_FormField_default_instance_;
    new (ptr) ::protocol::auth::v1::AuthStep_Form_FormField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::AuthStep_Form_FormField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_AuthStep_Waiting_default_instance_;
    new (ptr) ::protocol::auth::v1::AuthStep_Waiting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::AuthStep_Waiting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_BeginAuthResponse_default_instance_;
    new (ptr) ::protocol::auth::v1::BeginAuthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::BeginAuthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_FederateReply_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_FederateReply_default_instance_;
    new (ptr) ::protocol::auth::v1::FederateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::FederateReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FederateReply_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FederateReply_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_FederateRequest_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_FederateRequest_default_instance_;
    new (ptr) ::protocol::auth::v1::FederateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::FederateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FederateRequest_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FederateRequest_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_KeyReply_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_KeyReply_default_instance_;
    new (ptr) ::protocol::auth::v1::KeyReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::KeyReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyReply_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyReply_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_LoginFederatedRequest_default_instance_;
    new (ptr) ::protocol::auth::v1::LoginFederatedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::LoginFederatedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_NextStepRequest_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_NextStepRequest_default_instance_;
    new (ptr) ::protocol::auth::v1::NextStepRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::NextStepRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NextStepRequest_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NextStepRequest_auth_2fv1_2fauth_2eproto}, {
      &scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto.base,
      &scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto.base,}};

static void InitDefaultsscc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_NextStepRequest_Choice_default_instance_;
    new (ptr) ::protocol::auth::v1::NextStepRequest_Choice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::NextStepRequest_Choice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_NextStepRequest_Form_default_instance_;
    new (ptr) ::protocol::auth::v1::NextStepRequest_Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::NextStepRequest_Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto}, {
      &scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto.base,}};

static void InitDefaultsscc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_NextStepRequest_FormFields_default_instance_;
    new (ptr) ::protocol::auth::v1::NextStepRequest_FormFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::NextStepRequest_FormFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_Session_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_Session_default_instance_;
    new (ptr) ::protocol::auth::v1::Session();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::Session::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Session_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Session_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_StepBackRequest_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_StepBackRequest_default_instance_;
    new (ptr) ::protocol::auth::v1::StepBackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::StepBackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepBackRequest_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StepBackRequest_auth_2fv1_2fauth_2eproto}, {}};

static void InitDefaultsscc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::auth::v1::_StreamStepsRequest_default_instance_;
    new (ptr) ::protocol::auth::v1::StreamStepsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::auth::v1::StreamStepsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_auth_2fv1_2fauth_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_auth_2fv1_2fauth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_auth_2fv1_2fauth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_auth_2fv1_2fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::BeginAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::BeginAuthResponse, auth_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::Session, user_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::Session, session_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Choice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Choice, title_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Choice, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form_FormField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form_FormField, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form_FormField, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form, title_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Form, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Waiting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Waiting, title_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep_Waiting, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep, fallback_url_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep, can_go_back_),
  offsetof(::protocol::auth::v1::AuthStepDefaultTypeInternal, choice_),
  offsetof(::protocol::auth::v1::AuthStepDefaultTypeInternal, form_),
  offsetof(::protocol::auth::v1::AuthStepDefaultTypeInternal, session_),
  offsetof(::protocol::auth::v1::AuthStepDefaultTypeInternal, waiting_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::AuthStep, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_Choice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_Choice, choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_FormFields, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_FormFields, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protocol::auth::v1::NextStepRequest_FormFieldsDefaultTypeInternal, bytes_),
  offsetof(::protocol::auth::v1::NextStepRequest_FormFieldsDefaultTypeInternal, string_),
  offsetof(::protocol::auth::v1::NextStepRequest_FormFieldsDefaultTypeInternal, number_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_FormFields, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_Form, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest_Form, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest, auth_id_),
  offsetof(::protocol::auth::v1::NextStepRequestDefaultTypeInternal, choice_),
  offsetof(::protocol::auth::v1::NextStepRequestDefaultTypeInternal, form_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::NextStepRequest, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::StepBackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::StepBackRequest, auth_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::StreamStepsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::StreamStepsRequest, auth_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::FederateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::FederateRequest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::FederateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::FederateReply, token_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::FederateReply, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::KeyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::KeyReply, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::LoginFederatedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::LoginFederatedRequest, auth_token_),
  PROTOBUF_FIELD_OFFSET(::protocol::auth::v1::LoginFederatedRequest, domain_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::auth::v1::BeginAuthResponse)},
  { 6, -1, sizeof(::protocol::auth::v1::Session)},
  { 13, -1, sizeof(::protocol::auth::v1::AuthStep_Choice)},
  { 20, -1, sizeof(::protocol::auth::v1::AuthStep_Form_FormField)},
  { 27, -1, sizeof(::protocol::auth::v1::AuthStep_Form)},
  { 34, -1, sizeof(::protocol::auth::v1::AuthStep_Waiting)},
  { 41, -1, sizeof(::protocol::auth::v1::AuthStep)},
  { 53, -1, sizeof(::protocol::auth::v1::NextStepRequest_Choice)},
  { 59, -1, sizeof(::protocol::auth::v1::NextStepRequest_FormFields)},
  { 68, -1, sizeof(::protocol::auth::v1::NextStepRequest_Form)},
  { 74, -1, sizeof(::protocol::auth::v1::NextStepRequest)},
  { 83, -1, sizeof(::protocol::auth::v1::StepBackRequest)},
  { 89, -1, sizeof(::protocol::auth::v1::StreamStepsRequest)},
  { 95, -1, sizeof(::protocol::auth::v1::FederateRequest)},
  { 101, -1, sizeof(::protocol::auth::v1::FederateReply)},
  { 108, -1, sizeof(::protocol::auth::v1::KeyReply)},
  { 114, -1, sizeof(::protocol::auth::v1::LoginFederatedRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_BeginAuthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_Session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_AuthStep_Choice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_AuthStep_Form_FormField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_AuthStep_Form_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_AuthStep_Waiting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_AuthStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_NextStepRequest_Choice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_NextStepRequest_FormFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_NextStepRequest_Form_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_NextStepRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_StepBackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_StreamStepsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_FederateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_FederateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_KeyReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::auth::v1::_LoginFederatedRequest_default_instance_),
};

const char descriptor_table_protodef_auth_2fv1_2fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022auth/v1/auth.proto\022\020protocol.auth.v1\032\033"
  "google/protobuf/empty.proto\"$\n\021BeginAuth"
  "Response\022\017\n\007auth_id\030\001 \001(\t\"5\n\007Session\022\023\n\007"
  "user_id\030\001 \001(\004B\0020\001\022\025\n\rsession_token\030\002 \001(\t"
  "\"\334\003\n\010AuthStep\022\024\n\014fallback_url\030\001 \001(\t\022\023\n\013c"
  "an_go_back\030\002 \001(\010\0223\n\006choice\030\003 \001(\0132!.proto"
  "col.auth.v1.AuthStep.ChoiceH\000\022/\n\004form\030\004 "
  "\001(\0132\037.protocol.auth.v1.AuthStep.FormH\000\022,"
  "\n\007session\030\005 \001(\0132\031.protocol.auth.v1.Sessi"
  "onH\000\0225\n\007waiting\030\006 \001(\0132\".protocol.auth.v1"
  ".AuthStep.WaitingH\000\032(\n\006Choice\022\r\n\005title\030\001"
  " \001(\t\022\017\n\007options\030\002 \003(\t\032y\n\004Form\022\r\n\005title\030\001"
  " \001(\t\0229\n\006fields\030\002 \003(\0132).protocol.auth.v1."
  "AuthStep.Form.FormField\032\'\n\tFormField\022\014\n\004"
  "name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\032-\n\007Waiting\022\r\n\005t"
  "itle\030\001 \001(\t\022\023\n\013description\030\002 \001(\tB\006\n\004step\""
  "\312\002\n\017NextStepRequest\022\017\n\007auth_id\030\001 \001(\t\022:\n\006"
  "choice\030\002 \001(\0132(.protocol.auth.v1.NextStep"
  "Request.ChoiceH\000\0226\n\004form\030\003 \001(\0132&.protoco"
  "l.auth.v1.NextStepRequest.FormH\000\032\030\n\006Choi"
  "ce\022\016\n\006choice\030\001 \001(\t\032J\n\nFormFields\022\017\n\005byte"
  "s\030\001 \001(\014H\000\022\020\n\006string\030\002 \001(\tH\000\022\020\n\006number\030\003 "
  "\001(\003H\000B\007\n\005field\032D\n\004Form\022<\n\006fields\030\001 \003(\0132,"
  ".protocol.auth.v1.NextStepRequest.FormFi"
  "eldsB\006\n\004step\"\"\n\017StepBackRequest\022\017\n\007auth_"
  "id\030\001 \001(\t\"%\n\022StreamStepsRequest\022\017\n\007auth_i"
  "d\030\001 \001(\t\"!\n\017FederateRequest\022\016\n\006target\030\001 \001"
  "(\t\"-\n\rFederateReply\022\r\n\005token\030\001 \001(\t\022\r\n\005no"
  "nce\030\002 \001(\t\"\027\n\010KeyReply\022\013\n\003key\030\001 \001(\t\";\n\025Lo"
  "ginFederatedRequest\022\022\n\nauth_token\030\001 \001(\t\022"
  "\016\n\006domain\030\002 \001(\t2\241\004\n\013AuthService\022N\n\010Feder"
  "ate\022!.protocol.auth.v1.FederateRequest\032\037"
  ".protocol.auth.v1.FederateReply\022T\n\016Login"
  "Federated\022\'.protocol.auth.v1.LoginFedera"
  "tedRequest\032\031.protocol.auth.v1.Session\0229\n"
  "\003Key\022\026.google.protobuf.Empty\032\032.protocol."
  "auth.v1.KeyReply\022H\n\tBeginAuth\022\026.google.p"
  "rotobuf.Empty\032#.protocol.auth.v1.BeginAu"
  "thResponse\022I\n\010NextStep\022!.protocol.auth.v"
  "1.NextStepRequest\032\032.protocol.auth.v1.Aut"
  "hStep\022I\n\010StepBack\022!.protocol.auth.v1.Ste"
  "pBackRequest\032\032.protocol.auth.v1.AuthStep"
  "\022Q\n\013StreamSteps\022$.protocol.auth.v1.Strea"
  "mStepsRequest\032\032.protocol.auth.v1.AuthSte"
  "p0\001B3Z1github.com/harmony-development/le"
  "gato/gen/auth/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_auth_2fv1_2fauth_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_auth_2fv1_2fauth_2eproto_sccs[17] = {
  &scc_info_AuthStep_auth_2fv1_2fauth_2eproto.base,
  &scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto.base,
  &scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto.base,
  &scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto.base,
  &scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto.base,
  &scc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto.base,
  &scc_info_FederateReply_auth_2fv1_2fauth_2eproto.base,
  &scc_info_FederateRequest_auth_2fv1_2fauth_2eproto.base,
  &scc_info_KeyReply_auth_2fv1_2fauth_2eproto.base,
  &scc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto.base,
  &scc_info_NextStepRequest_auth_2fv1_2fauth_2eproto.base,
  &scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto.base,
  &scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto.base,
  &scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto.base,
  &scc_info_Session_auth_2fv1_2fauth_2eproto.base,
  &scc_info_StepBackRequest_auth_2fv1_2fauth_2eproto.base,
  &scc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_auth_2fv1_2fauth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2fv1_2fauth_2eproto = {
  false, false, descriptor_table_protodef_auth_2fv1_2fauth_2eproto, "auth/v1/auth.proto", 1824,
  &descriptor_table_auth_2fv1_2fauth_2eproto_once, descriptor_table_auth_2fv1_2fauth_2eproto_sccs, descriptor_table_auth_2fv1_2fauth_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_auth_2fv1_2fauth_2eproto::offsets,
  file_level_metadata_auth_2fv1_2fauth_2eproto, 17, file_level_enum_descriptors_auth_2fv1_2fauth_2eproto, file_level_service_descriptors_auth_2fv1_2fauth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_auth_2fv1_2fauth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_auth_2fv1_2fauth_2eproto)), true);
namespace protocol {
namespace auth {
namespace v1 {

// ===================================================================

void BeginAuthResponse::InitAsDefaultInstance() {
}
class BeginAuthResponse::_Internal {
 public:
};

BeginAuthResponse::BeginAuthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.BeginAuthResponse)
}
BeginAuthResponse::BeginAuthResponse(const BeginAuthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_id().empty()) {
    auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.BeginAuthResponse)
}

void BeginAuthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto.base);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BeginAuthResponse::~BeginAuthResponse() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.BeginAuthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BeginAuthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeginAuthResponse::ArenaDtor(void* object) {
  BeginAuthResponse* _this = reinterpret_cast< BeginAuthResponse* >(object);
  (void)_this;
}
void BeginAuthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginAuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeginAuthResponse& BeginAuthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeginAuthResponse_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void BeginAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.BeginAuthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginAuthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.BeginAuthResponse.auth_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeginAuthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.BeginAuthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_id().data(), static_cast<int>(this->_internal_auth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.BeginAuthResponse.auth_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.BeginAuthResponse)
  return target;
}

size_t BeginAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.BeginAuthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeginAuthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.BeginAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginAuthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeginAuthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.BeginAuthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.BeginAuthResponse)
    MergeFrom(*source);
  }
}

void BeginAuthResponse::MergeFrom(const BeginAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.BeginAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_id().size() > 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
}

void BeginAuthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.BeginAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginAuthResponse::CopyFrom(const BeginAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.BeginAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginAuthResponse::IsInitialized() const {
  return true;
}

void BeginAuthResponse::InternalSwap(BeginAuthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_id_.Swap(&other->auth_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginAuthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Session::InitAsDefaultInstance() {
}
class Session::_Internal {
 public:
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_token().empty()) {
    session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_token(),
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.Session)
}

void Session::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Session_auth_2fv1_2fauth_2eproto.base);
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = PROTOBUF_ULONGLONG(0);
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.Session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Session::ArenaDtor(void* object) {
  Session* _this = reinterpret_cast< Session* >(object);
  (void)_this;
}
void Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Session& Session::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Session_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.Session.session_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.Session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string session_token = 2;
  if (this->session_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_token().data(), static_cast<int>(this->_internal_session_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.Session.session_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.Session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_token = 2;
  if (this->session_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_token());
  }

  // uint64 user_id = 1 [jstype = JS_STRING];
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.Session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_token().size() > 0) {
    _internal_set_session_token(from._internal_session_token());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_token_.Swap(&other->session_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthStep_Choice::InitAsDefaultInstance() {
}
class AuthStep_Choice::_Internal {
 public:
};

AuthStep_Choice::AuthStep_Choice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.AuthStep.Choice)
}
AuthStep_Choice::AuthStep_Choice(const AuthStep_Choice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.AuthStep.Choice)
}

void AuthStep_Choice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthStep_Choice::~AuthStep_Choice() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.AuthStep.Choice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthStep_Choice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthStep_Choice::ArenaDtor(void* object) {
  AuthStep_Choice* _this = reinterpret_cast< AuthStep_Choice* >(object);
  (void)_this;
}
void AuthStep_Choice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthStep_Choice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthStep_Choice& AuthStep_Choice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthStep_Choice_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthStep_Choice::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.AuthStep.Choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthStep_Choice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Choice.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Choice.options"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthStep_Choice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.AuthStep.Choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Choice.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated string options = 2;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Choice.options");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.AuthStep.Choice)
  return target;
}

size_t AuthStep_Choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.AuthStep.Choice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(options_.size());
  for (int i = 0, n = options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      options_.Get(i));
  }

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthStep_Choice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.AuthStep.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthStep_Choice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthStep_Choice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.AuthStep.Choice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.AuthStep.Choice)
    MergeFrom(*source);
  }
}

void AuthStep_Choice::MergeFrom(const AuthStep_Choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.AuthStep.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
}

void AuthStep_Choice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.AuthStep.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthStep_Choice::CopyFrom(const AuthStep_Choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.AuthStep.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthStep_Choice::IsInitialized() const {
  return true;
}

void AuthStep_Choice::InternalSwap(AuthStep_Choice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthStep_Choice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthStep_Form_FormField::InitAsDefaultInstance() {
}
class AuthStep_Form_FormField::_Internal {
 public:
};

AuthStep_Form_FormField::AuthStep_Form_FormField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.AuthStep.Form.FormField)
}
AuthStep_Form_FormField::AuthStep_Form_FormField(const AuthStep_Form_FormField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.AuthStep.Form.FormField)
}

void AuthStep_Form_FormField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthStep_Form_FormField::~AuthStep_Form_FormField() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.AuthStep.Form.FormField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthStep_Form_FormField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthStep_Form_FormField::ArenaDtor(void* object) {
  AuthStep_Form_FormField* _this = reinterpret_cast< AuthStep_Form_FormField* >(object);
  (void)_this;
}
void AuthStep_Form_FormField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthStep_Form_FormField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthStep_Form_FormField& AuthStep_Form_FormField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthStep_Form_FormField_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthStep_Form_FormField::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.AuthStep.Form.FormField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthStep_Form_FormField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Form.FormField.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Form.FormField.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthStep_Form_FormField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.AuthStep.Form.FormField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Form.FormField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Form.FormField.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.AuthStep.Form.FormField)
  return target;
}

size_t AuthStep_Form_FormField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.AuthStep.Form.FormField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthStep_Form_FormField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.AuthStep.Form.FormField)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthStep_Form_FormField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthStep_Form_FormField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.AuthStep.Form.FormField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.AuthStep.Form.FormField)
    MergeFrom(*source);
  }
}

void AuthStep_Form_FormField::MergeFrom(const AuthStep_Form_FormField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.AuthStep.Form.FormField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void AuthStep_Form_FormField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.AuthStep.Form.FormField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthStep_Form_FormField::CopyFrom(const AuthStep_Form_FormField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.AuthStep.Form.FormField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthStep_Form_FormField::IsInitialized() const {
  return true;
}

void AuthStep_Form_FormField::InternalSwap(AuthStep_Form_FormField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthStep_Form_FormField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthStep_Form::InitAsDefaultInstance() {
}
class AuthStep_Form::_Internal {
 public:
};

AuthStep_Form::AuthStep_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.AuthStep.Form)
}
AuthStep_Form::AuthStep_Form(const AuthStep_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.AuthStep.Form)
}

void AuthStep_Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthStep_Form::~AuthStep_Form() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.AuthStep.Form)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthStep_Form::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthStep_Form::ArenaDtor(void* object) {
  AuthStep_Form* _this = reinterpret_cast< AuthStep_Form* >(object);
  (void)_this;
}
void AuthStep_Form::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthStep_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthStep_Form& AuthStep_Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthStep_Form_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthStep_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.AuthStep.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthStep_Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Form.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.auth.v1.AuthStep.Form.FormField fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthStep_Form::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.AuthStep.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Form.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .protocol.auth.v1.AuthStep.Form.FormField fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.AuthStep.Form)
  return target;
}

size_t AuthStep_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.AuthStep.Form)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.auth.v1.AuthStep.Form.FormField fields = 2;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthStep_Form::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.AuthStep.Form)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthStep_Form* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthStep_Form>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.AuthStep.Form)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.AuthStep.Form)
    MergeFrom(*source);
  }
}

void AuthStep_Form::MergeFrom(const AuthStep_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.AuthStep.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
}

void AuthStep_Form::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.AuthStep.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthStep_Form::CopyFrom(const AuthStep_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.AuthStep.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthStep_Form::IsInitialized() const {
  return true;
}

void AuthStep_Form::InternalSwap(AuthStep_Form* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthStep_Form::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthStep_Waiting::InitAsDefaultInstance() {
}
class AuthStep_Waiting::_Internal {
 public:
};

AuthStep_Waiting::AuthStep_Waiting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.AuthStep.Waiting)
}
AuthStep_Waiting::AuthStep_Waiting(const AuthStep_Waiting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.AuthStep.Waiting)
}

void AuthStep_Waiting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthStep_Waiting::~AuthStep_Waiting() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.AuthStep.Waiting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthStep_Waiting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthStep_Waiting::ArenaDtor(void* object) {
  AuthStep_Waiting* _this = reinterpret_cast< AuthStep_Waiting* >(object);
  (void)_this;
}
void AuthStep_Waiting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthStep_Waiting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthStep_Waiting& AuthStep_Waiting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthStep_Waiting_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthStep_Waiting::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.AuthStep.Waiting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthStep_Waiting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Waiting.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.Waiting.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthStep_Waiting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.AuthStep.Waiting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Waiting.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.Waiting.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.AuthStep.Waiting)
  return target;
}

size_t AuthStep_Waiting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.AuthStep.Waiting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthStep_Waiting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.AuthStep.Waiting)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthStep_Waiting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthStep_Waiting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.AuthStep.Waiting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.AuthStep.Waiting)
    MergeFrom(*source);
  }
}

void AuthStep_Waiting::MergeFrom(const AuthStep_Waiting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.AuthStep.Waiting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
}

void AuthStep_Waiting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.AuthStep.Waiting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthStep_Waiting::CopyFrom(const AuthStep_Waiting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.AuthStep.Waiting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthStep_Waiting::IsInitialized() const {
  return true;
}

void AuthStep_Waiting::InternalSwap(AuthStep_Waiting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthStep_Waiting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthStep::InitAsDefaultInstance() {
  ::protocol::auth::v1::_AuthStep_default_instance_.choice_ = const_cast< ::protocol::auth::v1::AuthStep_Choice*>(
      ::protocol::auth::v1::AuthStep_Choice::internal_default_instance());
  ::protocol::auth::v1::_AuthStep_default_instance_.form_ = const_cast< ::protocol::auth::v1::AuthStep_Form*>(
      ::protocol::auth::v1::AuthStep_Form::internal_default_instance());
  ::protocol::auth::v1::_AuthStep_default_instance_.session_ = const_cast< ::protocol::auth::v1::Session*>(
      ::protocol::auth::v1::Session::internal_default_instance());
  ::protocol::auth::v1::_AuthStep_default_instance_.waiting_ = const_cast< ::protocol::auth::v1::AuthStep_Waiting*>(
      ::protocol::auth::v1::AuthStep_Waiting::internal_default_instance());
}
class AuthStep::_Internal {
 public:
  static const ::protocol::auth::v1::AuthStep_Choice& choice(const AuthStep* msg);
  static const ::protocol::auth::v1::AuthStep_Form& form(const AuthStep* msg);
  static const ::protocol::auth::v1::Session& session(const AuthStep* msg);
  static const ::protocol::auth::v1::AuthStep_Waiting& waiting(const AuthStep* msg);
};

const ::protocol::auth::v1::AuthStep_Choice&
AuthStep::_Internal::choice(const AuthStep* msg) {
  return *msg->step_.choice_;
}
const ::protocol::auth::v1::AuthStep_Form&
AuthStep::_Internal::form(const AuthStep* msg) {
  return *msg->step_.form_;
}
const ::protocol::auth::v1::Session&
AuthStep::_Internal::session(const AuthStep* msg) {
  return *msg->step_.session_;
}
const ::protocol::auth::v1::AuthStep_Waiting&
AuthStep::_Internal::waiting(const AuthStep* msg) {
  return *msg->step_.waiting_;
}
void AuthStep::set_allocated_choice(::protocol::auth::v1::AuthStep_Choice* choice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (choice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(choice);
    if (message_arena != submessage_arena) {
      choice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choice, submessage_arena);
    }
    set_has_choice();
    step_.choice_ = choice;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.choice)
}
void AuthStep::set_allocated_form(::protocol::auth::v1::AuthStep_Form* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(form);
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    set_has_form();
    step_.form_ = form;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.form)
}
void AuthStep::set_allocated_session(::protocol::auth::v1::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    step_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.session)
}
void AuthStep::set_allocated_waiting(::protocol::auth::v1::AuthStep_Waiting* waiting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (waiting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(waiting);
    if (message_arena != submessage_arena) {
      waiting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waiting, submessage_arena);
    }
    set_has_waiting();
    step_.waiting_ = waiting;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.AuthStep.waiting)
}
AuthStep::AuthStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.AuthStep)
}
AuthStep::AuthStep(const AuthStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fallback_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fallback_url().empty()) {
    fallback_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fallback_url(),
      GetArena());
  }
  can_go_back_ = from.can_go_back_;
  clear_has_step();
  switch (from.step_case()) {
    case kChoice: {
      _internal_mutable_choice()->::protocol::auth::v1::AuthStep_Choice::MergeFrom(from._internal_choice());
      break;
    }
    case kForm: {
      _internal_mutable_form()->::protocol::auth::v1::AuthStep_Form::MergeFrom(from._internal_form());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::protocol::auth::v1::Session::MergeFrom(from._internal_session());
      break;
    }
    case kWaiting: {
      _internal_mutable_waiting()->::protocol::auth::v1::AuthStep_Waiting::MergeFrom(from._internal_waiting());
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.AuthStep)
}

void AuthStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthStep_auth_2fv1_2fauth_2eproto.base);
  fallback_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  can_go_back_ = false;
  clear_has_step();
}

AuthStep::~AuthStep() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.AuthStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fallback_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_step()) {
    clear_step();
  }
}

void AuthStep::ArenaDtor(void* object) {
  AuthStep* _this = reinterpret_cast< AuthStep* >(object);
  (void)_this;
}
void AuthStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthStep& AuthStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthStep_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthStep::clear_step() {
// @@protoc_insertion_point(one_of_clear_start:protocol.auth.v1.AuthStep)
  switch (step_case()) {
    case kChoice: {
      if (GetArena() == nullptr) {
        delete step_.choice_;
      }
      break;
    }
    case kForm: {
      if (GetArena() == nullptr) {
        delete step_.form_;
      }
      break;
    }
    case kSession: {
      if (GetArena() == nullptr) {
        delete step_.session_;
      }
      break;
    }
    case kWaiting: {
      if (GetArena() == nullptr) {
        delete step_.waiting_;
      }
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STEP_NOT_SET;
}


void AuthStep::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.AuthStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fallback_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  can_go_back_ = false;
  clear_step();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fallback_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fallback_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.AuthStep.fallback_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_go_back = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          can_go_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.AuthStep.Choice choice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_choice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.AuthStep.Form form = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.Session session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.AuthStep.Waiting waiting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_waiting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.AuthStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fallback_url = 1;
  if (this->fallback_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fallback_url().data(), static_cast<int>(this->_internal_fallback_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.AuthStep.fallback_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fallback_url(), target);
  }

  // bool can_go_back = 2;
  if (this->can_go_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_go_back(), target);
  }

  // .protocol.auth.v1.AuthStep.Choice choice = 3;
  if (_internal_has_choice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::choice(this), target, stream);
  }

  // .protocol.auth.v1.AuthStep.Form form = 4;
  if (_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::form(this), target, stream);
  }

  // .protocol.auth.v1.Session session = 5;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::session(this), target, stream);
  }

  // .protocol.auth.v1.AuthStep.Waiting waiting = 6;
  if (_internal_has_waiting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::waiting(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.AuthStep)
  return target;
}

size_t AuthStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.AuthStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fallback_url = 1;
  if (this->fallback_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fallback_url());
  }

  // bool can_go_back = 2;
  if (this->can_go_back() != 0) {
    total_size += 1 + 1;
  }

  switch (step_case()) {
    // .protocol.auth.v1.AuthStep.Choice choice = 3;
    case kChoice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.choice_);
      break;
    }
    // .protocol.auth.v1.AuthStep.Form form = 4;
    case kForm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.form_);
      break;
    }
    // .protocol.auth.v1.Session session = 5;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.session_);
      break;
    }
    // .protocol.auth.v1.AuthStep.Waiting waiting = 6;
    case kWaiting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.waiting_);
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.AuthStep)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.AuthStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.AuthStep)
    MergeFrom(*source);
  }
}

void AuthStep::MergeFrom(const AuthStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.AuthStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fallback_url().size() > 0) {
    _internal_set_fallback_url(from._internal_fallback_url());
  }
  if (from.can_go_back() != 0) {
    _internal_set_can_go_back(from._internal_can_go_back());
  }
  switch (from.step_case()) {
    case kChoice: {
      _internal_mutable_choice()->::protocol::auth::v1::AuthStep_Choice::MergeFrom(from._internal_choice());
      break;
    }
    case kForm: {
      _internal_mutable_form()->::protocol::auth::v1::AuthStep_Form::MergeFrom(from._internal_form());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::protocol::auth::v1::Session::MergeFrom(from._internal_session());
      break;
    }
    case kWaiting: {
      _internal_mutable_waiting()->::protocol::auth::v1::AuthStep_Waiting::MergeFrom(from._internal_waiting());
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
}

void AuthStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.AuthStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthStep::CopyFrom(const AuthStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.AuthStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthStep::IsInitialized() const {
  return true;
}

void AuthStep::InternalSwap(AuthStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fallback_url_.Swap(&other->fallback_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(can_go_back_, other->can_go_back_);
  swap(step_, other->step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextStepRequest_Choice::InitAsDefaultInstance() {
}
class NextStepRequest_Choice::_Internal {
 public:
};

NextStepRequest_Choice::NextStepRequest_Choice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.NextStepRequest.Choice)
}
NextStepRequest_Choice::NextStepRequest_Choice(const NextStepRequest_Choice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  choice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_choice().empty()) {
    choice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_choice(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.NextStepRequest.Choice)
}

void NextStepRequest_Choice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto.base);
  choice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NextStepRequest_Choice::~NextStepRequest_Choice() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.NextStepRequest.Choice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NextStepRequest_Choice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  choice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NextStepRequest_Choice::ArenaDtor(void* object) {
  NextStepRequest_Choice* _this = reinterpret_cast< NextStepRequest_Choice* >(object);
  (void)_this;
}
void NextStepRequest_Choice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextStepRequest_Choice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextStepRequest_Choice& NextStepRequest_Choice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextStepRequest_Choice_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void NextStepRequest_Choice::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.NextStepRequest.Choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextStepRequest_Choice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_choice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.NextStepRequest.Choice.choice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextStepRequest_Choice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.NextStepRequest.Choice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string choice = 1;
  if (this->choice().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_choice().data(), static_cast<int>(this->_internal_choice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.NextStepRequest.Choice.choice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.NextStepRequest.Choice)
  return target;
}

size_t NextStepRequest_Choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.NextStepRequest.Choice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string choice = 1;
  if (this->choice().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_choice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextStepRequest_Choice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.NextStepRequest.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  const NextStepRequest_Choice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextStepRequest_Choice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.NextStepRequest.Choice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.NextStepRequest.Choice)
    MergeFrom(*source);
  }
}

void NextStepRequest_Choice::MergeFrom(const NextStepRequest_Choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.NextStepRequest.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.choice().size() > 0) {
    _internal_set_choice(from._internal_choice());
  }
}

void NextStepRequest_Choice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.NextStepRequest.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStepRequest_Choice::CopyFrom(const NextStepRequest_Choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.NextStepRequest.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStepRequest_Choice::IsInitialized() const {
  return true;
}

void NextStepRequest_Choice::InternalSwap(NextStepRequest_Choice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  choice_.Swap(&other->choice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NextStepRequest_Choice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextStepRequest_FormFields::InitAsDefaultInstance() {
  ::protocol::auth::v1::_NextStepRequest_FormFields_default_instance_.bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protocol::auth::v1::_NextStepRequest_FormFields_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::protocol::auth::v1::_NextStepRequest_FormFields_default_instance_.number_ = PROTOBUF_LONGLONG(0);
}
class NextStepRequest_FormFields::_Internal {
 public:
};

NextStepRequest_FormFields::NextStepRequest_FormFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.NextStepRequest.FormFields)
}
NextStepRequest_FormFields::NextStepRequest_FormFields(const NextStepRequest_FormFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_field();
  switch (from.field_case()) {
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.NextStepRequest.FormFields)
}

void NextStepRequest_FormFields::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto.base);
  clear_has_field();
}

NextStepRequest_FormFields::~NextStepRequest_FormFields() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.NextStepRequest.FormFields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NextStepRequest_FormFields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_field()) {
    clear_field();
  }
}

void NextStepRequest_FormFields::ArenaDtor(void* object) {
  NextStepRequest_FormFields* _this = reinterpret_cast< NextStepRequest_FormFields* >(object);
  (void)_this;
}
void NextStepRequest_FormFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextStepRequest_FormFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextStepRequest_FormFields& NextStepRequest_FormFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextStepRequest_FormFields_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void NextStepRequest_FormFields::clear_field() {
// @@protoc_insertion_point(one_of_clear_start:protocol.auth.v1.NextStepRequest.FormFields)
  switch (field_case()) {
    case kBytes: {
      field_.bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kString: {
      field_.string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kNumber: {
      // No need to clear
      break;
    }
    case FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELD_NOT_SET;
}


void NextStepRequest_FormFields::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.NextStepRequest.FormFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_field();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextStepRequest_FormFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.NextStepRequest.FormFields.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextStepRequest_FormFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.NextStepRequest.FormFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes bytes = 1;
  if (_internal_has_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytes(), target);
  }

  // string string = 2;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.NextStepRequest.FormFields.string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string(), target);
  }

  // int64 number = 3;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.NextStepRequest.FormFields)
  return target;
}

size_t NextStepRequest_FormFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.NextStepRequest.FormFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (field_case()) {
    // bytes bytes = 1;
    case kBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes());
      break;
    }
    // string string = 2;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // int64 number = 3;
    case kNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_number());
      break;
    }
    case FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextStepRequest_FormFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.NextStepRequest.FormFields)
  GOOGLE_DCHECK_NE(&from, this);
  const NextStepRequest_FormFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextStepRequest_FormFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.NextStepRequest.FormFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.NextStepRequest.FormFields)
    MergeFrom(*source);
  }
}

void NextStepRequest_FormFields::MergeFrom(const NextStepRequest_FormFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.NextStepRequest.FormFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.field_case()) {
    case kBytes: {
      _internal_set_bytes(from._internal_bytes());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case FIELD_NOT_SET: {
      break;
    }
  }
}

void NextStepRequest_FormFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.NextStepRequest.FormFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStepRequest_FormFields::CopyFrom(const NextStepRequest_FormFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.NextStepRequest.FormFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStepRequest_FormFields::IsInitialized() const {
  return true;
}

void NextStepRequest_FormFields::InternalSwap(NextStepRequest_FormFields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(field_, other->field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextStepRequest_FormFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextStepRequest_Form::InitAsDefaultInstance() {
}
class NextStepRequest_Form::_Internal {
 public:
};

NextStepRequest_Form::NextStepRequest_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.NextStepRequest.Form)
}
NextStepRequest_Form::NextStepRequest_Form(const NextStepRequest_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.NextStepRequest.Form)
}

void NextStepRequest_Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto.base);
}

NextStepRequest_Form::~NextStepRequest_Form() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.NextStepRequest.Form)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NextStepRequest_Form::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NextStepRequest_Form::ArenaDtor(void* object) {
  NextStepRequest_Form* _this = reinterpret_cast< NextStepRequest_Form* >(object);
  (void)_this;
}
void NextStepRequest_Form::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextStepRequest_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextStepRequest_Form& NextStepRequest_Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextStepRequest_Form_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void NextStepRequest_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.NextStepRequest.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextStepRequest_Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.auth.v1.NextStepRequest.FormFields fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextStepRequest_Form::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.NextStepRequest.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.auth.v1.NextStepRequest.FormFields fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.NextStepRequest.Form)
  return target;
}

size_t NextStepRequest_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.NextStepRequest.Form)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.auth.v1.NextStepRequest.FormFields fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextStepRequest_Form::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.NextStepRequest.Form)
  GOOGLE_DCHECK_NE(&from, this);
  const NextStepRequest_Form* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextStepRequest_Form>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.NextStepRequest.Form)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.NextStepRequest.Form)
    MergeFrom(*source);
  }
}

void NextStepRequest_Form::MergeFrom(const NextStepRequest_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.NextStepRequest.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void NextStepRequest_Form::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.NextStepRequest.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStepRequest_Form::CopyFrom(const NextStepRequest_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.NextStepRequest.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStepRequest_Form::IsInitialized() const {
  return true;
}

void NextStepRequest_Form::InternalSwap(NextStepRequest_Form* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextStepRequest_Form::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextStepRequest::InitAsDefaultInstance() {
  ::protocol::auth::v1::_NextStepRequest_default_instance_.choice_ = const_cast< ::protocol::auth::v1::NextStepRequest_Choice*>(
      ::protocol::auth::v1::NextStepRequest_Choice::internal_default_instance());
  ::protocol::auth::v1::_NextStepRequest_default_instance_.form_ = const_cast< ::protocol::auth::v1::NextStepRequest_Form*>(
      ::protocol::auth::v1::NextStepRequest_Form::internal_default_instance());
}
class NextStepRequest::_Internal {
 public:
  static const ::protocol::auth::v1::NextStepRequest_Choice& choice(const NextStepRequest* msg);
  static const ::protocol::auth::v1::NextStepRequest_Form& form(const NextStepRequest* msg);
};

const ::protocol::auth::v1::NextStepRequest_Choice&
NextStepRequest::_Internal::choice(const NextStepRequest* msg) {
  return *msg->step_.choice_;
}
const ::protocol::auth::v1::NextStepRequest_Form&
NextStepRequest::_Internal::form(const NextStepRequest* msg) {
  return *msg->step_.form_;
}
void NextStepRequest::set_allocated_choice(::protocol::auth::v1::NextStepRequest_Choice* choice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (choice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(choice);
    if (message_arena != submessage_arena) {
      choice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choice, submessage_arena);
    }
    set_has_choice();
    step_.choice_ = choice;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.choice)
}
void NextStepRequest::set_allocated_form(::protocol::auth::v1::NextStepRequest_Form* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_step();
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(form);
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    set_has_form();
    step_.form_ = form;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.auth.v1.NextStepRequest.form)
}
NextStepRequest::NextStepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.NextStepRequest)
}
NextStepRequest::NextStepRequest(const NextStepRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_id().empty()) {
    auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_id(),
      GetArena());
  }
  clear_has_step();
  switch (from.step_case()) {
    case kChoice: {
      _internal_mutable_choice()->::protocol::auth::v1::NextStepRequest_Choice::MergeFrom(from._internal_choice());
      break;
    }
    case kForm: {
      _internal_mutable_form()->::protocol::auth::v1::NextStepRequest_Form::MergeFrom(from._internal_form());
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.NextStepRequest)
}

void NextStepRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextStepRequest_auth_2fv1_2fauth_2eproto.base);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_step();
}

NextStepRequest::~NextStepRequest() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.NextStepRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NextStepRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_step()) {
    clear_step();
  }
}

void NextStepRequest::ArenaDtor(void* object) {
  NextStepRequest* _this = reinterpret_cast< NextStepRequest* >(object);
  (void)_this;
}
void NextStepRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NextStepRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextStepRequest& NextStepRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextStepRequest_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void NextStepRequest::clear_step() {
// @@protoc_insertion_point(one_of_clear_start:protocol.auth.v1.NextStepRequest)
  switch (step_case()) {
    case kChoice: {
      if (GetArena() == nullptr) {
        delete step_.choice_;
      }
      break;
    }
    case kForm: {
      if (GetArena() == nullptr) {
        delete step_.form_;
      }
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STEP_NOT_SET;
}


void NextStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.NextStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_step();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextStepRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.NextStepRequest.auth_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.NextStepRequest.Choice choice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_choice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.auth.v1.NextStepRequest.Form form = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextStepRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.NextStepRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_id().data(), static_cast<int>(this->_internal_auth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.NextStepRequest.auth_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_id(), target);
  }

  // .protocol.auth.v1.NextStepRequest.Choice choice = 2;
  if (_internal_has_choice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::choice(this), target, stream);
  }

  // .protocol.auth.v1.NextStepRequest.Form form = 3;
  if (_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::form(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.NextStepRequest)
  return target;
}

size_t NextStepRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.NextStepRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_id());
  }

  switch (step_case()) {
    // .protocol.auth.v1.NextStepRequest.Choice choice = 2;
    case kChoice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.choice_);
      break;
    }
    // .protocol.auth.v1.NextStepRequest.Form form = 3;
    case kForm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_.form_);
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextStepRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.NextStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NextStepRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextStepRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.NextStepRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.NextStepRequest)
    MergeFrom(*source);
  }
}

void NextStepRequest::MergeFrom(const NextStepRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.NextStepRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_id().size() > 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
  switch (from.step_case()) {
    case kChoice: {
      _internal_mutable_choice()->::protocol::auth::v1::NextStepRequest_Choice::MergeFrom(from._internal_choice());
      break;
    }
    case kForm: {
      _internal_mutable_form()->::protocol::auth::v1::NextStepRequest_Form::MergeFrom(from._internal_form());
      break;
    }
    case STEP_NOT_SET: {
      break;
    }
  }
}

void NextStepRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.NextStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStepRequest::CopyFrom(const NextStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.NextStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStepRequest::IsInitialized() const {
  return true;
}

void NextStepRequest::InternalSwap(NextStepRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_id_.Swap(&other->auth_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(step_, other->step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextStepRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StepBackRequest::InitAsDefaultInstance() {
}
class StepBackRequest::_Internal {
 public:
};

StepBackRequest::StepBackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.StepBackRequest)
}
StepBackRequest::StepBackRequest(const StepBackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_id().empty()) {
    auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.StepBackRequest)
}

void StepBackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StepBackRequest_auth_2fv1_2fauth_2eproto.base);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StepBackRequest::~StepBackRequest() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.StepBackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StepBackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StepBackRequest::ArenaDtor(void* object) {
  StepBackRequest* _this = reinterpret_cast< StepBackRequest* >(object);
  (void)_this;
}
void StepBackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepBackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepBackRequest& StepBackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepBackRequest_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void StepBackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.StepBackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepBackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.StepBackRequest.auth_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StepBackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.StepBackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_id().data(), static_cast<int>(this->_internal_auth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.StepBackRequest.auth_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.StepBackRequest)
  return target;
}

size_t StepBackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.StepBackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepBackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.StepBackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StepBackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepBackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.StepBackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.StepBackRequest)
    MergeFrom(*source);
  }
}

void StepBackRequest::MergeFrom(const StepBackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.StepBackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_id().size() > 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
}

void StepBackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.StepBackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepBackRequest::CopyFrom(const StepBackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.StepBackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepBackRequest::IsInitialized() const {
  return true;
}

void StepBackRequest::InternalSwap(StepBackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_id_.Swap(&other->auth_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StepBackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamStepsRequest::InitAsDefaultInstance() {
}
class StreamStepsRequest::_Internal {
 public:
};

StreamStepsRequest::StreamStepsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.StreamStepsRequest)
}
StreamStepsRequest::StreamStepsRequest(const StreamStepsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_id().empty()) {
    auth_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.StreamStepsRequest)
}

void StreamStepsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto.base);
  auth_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StreamStepsRequest::~StreamStepsRequest() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.StreamStepsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamStepsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamStepsRequest::ArenaDtor(void* object) {
  StreamStepsRequest* _this = reinterpret_cast< StreamStepsRequest* >(object);
  (void)_this;
}
void StreamStepsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamStepsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStepsRequest& StreamStepsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStepsRequest_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void StreamStepsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.StreamStepsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamStepsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.StreamStepsRequest.auth_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStepsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.StreamStepsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_id().data(), static_cast<int>(this->_internal_auth_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.StreamStepsRequest.auth_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.StreamStepsRequest)
  return target;
}

size_t StreamStepsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.StreamStepsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_id = 1;
  if (this->auth_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStepsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.StreamStepsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStepsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStepsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.StreamStepsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.StreamStepsRequest)
    MergeFrom(*source);
  }
}

void StreamStepsRequest::MergeFrom(const StreamStepsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.StreamStepsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_id().size() > 0) {
    _internal_set_auth_id(from._internal_auth_id());
  }
}

void StreamStepsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.StreamStepsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStepsRequest::CopyFrom(const StreamStepsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.StreamStepsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStepsRequest::IsInitialized() const {
  return true;
}

void StreamStepsRequest::InternalSwap(StreamStepsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_id_.Swap(&other->auth_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStepsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FederateRequest::InitAsDefaultInstance() {
}
class FederateRequest::_Internal {
 public:
};

FederateRequest::FederateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.FederateRequest)
}
FederateRequest::FederateRequest(const FederateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.FederateRequest)
}

void FederateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FederateRequest_auth_2fv1_2fauth_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FederateRequest::~FederateRequest() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.FederateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FederateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FederateRequest::ArenaDtor(void* object) {
  FederateRequest* _this = reinterpret_cast< FederateRequest* >(object);
  (void)_this;
}
void FederateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FederateRequest& FederateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FederateRequest_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void FederateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.FederateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.FederateRequest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FederateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.FederateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.FederateRequest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.FederateRequest)
  return target;
}

size_t FederateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.FederateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FederateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.FederateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FederateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FederateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.FederateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.FederateRequest)
    MergeFrom(*source);
  }
}

void FederateRequest::MergeFrom(const FederateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.FederateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void FederateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.FederateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FederateRequest::CopyFrom(const FederateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.FederateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederateRequest::IsInitialized() const {
  return true;
}

void FederateRequest::InternalSwap(FederateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FederateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FederateReply::InitAsDefaultInstance() {
}
class FederateReply::_Internal {
 public:
};

FederateReply::FederateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.FederateReply)
}
FederateReply::FederateReply(const FederateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.FederateReply)
}

void FederateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FederateReply_auth_2fv1_2fauth_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FederateReply::~FederateReply() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.FederateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FederateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FederateReply::ArenaDtor(void* object) {
  FederateReply* _this = reinterpret_cast< FederateReply* >(object);
  (void)_this;
}
void FederateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FederateReply& FederateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FederateReply_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void FederateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.FederateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.FederateReply.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.FederateReply.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FederateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.FederateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.FederateReply.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string nonce = 2;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.FederateReply.nonce");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.FederateReply)
  return target;
}

size_t FederateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.FederateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string nonce = 2;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FederateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.FederateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FederateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FederateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.FederateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.FederateReply)
    MergeFrom(*source);
  }
}

void FederateReply::MergeFrom(const FederateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.FederateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void FederateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.FederateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FederateReply::CopyFrom(const FederateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.FederateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederateReply::IsInitialized() const {
  return true;
}

void FederateReply::InternalSwap(FederateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FederateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyReply::InitAsDefaultInstance() {
}
class KeyReply::_Internal {
 public:
};

KeyReply::KeyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.KeyReply)
}
KeyReply::KeyReply(const KeyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.KeyReply)
}

void KeyReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyReply_auth_2fv1_2fauth_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyReply::~KeyReply() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.KeyReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyReply::ArenaDtor(void* object) {
  KeyReply* _this = reinterpret_cast< KeyReply* >(object);
  (void)_this;
}
void KeyReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyReply& KeyReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyReply_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void KeyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.KeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.KeyReply.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.KeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.KeyReply.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.KeyReply)
  return target;
}

size_t KeyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.KeyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.KeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.KeyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.KeyReply)
    MergeFrom(*source);
  }
}

void KeyReply::MergeFrom(const KeyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.KeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void KeyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.KeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyReply::CopyFrom(const KeyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.KeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyReply::IsInitialized() const {
  return true;
}

void KeyReply::InternalSwap(KeyReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginFederatedRequest::InitAsDefaultInstance() {
}
class LoginFederatedRequest::_Internal {
 public:
};

LoginFederatedRequest::LoginFederatedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.auth.v1.LoginFederatedRequest)
}
LoginFederatedRequest::LoginFederatedRequest(const LoginFederatedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auth_token(),
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domain(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.auth.v1.LoginFederatedRequest)
}

void LoginFederatedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto.base);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginFederatedRequest::~LoginFederatedRequest() {
  // @@protoc_insertion_point(destructor:protocol.auth.v1.LoginFederatedRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginFederatedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginFederatedRequest::ArenaDtor(void* object) {
  LoginFederatedRequest* _this = reinterpret_cast< LoginFederatedRequest* >(object);
  (void)_this;
}
void LoginFederatedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginFederatedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginFederatedRequest& LoginFederatedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginFederatedRequest_auth_2fv1_2fauth_2eproto.base);
  return *internal_default_instance();
}


void LoginFederatedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.auth.v1.LoginFederatedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginFederatedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.LoginFederatedRequest.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.auth.v1.LoginFederatedRequest.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginFederatedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.auth.v1.LoginFederatedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_token = 1;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.LoginFederatedRequest.auth_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_token(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.auth.v1.LoginFederatedRequest.domain");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.auth.v1.LoginFederatedRequest)
  return target;
}

size_t LoginFederatedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.auth.v1.LoginFederatedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_token = 1;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginFederatedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.auth.v1.LoginFederatedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginFederatedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginFederatedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.auth.v1.LoginFederatedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.auth.v1.LoginFederatedRequest)
    MergeFrom(*source);
  }
}

void LoginFederatedRequest::MergeFrom(const LoginFederatedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.auth.v1.LoginFederatedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_token().size() > 0) {
    _internal_set_auth_token(from._internal_auth_token());
  }
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
}

void LoginFederatedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.auth.v1.LoginFederatedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginFederatedRequest::CopyFrom(const LoginFederatedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.auth.v1.LoginFederatedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginFederatedRequest::IsInitialized() const {
  return true;
}

void LoginFederatedRequest::InternalSwap(LoginFederatedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginFederatedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace auth
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::BeginAuthResponse* Arena::CreateMaybeMessage< ::protocol::auth::v1::BeginAuthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::BeginAuthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::Session* Arena::CreateMaybeMessage< ::protocol::auth::v1::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::AuthStep_Choice* Arena::CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Choice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::AuthStep_Choice >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::AuthStep_Form_FormField* Arena::CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Form_FormField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::AuthStep_Form_FormField >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::AuthStep_Form* Arena::CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::AuthStep_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::AuthStep_Waiting* Arena::CreateMaybeMessage< ::protocol::auth::v1::AuthStep_Waiting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::AuthStep_Waiting >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::AuthStep* Arena::CreateMaybeMessage< ::protocol::auth::v1::AuthStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::AuthStep >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::NextStepRequest_Choice* Arena::CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest_Choice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::NextStepRequest_Choice >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::NextStepRequest_FormFields* Arena::CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest_FormFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::NextStepRequest_FormFields >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::NextStepRequest_Form* Arena::CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest_Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::NextStepRequest_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::NextStepRequest* Arena::CreateMaybeMessage< ::protocol::auth::v1::NextStepRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::NextStepRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::StepBackRequest* Arena::CreateMaybeMessage< ::protocol::auth::v1::StepBackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::StepBackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::StreamStepsRequest* Arena::CreateMaybeMessage< ::protocol::auth::v1::StreamStepsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::StreamStepsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::FederateRequest* Arena::CreateMaybeMessage< ::protocol::auth::v1::FederateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::FederateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::FederateReply* Arena::CreateMaybeMessage< ::protocol::auth::v1::FederateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::FederateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::KeyReply* Arena::CreateMaybeMessage< ::protocol::auth::v1::KeyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::KeyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::auth::v1::LoginFederatedRequest* Arena::CreateMaybeMessage< ::protocol::auth::v1::LoginFederatedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::auth::v1::LoginFederatedRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
