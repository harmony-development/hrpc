// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice/v1/voice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voice_2fv1_2fvoice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_2fv1_2fvoice_2eproto;
namespace protocol {
namespace voice {
namespace v1 {
class ClientSignal;
class ClientSignalDefaultTypeInternal;
extern ClientSignalDefaultTypeInternal _ClientSignal_default_instance_;
class ClientSignal_Answer;
class ClientSignal_AnswerDefaultTypeInternal;
extern ClientSignal_AnswerDefaultTypeInternal _ClientSignal_Answer_default_instance_;
class ClientSignal_Candidate;
class ClientSignal_CandidateDefaultTypeInternal;
extern ClientSignal_CandidateDefaultTypeInternal _ClientSignal_Candidate_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Signal_ICECandidate;
class Signal_ICECandidateDefaultTypeInternal;
extern Signal_ICECandidateDefaultTypeInternal _Signal_ICECandidate_default_instance_;
class Signal_Offer;
class Signal_OfferDefaultTypeInternal;
extern Signal_OfferDefaultTypeInternal _Signal_Offer_default_instance_;
}  // namespace v1
}  // namespace voice
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::voice::v1::ClientSignal* Arena::CreateMaybeMessage<::protocol::voice::v1::ClientSignal>(Arena*);
template<> ::protocol::voice::v1::ClientSignal_Answer* Arena::CreateMaybeMessage<::protocol::voice::v1::ClientSignal_Answer>(Arena*);
template<> ::protocol::voice::v1::ClientSignal_Candidate* Arena::CreateMaybeMessage<::protocol::voice::v1::ClientSignal_Candidate>(Arena*);
template<> ::protocol::voice::v1::Signal* Arena::CreateMaybeMessage<::protocol::voice::v1::Signal>(Arena*);
template<> ::protocol::voice::v1::Signal_ICECandidate* Arena::CreateMaybeMessage<::protocol::voice::v1::Signal_ICECandidate>(Arena*);
template<> ::protocol::voice::v1::Signal_Offer* Arena::CreateMaybeMessage<::protocol::voice::v1::Signal_Offer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace voice {
namespace v1 {

// ===================================================================

class ClientSignal_Answer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.ClientSignal.Answer) */ {
 public:
  inline ClientSignal_Answer() : ClientSignal_Answer(nullptr) {};
  virtual ~ClientSignal_Answer();

  ClientSignal_Answer(const ClientSignal_Answer& from);
  ClientSignal_Answer(ClientSignal_Answer&& from) noexcept
    : ClientSignal_Answer() {
    *this = ::std::move(from);
  }

  inline ClientSignal_Answer& operator=(const ClientSignal_Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSignal_Answer& operator=(ClientSignal_Answer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientSignal_Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSignal_Answer* internal_default_instance() {
    return reinterpret_cast<const ClientSignal_Answer*>(
               &_ClientSignal_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientSignal_Answer& a, ClientSignal_Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSignal_Answer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSignal_Answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSignal_Answer* New() const final {
    return CreateMaybeMessage<ClientSignal_Answer>(nullptr);
  }

  ClientSignal_Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSignal_Answer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientSignal_Answer& from);
  void MergeFrom(const ClientSignal_Answer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSignal_Answer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.ClientSignal.Answer";
  }
  protected:
  explicit ClientSignal_Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  void set_answer(const std::string& value);
  void set_answer(std::string&& value);
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  std::string* mutable_answer();
  std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_answer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_answer(
      std::string* answer);
  private:
  const std::string& _internal_answer() const;
  void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.ClientSignal.Answer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class ClientSignal_Candidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.ClientSignal.Candidate) */ {
 public:
  inline ClientSignal_Candidate() : ClientSignal_Candidate(nullptr) {};
  virtual ~ClientSignal_Candidate();

  ClientSignal_Candidate(const ClientSignal_Candidate& from);
  ClientSignal_Candidate(ClientSignal_Candidate&& from) noexcept
    : ClientSignal_Candidate() {
    *this = ::std::move(from);
  }

  inline ClientSignal_Candidate& operator=(const ClientSignal_Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSignal_Candidate& operator=(ClientSignal_Candidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientSignal_Candidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSignal_Candidate* internal_default_instance() {
    return reinterpret_cast<const ClientSignal_Candidate*>(
               &_ClientSignal_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientSignal_Candidate& a, ClientSignal_Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSignal_Candidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSignal_Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSignal_Candidate* New() const final {
    return CreateMaybeMessage<ClientSignal_Candidate>(nullptr);
  }

  ClientSignal_Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSignal_Candidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientSignal_Candidate& from);
  void MergeFrom(const ClientSignal_Candidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSignal_Candidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.ClientSignal.Candidate";
  }
  protected:
  explicit ClientSignal_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
  };
  // string candidate = 1;
  void clear_candidate();
  const std::string& candidate() const;
  void set_candidate(const std::string& value);
  void set_candidate(std::string&& value);
  void set_candidate(const char* value);
  void set_candidate(const char* value, size_t size);
  std::string* mutable_candidate();
  std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_candidate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_candidate(
      std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.ClientSignal.Candidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class ClientSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.ClientSignal) */ {
 public:
  inline ClientSignal() : ClientSignal(nullptr) {};
  virtual ~ClientSignal();

  ClientSignal(const ClientSignal& from);
  ClientSignal(ClientSignal&& from) noexcept
    : ClientSignal() {
    *this = ::std::move(from);
  }

  inline ClientSignal& operator=(const ClientSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSignal& operator=(ClientSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientSignal& default_instance();

  enum EventCase {
    kAnswer = 1,
    kCandidate = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSignal* internal_default_instance() {
    return reinterpret_cast<const ClientSignal*>(
               &_ClientSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientSignal& a, ClientSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSignal* New() const final {
    return CreateMaybeMessage<ClientSignal>(nullptr);
  }

  ClientSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientSignal& from);
  void MergeFrom(const ClientSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.ClientSignal";
  }
  protected:
  explicit ClientSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientSignal_Answer Answer;
  typedef ClientSignal_Candidate Candidate;

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
    kCandidateFieldNumber = 2,
  };
  // .protocol.voice.v1.ClientSignal.Answer answer = 1;
  bool has_answer() const;
  private:
  bool _internal_has_answer() const;
  public:
  void clear_answer();
  const ::protocol::voice::v1::ClientSignal_Answer& answer() const;
  ::protocol::voice::v1::ClientSignal_Answer* release_answer();
  ::protocol::voice::v1::ClientSignal_Answer* mutable_answer();
  void set_allocated_answer(::protocol::voice::v1::ClientSignal_Answer* answer);
  private:
  const ::protocol::voice::v1::ClientSignal_Answer& _internal_answer() const;
  ::protocol::voice::v1::ClientSignal_Answer* _internal_mutable_answer();
  public:
  void unsafe_arena_set_allocated_answer(
      ::protocol::voice::v1::ClientSignal_Answer* answer);
  ::protocol::voice::v1::ClientSignal_Answer* unsafe_arena_release_answer();

  // .protocol.voice.v1.ClientSignal.Candidate candidate = 2;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::protocol::voice::v1::ClientSignal_Candidate& candidate() const;
  ::protocol::voice::v1::ClientSignal_Candidate* release_candidate();
  ::protocol::voice::v1::ClientSignal_Candidate* mutable_candidate();
  void set_allocated_candidate(::protocol::voice::v1::ClientSignal_Candidate* candidate);
  private:
  const ::protocol::voice::v1::ClientSignal_Candidate& _internal_candidate() const;
  ::protocol::voice::v1::ClientSignal_Candidate* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::protocol::voice::v1::ClientSignal_Candidate* candidate);
  ::protocol::voice::v1::ClientSignal_Candidate* unsafe_arena_release_candidate();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:protocol.voice.v1.ClientSignal)
 private:
  class _Internal;
  void set_has_answer();
  void set_has_candidate();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::protocol::voice::v1::ClientSignal_Answer* answer_;
    ::protocol::voice::v1::ClientSignal_Candidate* candidate_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class Signal_ICECandidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.Signal.ICECandidate) */ {
 public:
  inline Signal_ICECandidate() : Signal_ICECandidate(nullptr) {};
  virtual ~Signal_ICECandidate();

  Signal_ICECandidate(const Signal_ICECandidate& from);
  Signal_ICECandidate(Signal_ICECandidate&& from) noexcept
    : Signal_ICECandidate() {
    *this = ::std::move(from);
  }

  inline Signal_ICECandidate& operator=(const Signal_ICECandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal_ICECandidate& operator=(Signal_ICECandidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal_ICECandidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal_ICECandidate* internal_default_instance() {
    return reinterpret_cast<const Signal_ICECandidate*>(
               &_Signal_ICECandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Signal_ICECandidate& a, Signal_ICECandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal_ICECandidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal_ICECandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal_ICECandidate* New() const final {
    return CreateMaybeMessage<Signal_ICECandidate>(nullptr);
  }

  Signal_ICECandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal_ICECandidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal_ICECandidate& from);
  void MergeFrom(const Signal_ICECandidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal_ICECandidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.Signal.ICECandidate";
  }
  protected:
  explicit Signal_ICECandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
  };
  // string candidate = 1;
  void clear_candidate();
  const std::string& candidate() const;
  void set_candidate(const std::string& value);
  void set_candidate(std::string&& value);
  void set_candidate(const char* value);
  void set_candidate(const char* value, size_t size);
  std::string* mutable_candidate();
  std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_candidate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_candidate(
      std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.Signal.ICECandidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class Signal_Offer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.Signal.Offer) */ {
 public:
  inline Signal_Offer() : Signal_Offer(nullptr) {};
  virtual ~Signal_Offer();

  Signal_Offer(const Signal_Offer& from);
  Signal_Offer(Signal_Offer&& from) noexcept
    : Signal_Offer() {
    *this = ::std::move(from);
  }

  inline Signal_Offer& operator=(const Signal_Offer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal_Offer& operator=(Signal_Offer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal_Offer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal_Offer* internal_default_instance() {
    return reinterpret_cast<const Signal_Offer*>(
               &_Signal_Offer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Signal_Offer& a, Signal_Offer& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal_Offer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal_Offer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal_Offer* New() const final {
    return CreateMaybeMessage<Signal_Offer>(nullptr);
  }

  Signal_Offer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal_Offer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal_Offer& from);
  void MergeFrom(const Signal_Offer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal_Offer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.Signal.Offer";
  }
  protected:
  explicit Signal_Offer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfferFieldNumber = 1,
  };
  // string offer = 1;
  void clear_offer();
  const std::string& offer() const;
  void set_offer(const std::string& value);
  void set_offer(std::string&& value);
  void set_offer(const char* value);
  void set_offer(const char* value, size_t size);
  std::string* mutable_offer();
  std::string* release_offer();
  void set_allocated_offer(std::string* offer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_offer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_offer(
      std::string* offer);
  private:
  const std::string& _internal_offer() const;
  void _internal_set_offer(const std::string& value);
  std::string* _internal_mutable_offer();
  public:

  // @@protoc_insertion_point(class_scope:protocol.voice.v1.Signal.Offer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// -------------------------------------------------------------------

class Signal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.voice.v1.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {};
  virtual ~Signal();

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signal& default_instance();

  enum EventCase {
    kCandidate = 1,
    kOffer = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.voice.v1.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voice_2fv1_2fvoice_2eproto);
    return ::descriptor_table_voice_2fv1_2fvoice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Signal_ICECandidate ICECandidate;
  typedef Signal_Offer Offer;

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
    kOfferFieldNumber = 2,
  };
  // .protocol.voice.v1.Signal.ICECandidate candidate = 1;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::protocol::voice::v1::Signal_ICECandidate& candidate() const;
  ::protocol::voice::v1::Signal_ICECandidate* release_candidate();
  ::protocol::voice::v1::Signal_ICECandidate* mutable_candidate();
  void set_allocated_candidate(::protocol::voice::v1::Signal_ICECandidate* candidate);
  private:
  const ::protocol::voice::v1::Signal_ICECandidate& _internal_candidate() const;
  ::protocol::voice::v1::Signal_ICECandidate* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::protocol::voice::v1::Signal_ICECandidate* candidate);
  ::protocol::voice::v1::Signal_ICECandidate* unsafe_arena_release_candidate();

  // .protocol.voice.v1.Signal.Offer offer = 2;
  bool has_offer() const;
  private:
  bool _internal_has_offer() const;
  public:
  void clear_offer();
  const ::protocol::voice::v1::Signal_Offer& offer() const;
  ::protocol::voice::v1::Signal_Offer* release_offer();
  ::protocol::voice::v1::Signal_Offer* mutable_offer();
  void set_allocated_offer(::protocol::voice::v1::Signal_Offer* offer);
  private:
  const ::protocol::voice::v1::Signal_Offer& _internal_offer() const;
  ::protocol::voice::v1::Signal_Offer* _internal_mutable_offer();
  public:
  void unsafe_arena_set_allocated_offer(
      ::protocol::voice::v1::Signal_Offer* offer);
  ::protocol::voice::v1::Signal_Offer* unsafe_arena_release_offer();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:protocol.voice.v1.Signal)
 private:
  class _Internal;
  void set_has_candidate();
  void set_has_offer();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::protocol::voice::v1::Signal_ICECandidate* candidate_;
    ::protocol::voice::v1::Signal_Offer* offer_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_voice_2fv1_2fvoice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientSignal_Answer

// string answer = 1;
inline void ClientSignal_Answer::clear_answer() {
  answer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientSignal_Answer::answer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ClientSignal.Answer.answer)
  return _internal_answer();
}
inline void ClientSignal_Answer::set_answer(const std::string& value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.ClientSignal.Answer.answer)
}
inline std::string* ClientSignal_Answer::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ClientSignal.Answer.answer)
  return _internal_mutable_answer();
}
inline const std::string& ClientSignal_Answer::_internal_answer() const {
  return answer_.Get();
}
inline void ClientSignal_Answer::_internal_set_answer(const std::string& value) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientSignal_Answer::set_answer(std::string&& value) {
  
  answer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.ClientSignal.Answer.answer)
}
inline void ClientSignal_Answer::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.ClientSignal.Answer.answer)
}
inline void ClientSignal_Answer::set_answer(const char* value,
    size_t size) {
  
  answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.ClientSignal.Answer.answer)
}
inline std::string* ClientSignal_Answer::_internal_mutable_answer() {
  
  return answer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientSignal_Answer::release_answer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ClientSignal.Answer.answer)
  return answer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientSignal_Answer::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ClientSignal.Answer.answer)
}
inline std::string* ClientSignal_Answer::unsafe_arena_release_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ClientSignal.Answer.answer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return answer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientSignal_Answer::unsafe_arena_set_allocated_answer(
    std::string* answer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      answer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ClientSignal.Answer.answer)
}

// -------------------------------------------------------------------

// ClientSignal_Candidate

// string candidate = 1;
inline void ClientSignal_Candidate::clear_candidate() {
  candidate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientSignal_Candidate::candidate() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ClientSignal.Candidate.candidate)
  return _internal_candidate();
}
inline void ClientSignal_Candidate::set_candidate(const std::string& value) {
  _internal_set_candidate(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.ClientSignal.Candidate.candidate)
}
inline std::string* ClientSignal_Candidate::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ClientSignal.Candidate.candidate)
  return _internal_mutable_candidate();
}
inline const std::string& ClientSignal_Candidate::_internal_candidate() const {
  return candidate_.Get();
}
inline void ClientSignal_Candidate::_internal_set_candidate(const std::string& value) {
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientSignal_Candidate::set_candidate(std::string&& value) {
  
  candidate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.ClientSignal.Candidate.candidate)
}
inline void ClientSignal_Candidate::set_candidate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.ClientSignal.Candidate.candidate)
}
inline void ClientSignal_Candidate::set_candidate(const char* value,
    size_t size) {
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.ClientSignal.Candidate.candidate)
}
inline std::string* ClientSignal_Candidate::_internal_mutable_candidate() {
  
  return candidate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientSignal_Candidate::release_candidate() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ClientSignal.Candidate.candidate)
  return candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientSignal_Candidate::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    
  } else {
    
  }
  candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ClientSignal.Candidate.candidate)
}
inline std::string* ClientSignal_Candidate::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ClientSignal.Candidate.candidate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return candidate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientSignal_Candidate::unsafe_arena_set_allocated_candidate(
    std::string* candidate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (candidate != nullptr) {
    
  } else {
    
  }
  candidate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      candidate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ClientSignal.Candidate.candidate)
}

// -------------------------------------------------------------------

// ClientSignal

// .protocol.voice.v1.ClientSignal.Answer answer = 1;
inline bool ClientSignal::_internal_has_answer() const {
  return event_case() == kAnswer;
}
inline bool ClientSignal::has_answer() const {
  return _internal_has_answer();
}
inline void ClientSignal::set_has_answer() {
  _oneof_case_[0] = kAnswer;
}
inline void ClientSignal::clear_answer() {
  if (_internal_has_answer()) {
    if (GetArena() == nullptr) {
      delete event_.answer_;
    }
    clear_has_event();
  }
}
inline ::protocol::voice::v1::ClientSignal_Answer* ClientSignal::release_answer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ClientSignal.answer)
  if (_internal_has_answer()) {
    clear_has_event();
      ::protocol::voice::v1::ClientSignal_Answer* temp = event_.answer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::voice::v1::ClientSignal_Answer& ClientSignal::_internal_answer() const {
  return _internal_has_answer()
      ? *event_.answer_
      : *reinterpret_cast< ::protocol::voice::v1::ClientSignal_Answer*>(&::protocol::voice::v1::_ClientSignal_Answer_default_instance_);
}
inline const ::protocol::voice::v1::ClientSignal_Answer& ClientSignal::answer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ClientSignal.answer)
  return _internal_answer();
}
inline ::protocol::voice::v1::ClientSignal_Answer* ClientSignal::unsafe_arena_release_answer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ClientSignal.answer)
  if (_internal_has_answer()) {
    clear_has_event();
    ::protocol::voice::v1::ClientSignal_Answer* temp = event_.answer_;
    event_.answer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientSignal::unsafe_arena_set_allocated_answer(::protocol::voice::v1::ClientSignal_Answer* answer) {
  clear_event();
  if (answer) {
    set_has_answer();
    event_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ClientSignal.answer)
}
inline ::protocol::voice::v1::ClientSignal_Answer* ClientSignal::_internal_mutable_answer() {
  if (!_internal_has_answer()) {
    clear_event();
    set_has_answer();
    event_.answer_ = CreateMaybeMessage< ::protocol::voice::v1::ClientSignal_Answer >(GetArena());
  }
  return event_.answer_;
}
inline ::protocol::voice::v1::ClientSignal_Answer* ClientSignal::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ClientSignal.answer)
  return _internal_mutable_answer();
}

// .protocol.voice.v1.ClientSignal.Candidate candidate = 2;
inline bool ClientSignal::_internal_has_candidate() const {
  return event_case() == kCandidate;
}
inline bool ClientSignal::has_candidate() const {
  return _internal_has_candidate();
}
inline void ClientSignal::set_has_candidate() {
  _oneof_case_[0] = kCandidate;
}
inline void ClientSignal::clear_candidate() {
  if (_internal_has_candidate()) {
    if (GetArena() == nullptr) {
      delete event_.candidate_;
    }
    clear_has_event();
  }
}
inline ::protocol::voice::v1::ClientSignal_Candidate* ClientSignal::release_candidate() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.ClientSignal.candidate)
  if (_internal_has_candidate()) {
    clear_has_event();
      ::protocol::voice::v1::ClientSignal_Candidate* temp = event_.candidate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::voice::v1::ClientSignal_Candidate& ClientSignal::_internal_candidate() const {
  return _internal_has_candidate()
      ? *event_.candidate_
      : *reinterpret_cast< ::protocol::voice::v1::ClientSignal_Candidate*>(&::protocol::voice::v1::_ClientSignal_Candidate_default_instance_);
}
inline const ::protocol::voice::v1::ClientSignal_Candidate& ClientSignal::candidate() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.ClientSignal.candidate)
  return _internal_candidate();
}
inline ::protocol::voice::v1::ClientSignal_Candidate* ClientSignal::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.ClientSignal.candidate)
  if (_internal_has_candidate()) {
    clear_has_event();
    ::protocol::voice::v1::ClientSignal_Candidate* temp = event_.candidate_;
    event_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientSignal::unsafe_arena_set_allocated_candidate(::protocol::voice::v1::ClientSignal_Candidate* candidate) {
  clear_event();
  if (candidate) {
    set_has_candidate();
    event_.candidate_ = candidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.ClientSignal.candidate)
}
inline ::protocol::voice::v1::ClientSignal_Candidate* ClientSignal::_internal_mutable_candidate() {
  if (!_internal_has_candidate()) {
    clear_event();
    set_has_candidate();
    event_.candidate_ = CreateMaybeMessage< ::protocol::voice::v1::ClientSignal_Candidate >(GetArena());
  }
  return event_.candidate_;
}
inline ::protocol::voice::v1::ClientSignal_Candidate* ClientSignal::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.ClientSignal.candidate)
  return _internal_mutable_candidate();
}

inline bool ClientSignal::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ClientSignal::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline ClientSignal::EventCase ClientSignal::event_case() const {
  return ClientSignal::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Signal_ICECandidate

// string candidate = 1;
inline void Signal_ICECandidate::clear_candidate() {
  candidate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Signal_ICECandidate::candidate() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.ICECandidate.candidate)
  return _internal_candidate();
}
inline void Signal_ICECandidate::set_candidate(const std::string& value) {
  _internal_set_candidate(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.Signal.ICECandidate.candidate)
}
inline std::string* Signal_ICECandidate::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.ICECandidate.candidate)
  return _internal_mutable_candidate();
}
inline const std::string& Signal_ICECandidate::_internal_candidate() const {
  return candidate_.Get();
}
inline void Signal_ICECandidate::_internal_set_candidate(const std::string& value) {
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signal_ICECandidate::set_candidate(std::string&& value) {
  
  candidate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.Signal.ICECandidate.candidate)
}
inline void Signal_ICECandidate::set_candidate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.Signal.ICECandidate.candidate)
}
inline void Signal_ICECandidate::set_candidate(const char* value,
    size_t size) {
  
  candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.Signal.ICECandidate.candidate)
}
inline std::string* Signal_ICECandidate::_internal_mutable_candidate() {
  
  return candidate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signal_ICECandidate::release_candidate() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.ICECandidate.candidate)
  return candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signal_ICECandidate::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    
  } else {
    
  }
  candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.Signal.ICECandidate.candidate)
}
inline std::string* Signal_ICECandidate::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.ICECandidate.candidate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return candidate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Signal_ICECandidate::unsafe_arena_set_allocated_candidate(
    std::string* candidate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (candidate != nullptr) {
    
  } else {
    
  }
  candidate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      candidate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.ICECandidate.candidate)
}

// -------------------------------------------------------------------

// Signal_Offer

// string offer = 1;
inline void Signal_Offer::clear_offer() {
  offer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Signal_Offer::offer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.Offer.offer)
  return _internal_offer();
}
inline void Signal_Offer::set_offer(const std::string& value) {
  _internal_set_offer(value);
  // @@protoc_insertion_point(field_set:protocol.voice.v1.Signal.Offer.offer)
}
inline std::string* Signal_Offer::mutable_offer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.Offer.offer)
  return _internal_mutable_offer();
}
inline const std::string& Signal_Offer::_internal_offer() const {
  return offer_.Get();
}
inline void Signal_Offer::_internal_set_offer(const std::string& value) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signal_Offer::set_offer(std::string&& value) {
  
  offer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.voice.v1.Signal.Offer.offer)
}
inline void Signal_Offer::set_offer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.voice.v1.Signal.Offer.offer)
}
inline void Signal_Offer::set_offer(const char* value,
    size_t size) {
  
  offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.voice.v1.Signal.Offer.offer)
}
inline std::string* Signal_Offer::_internal_mutable_offer() {
  
  return offer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signal_Offer::release_offer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.Offer.offer)
  return offer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signal_Offer::set_allocated_offer(std::string* offer) {
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.Signal.Offer.offer)
}
inline std::string* Signal_Offer::unsafe_arena_release_offer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.Offer.offer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return offer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Signal_Offer::unsafe_arena_set_allocated_offer(
    std::string* offer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      offer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.Offer.offer)
}

// -------------------------------------------------------------------

// Signal

// .protocol.voice.v1.Signal.ICECandidate candidate = 1;
inline bool Signal::_internal_has_candidate() const {
  return event_case() == kCandidate;
}
inline bool Signal::has_candidate() const {
  return _internal_has_candidate();
}
inline void Signal::set_has_candidate() {
  _oneof_case_[0] = kCandidate;
}
inline void Signal::clear_candidate() {
  if (_internal_has_candidate()) {
    if (GetArena() == nullptr) {
      delete event_.candidate_;
    }
    clear_has_event();
  }
}
inline ::protocol::voice::v1::Signal_ICECandidate* Signal::release_candidate() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.candidate)
  if (_internal_has_candidate()) {
    clear_has_event();
      ::protocol::voice::v1::Signal_ICECandidate* temp = event_.candidate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::voice::v1::Signal_ICECandidate& Signal::_internal_candidate() const {
  return _internal_has_candidate()
      ? *event_.candidate_
      : *reinterpret_cast< ::protocol::voice::v1::Signal_ICECandidate*>(&::protocol::voice::v1::_Signal_ICECandidate_default_instance_);
}
inline const ::protocol::voice::v1::Signal_ICECandidate& Signal::candidate() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.candidate)
  return _internal_candidate();
}
inline ::protocol::voice::v1::Signal_ICECandidate* Signal::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.candidate)
  if (_internal_has_candidate()) {
    clear_has_event();
    ::protocol::voice::v1::Signal_ICECandidate* temp = event_.candidate_;
    event_.candidate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Signal::unsafe_arena_set_allocated_candidate(::protocol::voice::v1::Signal_ICECandidate* candidate) {
  clear_event();
  if (candidate) {
    set_has_candidate();
    event_.candidate_ = candidate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.candidate)
}
inline ::protocol::voice::v1::Signal_ICECandidate* Signal::_internal_mutable_candidate() {
  if (!_internal_has_candidate()) {
    clear_event();
    set_has_candidate();
    event_.candidate_ = CreateMaybeMessage< ::protocol::voice::v1::Signal_ICECandidate >(GetArena());
  }
  return event_.candidate_;
}
inline ::protocol::voice::v1::Signal_ICECandidate* Signal::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.candidate)
  return _internal_mutable_candidate();
}

// .protocol.voice.v1.Signal.Offer offer = 2;
inline bool Signal::_internal_has_offer() const {
  return event_case() == kOffer;
}
inline bool Signal::has_offer() const {
  return _internal_has_offer();
}
inline void Signal::set_has_offer() {
  _oneof_case_[0] = kOffer;
}
inline void Signal::clear_offer() {
  if (_internal_has_offer()) {
    if (GetArena() == nullptr) {
      delete event_.offer_;
    }
    clear_has_event();
  }
}
inline ::protocol::voice::v1::Signal_Offer* Signal::release_offer() {
  // @@protoc_insertion_point(field_release:protocol.voice.v1.Signal.offer)
  if (_internal_has_offer()) {
    clear_has_event();
      ::protocol::voice::v1::Signal_Offer* temp = event_.offer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.offer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::voice::v1::Signal_Offer& Signal::_internal_offer() const {
  return _internal_has_offer()
      ? *event_.offer_
      : *reinterpret_cast< ::protocol::voice::v1::Signal_Offer*>(&::protocol::voice::v1::_Signal_Offer_default_instance_);
}
inline const ::protocol::voice::v1::Signal_Offer& Signal::offer() const {
  // @@protoc_insertion_point(field_get:protocol.voice.v1.Signal.offer)
  return _internal_offer();
}
inline ::protocol::voice::v1::Signal_Offer* Signal::unsafe_arena_release_offer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.voice.v1.Signal.offer)
  if (_internal_has_offer()) {
    clear_has_event();
    ::protocol::voice::v1::Signal_Offer* temp = event_.offer_;
    event_.offer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Signal::unsafe_arena_set_allocated_offer(::protocol::voice::v1::Signal_Offer* offer) {
  clear_event();
  if (offer) {
    set_has_offer();
    event_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.voice.v1.Signal.offer)
}
inline ::protocol::voice::v1::Signal_Offer* Signal::_internal_mutable_offer() {
  if (!_internal_has_offer()) {
    clear_event();
    set_has_offer();
    event_.offer_ = CreateMaybeMessage< ::protocol::voice::v1::Signal_Offer >(GetArena());
  }
  return event_.offer_;
}
inline ::protocol::voice::v1::Signal_Offer* Signal::mutable_offer() {
  // @@protoc_insertion_point(field_mutable:protocol.voice.v1.Signal.offer)
  return _internal_mutable_offer();
}

inline bool Signal::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Signal::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Signal::EventCase Signal::event_case() const {
  return Signal::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace voice
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voice_2fv1_2fvoice_2eproto
