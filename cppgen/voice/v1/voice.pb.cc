// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voice/v1/voice.proto

#include "voice/v1/voice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_voice_2fv1_2fvoice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto;
namespace protocol {
namespace voice {
namespace v1 {
class ClientSignal_AnswerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientSignal_Answer> _instance;
} _ClientSignal_Answer_default_instance_;
class ClientSignal_CandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientSignal_Candidate> _instance;
} _ClientSignal_Candidate_default_instance_;
class ClientSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientSignal> _instance;
  const ::protocol::voice::v1::ClientSignal_Answer* answer_;
  const ::protocol::voice::v1::ClientSignal_Candidate* candidate_;
} _ClientSignal_default_instance_;
class Signal_ICECandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal_ICECandidate> _instance;
} _Signal_ICECandidate_default_instance_;
class Signal_OfferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal_Offer> _instance;
} _Signal_Offer_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signal> _instance;
  const ::protocol::voice::v1::Signal_ICECandidate* candidate_;
  const ::protocol::voice::v1::Signal_Offer* offer_;
} _Signal_default_instance_;
}  // namespace v1
}  // namespace voice
}  // namespace protocol
static void InitDefaultsscc_info_ClientSignal_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_ClientSignal_default_instance_;
    new (ptr) ::protocol::voice::v1::ClientSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::ClientSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientSignal_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClientSignal_voice_2fv1_2fvoice_2eproto}, {
      &scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto.base,
      &scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto.base,}};

static void InitDefaultsscc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_ClientSignal_Answer_default_instance_;
    new (ptr) ::protocol::voice::v1::ClientSignal_Answer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::ClientSignal_Answer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto}, {}};

static void InitDefaultsscc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_ClientSignal_Candidate_default_instance_;
    new (ptr) ::protocol::voice::v1::ClientSignal_Candidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::ClientSignal_Candidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto}, {}};

static void InitDefaultsscc_info_Signal_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_Signal_default_instance_;
    new (ptr) ::protocol::voice::v1::Signal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::Signal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Signal_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Signal_voice_2fv1_2fvoice_2eproto}, {
      &scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto.base,
      &scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto.base,}};

static void InitDefaultsscc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_Signal_ICECandidate_default_instance_;
    new (ptr) ::protocol::voice::v1::Signal_ICECandidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::Signal_ICECandidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto}, {}};

static void InitDefaultsscc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::voice::v1::_Signal_Offer_default_instance_;
    new (ptr) ::protocol::voice::v1::Signal_Offer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::voice::v1::Signal_Offer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_voice_2fv1_2fvoice_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_voice_2fv1_2fvoice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_voice_2fv1_2fvoice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_voice_2fv1_2fvoice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal_Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal_Answer, answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal_Candidate, candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protocol::voice::v1::ClientSignalDefaultTypeInternal, answer_),
  offsetof(::protocol::voice::v1::ClientSignalDefaultTypeInternal, candidate_),
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::ClientSignal, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal_ICECandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal_ICECandidate, candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal_Offer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal_Offer, offer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protocol::voice::v1::SignalDefaultTypeInternal, candidate_),
  offsetof(::protocol::voice::v1::SignalDefaultTypeInternal, offer_),
  PROTOBUF_FIELD_OFFSET(::protocol::voice::v1::Signal, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::voice::v1::ClientSignal_Answer)},
  { 6, -1, sizeof(::protocol::voice::v1::ClientSignal_Candidate)},
  { 12, -1, sizeof(::protocol::voice::v1::ClientSignal)},
  { 20, -1, sizeof(::protocol::voice::v1::Signal_ICECandidate)},
  { 26, -1, sizeof(::protocol::voice::v1::Signal_Offer)},
  { 32, -1, sizeof(::protocol::voice::v1::Signal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_ClientSignal_Answer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_ClientSignal_Candidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_ClientSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_Signal_ICECandidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_Signal_Offer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::voice::v1::_Signal_default_instance_),
};

const char descriptor_table_protodef_voice_2fv1_2fvoice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024voice/v1/voice.proto\022\021protocol.voice.v"
  "1\032\033google/protobuf/empty.proto\"\313\001\n\014Clien"
  "tSignal\0228\n\006answer\030\001 \001(\0132&.protocol.voice"
  ".v1.ClientSignal.AnswerH\000\022>\n\tcandidate\030\002"
  " \001(\0132).protocol.voice.v1.ClientSignal.Ca"
  "ndidateH\000\032\030\n\006Answer\022\016\n\006answer\030\001 \001(\t\032\036\n\tC"
  "andidate\022\021\n\tcandidate\030\001 \001(\tB\007\n\005event\"\273\001\n"
  "\006Signal\022;\n\tcandidate\030\001 \001(\0132&.protocol.vo"
  "ice.v1.Signal.ICECandidateH\000\0220\n\005offer\030\002 "
  "\001(\0132\037.protocol.voice.v1.Signal.OfferH\000\032!"
  "\n\014ICECandidate\022\021\n\tcandidate\030\001 \001(\t\032\026\n\005Off"
  "er\022\r\n\005offer\030\001 \001(\tB\007\n\005event2[\n\014VoiceServi"
  "ce\022K\n\007Connect\022\037.protocol.voice.v1.Client"
  "Signal\032\031.protocol.voice.v1.Signal\"\000(\0010\001B"
  "4Z2github.com/harmony-development/legato"
  "/gen/voice/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_voice_2fv1_2fvoice_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_voice_2fv1_2fvoice_2eproto_sccs[6] = {
  &scc_info_ClientSignal_voice_2fv1_2fvoice_2eproto.base,
  &scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto.base,
  &scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto.base,
  &scc_info_Signal_voice_2fv1_2fvoice_2eproto.base,
  &scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto.base,
  &scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_voice_2fv1_2fvoice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voice_2fv1_2fvoice_2eproto = {
  false, false, descriptor_table_protodef_voice_2fv1_2fvoice_2eproto, "voice/v1/voice.proto", 621,
  &descriptor_table_voice_2fv1_2fvoice_2eproto_once, descriptor_table_voice_2fv1_2fvoice_2eproto_sccs, descriptor_table_voice_2fv1_2fvoice_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_voice_2fv1_2fvoice_2eproto::offsets,
  file_level_metadata_voice_2fv1_2fvoice_2eproto, 6, file_level_enum_descriptors_voice_2fv1_2fvoice_2eproto, file_level_service_descriptors_voice_2fv1_2fvoice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_voice_2fv1_2fvoice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_voice_2fv1_2fvoice_2eproto)), true);
namespace protocol {
namespace voice {
namespace v1 {

// ===================================================================

void ClientSignal_Answer::InitAsDefaultInstance() {
}
class ClientSignal_Answer::_Internal {
 public:
};

ClientSignal_Answer::ClientSignal_Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.ClientSignal.Answer)
}
ClientSignal_Answer::ClientSignal_Answer(const ClientSignal_Answer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_answer().empty()) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_answer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.ClientSignal.Answer)
}

void ClientSignal_Answer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto.base);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientSignal_Answer::~ClientSignal_Answer() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.ClientSignal.Answer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientSignal_Answer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientSignal_Answer::ArenaDtor(void* object) {
  ClientSignal_Answer* _this = reinterpret_cast< ClientSignal_Answer* >(object);
  (void)_this;
}
void ClientSignal_Answer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientSignal_Answer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientSignal_Answer& ClientSignal_Answer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientSignal_Answer_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void ClientSignal_Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.ClientSignal.Answer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSignal_Answer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.voice.v1.ClientSignal.Answer.answer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientSignal_Answer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.ClientSignal.Answer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.voice.v1.ClientSignal.Answer.answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.ClientSignal.Answer)
  return target;
}

size_t ClientSignal_Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.ClientSignal.Answer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSignal_Answer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.ClientSignal.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientSignal_Answer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientSignal_Answer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.ClientSignal.Answer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.ClientSignal.Answer)
    MergeFrom(*source);
  }
}

void ClientSignal_Answer::MergeFrom(const ClientSignal_Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.ClientSignal.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {
    _internal_set_answer(from._internal_answer());
  }
}

void ClientSignal_Answer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.ClientSignal.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSignal_Answer::CopyFrom(const ClientSignal_Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.ClientSignal.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSignal_Answer::IsInitialized() const {
  return true;
}

void ClientSignal_Answer::InternalSwap(ClientSignal_Answer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  answer_.Swap(&other->answer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSignal_Answer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientSignal_Candidate::InitAsDefaultInstance() {
}
class ClientSignal_Candidate::_Internal {
 public:
};

ClientSignal_Candidate::ClientSignal_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.ClientSignal.Candidate)
}
ClientSignal_Candidate::ClientSignal_Candidate(const ClientSignal_Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate().empty()) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_candidate(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.ClientSignal.Candidate)
}

void ClientSignal_Candidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto.base);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientSignal_Candidate::~ClientSignal_Candidate() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.ClientSignal.Candidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientSignal_Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientSignal_Candidate::ArenaDtor(void* object) {
  ClientSignal_Candidate* _this = reinterpret_cast< ClientSignal_Candidate* >(object);
  (void)_this;
}
void ClientSignal_Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientSignal_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientSignal_Candidate& ClientSignal_Candidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientSignal_Candidate_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void ClientSignal_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.ClientSignal.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSignal_Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.voice.v1.ClientSignal.Candidate.candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientSignal_Candidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.ClientSignal.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.voice.v1.ClientSignal.Candidate.candidate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.ClientSignal.Candidate)
  return target;
}

size_t ClientSignal_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.ClientSignal.Candidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSignal_Candidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.ClientSignal.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientSignal_Candidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientSignal_Candidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.ClientSignal.Candidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.ClientSignal.Candidate)
    MergeFrom(*source);
  }
}

void ClientSignal_Candidate::MergeFrom(const ClientSignal_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.ClientSignal.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidate().size() > 0) {
    _internal_set_candidate(from._internal_candidate());
  }
}

void ClientSignal_Candidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.ClientSignal.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSignal_Candidate::CopyFrom(const ClientSignal_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.ClientSignal.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSignal_Candidate::IsInitialized() const {
  return true;
}

void ClientSignal_Candidate::InternalSwap(ClientSignal_Candidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candidate_.Swap(&other->candidate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSignal_Candidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClientSignal::InitAsDefaultInstance() {
  ::protocol::voice::v1::_ClientSignal_default_instance_.answer_ = const_cast< ::protocol::voice::v1::ClientSignal_Answer*>(
      ::protocol::voice::v1::ClientSignal_Answer::internal_default_instance());
  ::protocol::voice::v1::_ClientSignal_default_instance_.candidate_ = const_cast< ::protocol::voice::v1::ClientSignal_Candidate*>(
      ::protocol::voice::v1::ClientSignal_Candidate::internal_default_instance());
}
class ClientSignal::_Internal {
 public:
  static const ::protocol::voice::v1::ClientSignal_Answer& answer(const ClientSignal* msg);
  static const ::protocol::voice::v1::ClientSignal_Candidate& candidate(const ClientSignal* msg);
};

const ::protocol::voice::v1::ClientSignal_Answer&
ClientSignal::_Internal::answer(const ClientSignal* msg) {
  return *msg->event_.answer_;
}
const ::protocol::voice::v1::ClientSignal_Candidate&
ClientSignal::_Internal::candidate(const ClientSignal* msg) {
  return *msg->event_.candidate_;
}
void ClientSignal::set_allocated_answer(::protocol::voice::v1::ClientSignal_Answer* answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(answer);
    if (message_arena != submessage_arena) {
      answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, answer, submessage_arena);
    }
    set_has_answer();
    event_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ClientSignal.answer)
}
void ClientSignal::set_allocated_candidate(::protocol::voice::v1::ClientSignal_Candidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    set_has_candidate();
    event_.candidate_ = candidate;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.ClientSignal.candidate)
}
ClientSignal::ClientSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.ClientSignal)
}
ClientSignal::ClientSignal(const ClientSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kAnswer: {
      _internal_mutable_answer()->::protocol::voice::v1::ClientSignal_Answer::MergeFrom(from._internal_answer());
      break;
    }
    case kCandidate: {
      _internal_mutable_candidate()->::protocol::voice::v1::ClientSignal_Candidate::MergeFrom(from._internal_candidate());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.ClientSignal)
}

void ClientSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientSignal_voice_2fv1_2fvoice_2eproto.base);
  clear_has_event();
}

ClientSignal::~ClientSignal() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.ClientSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void ClientSignal::ArenaDtor(void* object) {
  ClientSignal* _this = reinterpret_cast< ClientSignal* >(object);
  (void)_this;
}
void ClientSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientSignal& ClientSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientSignal_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void ClientSignal::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:protocol.voice.v1.ClientSignal)
  switch (event_case()) {
    case kAnswer: {
      if (GetArena() == nullptr) {
        delete event_.answer_;
      }
      break;
    }
    case kCandidate: {
      if (GetArena() == nullptr) {
        delete event_.candidate_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void ClientSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.ClientSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.voice.v1.ClientSignal.Answer answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_answer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.voice.v1.ClientSignal.Candidate candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.ClientSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.voice.v1.ClientSignal.Answer answer = 1;
  if (_internal_has_answer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::answer(this), target, stream);
  }

  // .protocol.voice.v1.ClientSignal.Candidate candidate = 2;
  if (_internal_has_candidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candidate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.ClientSignal)
  return target;
}

size_t ClientSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.ClientSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .protocol.voice.v1.ClientSignal.Answer answer = 1;
    case kAnswer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.answer_);
      break;
    }
    // .protocol.voice.v1.ClientSignal.Candidate candidate = 2;
    case kCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.candidate_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.ClientSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.ClientSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.ClientSignal)
    MergeFrom(*source);
  }
}

void ClientSignal::MergeFrom(const ClientSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.ClientSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kAnswer: {
      _internal_mutable_answer()->::protocol::voice::v1::ClientSignal_Answer::MergeFrom(from._internal_answer());
      break;
    }
    case kCandidate: {
      _internal_mutable_candidate()->::protocol::voice::v1::ClientSignal_Candidate::MergeFrom(from._internal_candidate());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void ClientSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.ClientSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSignal::CopyFrom(const ClientSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.ClientSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSignal::IsInitialized() const {
  return true;
}

void ClientSignal::InternalSwap(ClientSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal_ICECandidate::InitAsDefaultInstance() {
}
class Signal_ICECandidate::_Internal {
 public:
};

Signal_ICECandidate::Signal_ICECandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.Signal.ICECandidate)
}
Signal_ICECandidate::Signal_ICECandidate(const Signal_ICECandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate().empty()) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_candidate(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.Signal.ICECandidate)
}

void Signal_ICECandidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto.base);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Signal_ICECandidate::~Signal_ICECandidate() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.Signal.ICECandidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal_ICECandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signal_ICECandidate::ArenaDtor(void* object) {
  Signal_ICECandidate* _this = reinterpret_cast< Signal_ICECandidate* >(object);
  (void)_this;
}
void Signal_ICECandidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal_ICECandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_ICECandidate& Signal_ICECandidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_ICECandidate_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void Signal_ICECandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.Signal.ICECandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal_ICECandidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.voice.v1.Signal.ICECandidate.candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal_ICECandidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.Signal.ICECandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.voice.v1.Signal.ICECandidate.candidate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.Signal.ICECandidate)
  return target;
}

size_t Signal_ICECandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.Signal.ICECandidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_ICECandidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.Signal.ICECandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_ICECandidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal_ICECandidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.Signal.ICECandidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.Signal.ICECandidate)
    MergeFrom(*source);
  }
}

void Signal_ICECandidate::MergeFrom(const Signal_ICECandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.Signal.ICECandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidate().size() > 0) {
    _internal_set_candidate(from._internal_candidate());
  }
}

void Signal_ICECandidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.Signal.ICECandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_ICECandidate::CopyFrom(const Signal_ICECandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.Signal.ICECandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_ICECandidate::IsInitialized() const {
  return true;
}

void Signal_ICECandidate::InternalSwap(Signal_ICECandidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  candidate_.Swap(&other->candidate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal_ICECandidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal_Offer::InitAsDefaultInstance() {
}
class Signal_Offer::_Internal {
 public:
};

Signal_Offer::Signal_Offer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.Signal.Offer)
}
Signal_Offer::Signal_Offer(const Signal_Offer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offer().empty()) {
    offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.Signal.Offer)
}

void Signal_Offer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto.base);
  offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Signal_Offer::~Signal_Offer() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.Signal.Offer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal_Offer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  offer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signal_Offer::ArenaDtor(void* object) {
  Signal_Offer* _this = reinterpret_cast< Signal_Offer* >(object);
  (void)_this;
}
void Signal_Offer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal_Offer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal_Offer& Signal_Offer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_Offer_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void Signal_Offer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.Signal.Offer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal_Offer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_offer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.voice.v1.Signal.Offer.offer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal_Offer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.Signal.Offer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string offer = 1;
  if (this->offer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offer().data(), static_cast<int>(this->_internal_offer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.voice.v1.Signal.Offer.offer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_offer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.Signal.Offer)
  return target;
}

size_t Signal_Offer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.Signal.Offer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string offer = 1;
  if (this->offer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal_Offer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.Signal.Offer)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Offer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal_Offer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.Signal.Offer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.Signal.Offer)
    MergeFrom(*source);
  }
}

void Signal_Offer::MergeFrom(const Signal_Offer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.Signal.Offer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offer().size() > 0) {
    _internal_set_offer(from._internal_offer());
  }
}

void Signal_Offer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.Signal.Offer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Offer::CopyFrom(const Signal_Offer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.Signal.Offer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Offer::IsInitialized() const {
  return true;
}

void Signal_Offer::InternalSwap(Signal_Offer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  offer_.Swap(&other->offer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal_Offer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::protocol::voice::v1::_Signal_default_instance_.candidate_ = const_cast< ::protocol::voice::v1::Signal_ICECandidate*>(
      ::protocol::voice::v1::Signal_ICECandidate::internal_default_instance());
  ::protocol::voice::v1::_Signal_default_instance_.offer_ = const_cast< ::protocol::voice::v1::Signal_Offer*>(
      ::protocol::voice::v1::Signal_Offer::internal_default_instance());
}
class Signal::_Internal {
 public:
  static const ::protocol::voice::v1::Signal_ICECandidate& candidate(const Signal* msg);
  static const ::protocol::voice::v1::Signal_Offer& offer(const Signal* msg);
};

const ::protocol::voice::v1::Signal_ICECandidate&
Signal::_Internal::candidate(const Signal* msg) {
  return *msg->event_.candidate_;
}
const ::protocol::voice::v1::Signal_Offer&
Signal::_Internal::offer(const Signal* msg) {
  return *msg->event_.offer_;
}
void Signal::set_allocated_candidate(::protocol::voice::v1::Signal_ICECandidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    set_has_candidate();
    event_.candidate_ = candidate;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.Signal.candidate)
}
void Signal::set_allocated_offer(::protocol::voice::v1::Signal_Offer* offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(offer);
    if (message_arena != submessage_arena) {
      offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer, submessage_arena);
    }
    set_has_offer();
    event_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.voice.v1.Signal.offer)
}
Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.voice.v1.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kCandidate: {
      _internal_mutable_candidate()->::protocol::voice::v1::Signal_ICECandidate::MergeFrom(from._internal_candidate());
      break;
    }
    case kOffer: {
      _internal_mutable_offer()->::protocol::voice::v1::Signal_Offer::MergeFrom(from._internal_offer());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.voice.v1.Signal)
}

void Signal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signal_voice_2fv1_2fvoice_2eproto.base);
  clear_has_event();
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:protocol.voice.v1.Signal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void Signal::ArenaDtor(void* object) {
  Signal* _this = reinterpret_cast< Signal* >(object);
  (void)_this;
}
void Signal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signal_voice_2fv1_2fvoice_2eproto.base);
  return *internal_default_instance();
}


void Signal::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:protocol.voice.v1.Signal)
  switch (event_case()) {
    case kCandidate: {
      if (GetArena() == nullptr) {
        delete event_.candidate_;
      }
      break;
    }
    case kOffer: {
      if (GetArena() == nullptr) {
        delete event_.offer_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.voice.v1.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.voice.v1.Signal.ICECandidate candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.voice.v1.Signal.Offer offer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.voice.v1.Signal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.voice.v1.Signal.ICECandidate candidate = 1;
  if (_internal_has_candidate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::candidate(this), target, stream);
  }

  // .protocol.voice.v1.Signal.Offer offer = 2;
  if (_internal_has_offer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.voice.v1.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.voice.v1.Signal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .protocol.voice.v1.Signal.ICECandidate candidate = 1;
    case kCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.candidate_);
      break;
    }
    // .protocol.voice.v1.Signal.Offer offer = 2;
    case kOffer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.offer_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.voice.v1.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.voice.v1.Signal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.voice.v1.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.voice.v1.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kCandidate: {
      _internal_mutable_candidate()->::protocol::voice::v1::Signal_ICECandidate::MergeFrom(from._internal_candidate());
      break;
    }
    case kOffer: {
      _internal_mutable_offer()->::protocol::voice::v1::Signal_Offer::MergeFrom(from._internal_offer());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Signal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.voice.v1.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.voice.v1.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace voice
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::ClientSignal_Answer* Arena::CreateMaybeMessage< ::protocol::voice::v1::ClientSignal_Answer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::ClientSignal_Answer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::ClientSignal_Candidate* Arena::CreateMaybeMessage< ::protocol::voice::v1::ClientSignal_Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::ClientSignal_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::ClientSignal* Arena::CreateMaybeMessage< ::protocol::voice::v1::ClientSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::ClientSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::Signal_ICECandidate* Arena::CreateMaybeMessage< ::protocol::voice::v1::Signal_ICECandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::Signal_ICECandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::Signal_Offer* Arena::CreateMaybeMessage< ::protocol::voice::v1::Signal_Offer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::Signal_Offer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::voice::v1::Signal* Arena::CreateMaybeMessage< ::protocol::voice::v1::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::voice::v1::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
