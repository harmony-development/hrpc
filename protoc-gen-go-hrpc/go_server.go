package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage = protogen.GoImportPath("context")
	httpPackage    = protogen.GoImportPath("net/http")
	serverPackage  = protogen.GoImportPath("github.com/harmony-development/hrpc/server")
)

func GenerateGoServer(gen *protogen.Plugin, file *protogen.File) {
	if len(file.Services) == 0 {
		return
	}

	filename := file.GeneratedFilenamePrefix + "_hrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	genContent(g, file)
}

func genContent(g *protogen.GeneratedFile, file *protogen.File) {
	for _, service := range file.Services {
		genService(g, service)
	}
}

func genService(g *protogen.GeneratedFile, service *protogen.Service) {
	serverType := service.GoName + "Server"
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		g.P(method.Comments.Leading, serverSignature(g, method))
	}
	g.P("}")
	g.P()

	genHandlerStruct(g, service, serverType)
}

func genHandlerStruct(g *protogen.GeneratedFile, service *protogen.Service, serverType string) {
	handlerType := service.GoName + "Handler"
	handlerFuncType := g.QualifiedGoIdent(httpPackage.Ident("HandlerFunc"))
	handlerMapType := fmt.Sprintf("map[string]%s", handlerFuncType)
	newUnaryHandlerType := g.QualifiedGoIdent(serverPackage.Ident("NewUnaryHandler"))

	g.P(fmt.Sprintf("type %s struct {", handlerType))
	g.P("Server " + serverType)
	g.P("}")
	g.P(fmt.Sprintf("func (h *%s) Routes() %s {", handlerType, handlerMapType))
	g.P("return ", handlerMapType, "{")
	for _, method := range service.Methods {
		g.P(
			fmt.Sprintf(
				`"/%s/": %s(%s, h.Server.%s),`,
				method.Desc.FullName(),
				newUnaryHandlerType,
				g.QualifiedGoIdent(method.Input.GoIdent),
				method.GoName,
			),
		)
	}
	g.P("}")
	g.P("}")
	g.P()
}

func serverSignature(g *protogen.GeneratedFile, m *protogen.Method) string {
	var inputArgs []string
	var ret string
	inputType := g.QualifiedGoIdent(m.Input.GoIdent)
	outputType := g.QualifiedGoIdent(m.Output.GoIdent)
	inputArgs = append(inputArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))
	if m.Desc.IsStreamingClient() {
		inputArgs = append(inputArgs, "chan *"+inputType)
	} else {
		inputArgs = append(inputArgs, "*"+inputType)
	}
	if m.Desc.IsStreamingServer() {
		ret = "chan *" + outputType
	} else {
		ret = "*" + outputType
	}
	return fmt.Sprintf("%s(%s) (%s, error)", m.GoName, strings.Join(inputArgs, ", "), ret)
}
