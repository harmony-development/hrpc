// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mediaproxy/v1/mediaproxy.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _mediaproxy_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SiteMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SiteMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SiteTitle

	// no validation rules for PageTitle

	// no validation rules for Kind

	// no validation rules for Description

	// no validation rules for Url

	// no validation rules for Image

	return nil
}

// SiteMetadataValidationError is the validation error returned by
// SiteMetadata.Validate if the designated constraints aren't met.
type SiteMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SiteMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SiteMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SiteMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SiteMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SiteMetadataValidationError) ErrorName() string { return "SiteMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SiteMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSiteMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SiteMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SiteMetadataValidationError{}

// Validate checks the field values on FetchLinkMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FetchLinkMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// FetchLinkMetadataRequestValidationError is the validation error returned by
// FetchLinkMetadataRequest.Validate if the designated constraints aren't met.
type FetchLinkMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchLinkMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchLinkMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchLinkMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchLinkMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchLinkMetadataRequestValidationError) ErrorName() string {
	return "FetchLinkMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchLinkMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchLinkMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchLinkMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchLinkMetadataRequestValidationError{}

// Validate checks the field values on InstantViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstantViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// InstantViewRequestValidationError is the validation error returned by
// InstantViewRequest.Validate if the designated constraints aren't met.
type InstantViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstantViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstantViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstantViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstantViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstantViewRequestValidationError) ErrorName() string {
	return "InstantViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstantViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstantViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstantViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstantViewRequestValidationError{}

// Validate checks the field values on InstantViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstantViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstantViewResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for IsValid

	return nil
}

// InstantViewResponseValidationError is the validation error returned by
// InstantViewResponse.Validate if the designated constraints aren't met.
type InstantViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstantViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstantViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstantViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstantViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstantViewResponseValidationError) ErrorName() string {
	return "InstantViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstantViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstantViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstantViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstantViewResponseValidationError{}

// Validate checks the field values on CanInstantViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CanInstantViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CanInstantView

	return nil
}

// CanInstantViewResponseValidationError is the validation error returned by
// CanInstantViewResponse.Validate if the designated constraints aren't met.
type CanInstantViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanInstantViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanInstantViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanInstantViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanInstantViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanInstantViewResponseValidationError) ErrorName() string {
	return "CanInstantViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CanInstantViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanInstantViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanInstantViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanInstantViewResponseValidationError{}
