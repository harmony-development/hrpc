// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: voice/v1/voice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _voice_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ClientSignal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ClientSignal) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *ClientSignal_Answer_:

		if v, ok := interface{}(m.GetAnswer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientSignalValidationError{
					field:  "Answer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClientSignal_Candidate_:

		if v, ok := interface{}(m.GetCandidate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientSignalValidationError{
					field:  "Candidate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ClientSignalValidationError is the validation error returned by
// ClientSignal.Validate if the designated constraints aren't met.
type ClientSignalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientSignalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientSignalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientSignalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientSignalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientSignalValidationError) ErrorName() string { return "ClientSignalValidationError" }

// Error satisfies the builtin error interface
func (e ClientSignalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientSignal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientSignalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientSignalValidationError{}

// Validate checks the field values on Signal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Signal) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *Signal_Candidate:

		if v, ok := interface{}(m.GetCandidate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalValidationError{
					field:  "Candidate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Signal_Offer_:

		if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignalValidationError{
					field:  "Offer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignalValidationError is the validation error returned by Signal.Validate if
// the designated constraints aren't met.
type SignalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalValidationError) ErrorName() string { return "SignalValidationError" }

// Error satisfies the builtin error interface
func (e SignalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalValidationError{}

// Validate checks the field values on ClientSignal_Answer with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClientSignal_Answer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Answer

	return nil
}

// ClientSignal_AnswerValidationError is the validation error returned by
// ClientSignal_Answer.Validate if the designated constraints aren't met.
type ClientSignal_AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientSignal_AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientSignal_AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientSignal_AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientSignal_AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientSignal_AnswerValidationError) ErrorName() string {
	return "ClientSignal_AnswerValidationError"
}

// Error satisfies the builtin error interface
func (e ClientSignal_AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientSignal_Answer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientSignal_AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientSignal_AnswerValidationError{}

// Validate checks the field values on ClientSignal_Candidate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClientSignal_Candidate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Candidate

	return nil
}

// ClientSignal_CandidateValidationError is the validation error returned by
// ClientSignal_Candidate.Validate if the designated constraints aren't met.
type ClientSignal_CandidateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientSignal_CandidateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientSignal_CandidateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientSignal_CandidateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientSignal_CandidateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientSignal_CandidateValidationError) ErrorName() string {
	return "ClientSignal_CandidateValidationError"
}

// Error satisfies the builtin error interface
func (e ClientSignal_CandidateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientSignal_Candidate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientSignal_CandidateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientSignal_CandidateValidationError{}

// Validate checks the field values on Signal_ICECandidate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Signal_ICECandidate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Candidate

	return nil
}

// Signal_ICECandidateValidationError is the validation error returned by
// Signal_ICECandidate.Validate if the designated constraints aren't met.
type Signal_ICECandidateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Signal_ICECandidateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Signal_ICECandidateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Signal_ICECandidateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Signal_ICECandidateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Signal_ICECandidateValidationError) ErrorName() string {
	return "Signal_ICECandidateValidationError"
}

// Error satisfies the builtin error interface
func (e Signal_ICECandidateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignal_ICECandidate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Signal_ICECandidateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Signal_ICECandidateValidationError{}

// Validate checks the field values on Signal_Offer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Signal_Offer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Offer

	return nil
}

// Signal_OfferValidationError is the validation error returned by
// Signal_Offer.Validate if the designated constraints aren't met.
type Signal_OfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Signal_OfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Signal_OfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Signal_OfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Signal_OfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Signal_OfferValidationError) ErrorName() string { return "Signal_OfferValidationError" }

// Error satisfies the builtin error interface
func (e Signal_OfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignal_Offer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Signal_OfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Signal_OfferValidationError{}
