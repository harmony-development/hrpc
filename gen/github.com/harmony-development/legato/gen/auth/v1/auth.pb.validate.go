// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _auth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on BeginAuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BeginAuthResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthId

	return nil
}

// BeginAuthResponseValidationError is the validation error returned by
// BeginAuthResponse.Validate if the designated constraints aren't met.
type BeginAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginAuthResponseValidationError) ErrorName() string {
	return "BeginAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BeginAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginAuthResponseValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Session) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for SessionToken

	return nil
}

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on AuthStep with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AuthStep) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FallbackUrl

	// no validation rules for CanGoBack

	switch m.Step.(type) {

	case *AuthStep_Choice_:

		if v, ok := interface{}(m.GetChoice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthStepValidationError{
					field:  "Choice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthStep_Form_:

		if v, ok := interface{}(m.GetForm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthStepValidationError{
					field:  "Form",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthStep_Session:

		if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthStepValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthStep_Waiting_:

		if v, ok := interface{}(m.GetWaiting()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthStepValidationError{
					field:  "Waiting",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AuthStepValidationError is the validation error returned by
// AuthStep.Validate if the designated constraints aren't met.
type AuthStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStepValidationError) ErrorName() string { return "AuthStepValidationError" }

// Error satisfies the builtin error interface
func (e AuthStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStepValidationError{}

// Validate checks the field values on NextStepRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NextStepRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthId

	switch m.Step.(type) {

	case *NextStepRequest_Choice_:

		if v, ok := interface{}(m.GetChoice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NextStepRequestValidationError{
					field:  "Choice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NextStepRequest_Form_:

		if v, ok := interface{}(m.GetForm()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NextStepRequestValidationError{
					field:  "Form",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NextStepRequestValidationError is the validation error returned by
// NextStepRequest.Validate if the designated constraints aren't met.
type NextStepRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextStepRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextStepRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextStepRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextStepRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextStepRequestValidationError) ErrorName() string { return "NextStepRequestValidationError" }

// Error satisfies the builtin error interface
func (e NextStepRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextStepRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextStepRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextStepRequestValidationError{}

// Validate checks the field values on StepBackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StepBackRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthId

	return nil
}

// StepBackRequestValidationError is the validation error returned by
// StepBackRequest.Validate if the designated constraints aren't met.
type StepBackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepBackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepBackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepBackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepBackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepBackRequestValidationError) ErrorName() string { return "StepBackRequestValidationError" }

// Error satisfies the builtin error interface
func (e StepBackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStepBackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepBackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepBackRequestValidationError{}

// Validate checks the field values on StreamStepsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamStepsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthId

	return nil
}

// StreamStepsRequestValidationError is the validation error returned by
// StreamStepsRequest.Validate if the designated constraints aren't met.
type StreamStepsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamStepsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamStepsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamStepsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamStepsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamStepsRequestValidationError) ErrorName() string {
	return "StreamStepsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamStepsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamStepsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamStepsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamStepsRequestValidationError{}

// Validate checks the field values on FederateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FederateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Target

	return nil
}

// FederateRequestValidationError is the validation error returned by
// FederateRequest.Validate if the designated constraints aren't met.
type FederateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FederateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FederateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FederateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FederateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FederateRequestValidationError) ErrorName() string { return "FederateRequestValidationError" }

// Error satisfies the builtin error interface
func (e FederateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFederateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FederateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FederateRequestValidationError{}

// Validate checks the field values on FederateReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FederateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Nonce

	return nil
}

// FederateReplyValidationError is the validation error returned by
// FederateReply.Validate if the designated constraints aren't met.
type FederateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FederateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FederateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FederateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FederateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FederateReplyValidationError) ErrorName() string { return "FederateReplyValidationError" }

// Error satisfies the builtin error interface
func (e FederateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFederateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FederateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FederateReplyValidationError{}

// Validate checks the field values on KeyReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *KeyReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	return nil
}

// KeyReplyValidationError is the validation error returned by
// KeyReply.Validate if the designated constraints aren't met.
type KeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyReplyValidationError) ErrorName() string { return "KeyReplyValidationError" }

// Error satisfies the builtin error interface
func (e KeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyReplyValidationError{}

// Validate checks the field values on LoginFederatedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginFederatedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AuthToken

	// no validation rules for Domain

	return nil
}

// LoginFederatedRequestValidationError is the validation error returned by
// LoginFederatedRequest.Validate if the designated constraints aren't met.
type LoginFederatedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginFederatedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginFederatedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginFederatedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginFederatedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginFederatedRequestValidationError) ErrorName() string {
	return "LoginFederatedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginFederatedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginFederatedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginFederatedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginFederatedRequestValidationError{}

// Validate checks the field values on AuthStep_Choice with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AuthStep_Choice) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	return nil
}

// AuthStep_ChoiceValidationError is the validation error returned by
// AuthStep_Choice.Validate if the designated constraints aren't met.
type AuthStep_ChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStep_ChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStep_ChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStep_ChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStep_ChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStep_ChoiceValidationError) ErrorName() string { return "AuthStep_ChoiceValidationError" }

// Error satisfies the builtin error interface
func (e AuthStep_ChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStep_Choice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStep_ChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStep_ChoiceValidationError{}

// Validate checks the field values on AuthStep_Form with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AuthStep_Form) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthStep_FormValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AuthStep_FormValidationError is the validation error returned by
// AuthStep_Form.Validate if the designated constraints aren't met.
type AuthStep_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStep_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStep_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStep_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStep_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStep_FormValidationError) ErrorName() string { return "AuthStep_FormValidationError" }

// Error satisfies the builtin error interface
func (e AuthStep_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStep_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStep_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStep_FormValidationError{}

// Validate checks the field values on AuthStep_Waiting with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AuthStep_Waiting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// AuthStep_WaitingValidationError is the validation error returned by
// AuthStep_Waiting.Validate if the designated constraints aren't met.
type AuthStep_WaitingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStep_WaitingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStep_WaitingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStep_WaitingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStep_WaitingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStep_WaitingValidationError) ErrorName() string { return "AuthStep_WaitingValidationError" }

// Error satisfies the builtin error interface
func (e AuthStep_WaitingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStep_Waiting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStep_WaitingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStep_WaitingValidationError{}

// Validate checks the field values on AuthStep_Form_FormField with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthStep_Form_FormField) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// AuthStep_Form_FormFieldValidationError is the validation error returned by
// AuthStep_Form_FormField.Validate if the designated constraints aren't met.
type AuthStep_Form_FormFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthStep_Form_FormFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthStep_Form_FormFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthStep_Form_FormFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthStep_Form_FormFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthStep_Form_FormFieldValidationError) ErrorName() string {
	return "AuthStep_Form_FormFieldValidationError"
}

// Error satisfies the builtin error interface
func (e AuthStep_Form_FormFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthStep_Form_FormField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthStep_Form_FormFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthStep_Form_FormFieldValidationError{}

// Validate checks the field values on NextStepRequest_Choice with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NextStepRequest_Choice) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Choice

	return nil
}

// NextStepRequest_ChoiceValidationError is the validation error returned by
// NextStepRequest_Choice.Validate if the designated constraints aren't met.
type NextStepRequest_ChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextStepRequest_ChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextStepRequest_ChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextStepRequest_ChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextStepRequest_ChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextStepRequest_ChoiceValidationError) ErrorName() string {
	return "NextStepRequest_ChoiceValidationError"
}

// Error satisfies the builtin error interface
func (e NextStepRequest_ChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextStepRequest_Choice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextStepRequest_ChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextStepRequest_ChoiceValidationError{}

// Validate checks the field values on NextStepRequest_FormFields with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NextStepRequest_FormFields) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Field.(type) {

	case *NextStepRequest_FormFields_Bytes:
		// no validation rules for Bytes

	case *NextStepRequest_FormFields_String_:
		// no validation rules for String_

	case *NextStepRequest_FormFields_Number:
		// no validation rules for Number

	}

	return nil
}

// NextStepRequest_FormFieldsValidationError is the validation error returned
// by NextStepRequest_FormFields.Validate if the designated constraints aren't met.
type NextStepRequest_FormFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextStepRequest_FormFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextStepRequest_FormFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextStepRequest_FormFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextStepRequest_FormFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextStepRequest_FormFieldsValidationError) ErrorName() string {
	return "NextStepRequest_FormFieldsValidationError"
}

// Error satisfies the builtin error interface
func (e NextStepRequest_FormFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextStepRequest_FormFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextStepRequest_FormFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextStepRequest_FormFieldsValidationError{}

// Validate checks the field values on NextStepRequest_Form with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NextStepRequest_Form) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NextStepRequest_FormValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// NextStepRequest_FormValidationError is the validation error returned by
// NextStepRequest_Form.Validate if the designated constraints aren't met.
type NextStepRequest_FormValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextStepRequest_FormValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextStepRequest_FormValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextStepRequest_FormValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextStepRequest_FormValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextStepRequest_FormValidationError) ErrorName() string {
	return "NextStepRequest_FormValidationError"
}

// Error satisfies the builtin error interface
func (e NextStepRequest_FormValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextStepRequest_Form.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextStepRequest_FormValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextStepRequest_FormValidationError{}
