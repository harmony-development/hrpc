// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/channels.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _channels_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelName

	// no validation rules for IsCategory

	// no validation rules for PreviousId

	// no validation rules for NextId

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChannelRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on CreateChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChannelResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ChannelId

	return nil
}

// CreateChannelResponseValidationError is the validation error returned by
// CreateChannelResponse.Validate if the designated constraints aren't met.
type CreateChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelResponseValidationError) ErrorName() string {
	return "CreateChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelResponseValidationError{}

// Validate checks the field values on GetGuildChannelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	return nil
}

// GetGuildChannelsRequestValidationError is the validation error returned by
// GetGuildChannelsRequest.Validate if the designated constraints aren't met.
type GetGuildChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsRequestValidationError) ErrorName() string {
	return "GetGuildChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsRequestValidationError{}

// Validate checks the field values on GetGuildChannelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGuildChannelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGuildChannelsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGuildChannelsResponseValidationError is the validation error returned by
// GetGuildChannelsResponse.Validate if the designated constraints aren't met.
type GetGuildChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponseValidationError) ErrorName() string {
	return "GetGuildChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponseValidationError{}

// Validate checks the field values on UpdateChannelInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChannelInformationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for Name

	// no validation rules for UpdateName

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChannelInformationRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateMetadata

	return nil
}

// UpdateChannelInformationRequestValidationError is the validation error
// returned by UpdateChannelInformationRequest.Validate if the designated
// constraints aren't met.
type UpdateChannelInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelInformationRequestValidationError) ErrorName() string {
	return "UpdateChannelInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelInformationRequestValidationError{}

// Validate checks the field values on UpdateChannelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChannelOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for PreviousId

	// no validation rules for NextId

	return nil
}

// UpdateChannelOrderRequestValidationError is the validation error returned by
// UpdateChannelOrderRequest.Validate if the designated constraints aren't met.
type UpdateChannelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelOrderRequestValidationError) ErrorName() string {
	return "UpdateChannelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelOrderRequestValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteChannelRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	return nil
}

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on TypingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TypingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	return nil
}

// TypingRequestValidationError is the validation error returned by
// TypingRequest.Validate if the designated constraints aren't met.
type TypingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypingRequestValidationError) ErrorName() string { return "TypingRequestValidationError" }

// Error satisfies the builtin error interface
func (e TypingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypingRequestValidationError{}

// Validate checks the field values on GetGuildChannelsResponse_Channel with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetGuildChannelsResponse_Channel) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildChannelsResponse_ChannelValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChannelId

	// no validation rules for ChannelName

	// no validation rules for IsCategory

	return nil
}

// GetGuildChannelsResponse_ChannelValidationError is the validation error
// returned by GetGuildChannelsResponse_Channel.Validate if the designated
// constraints aren't met.
type GetGuildChannelsResponse_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildChannelsResponse_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildChannelsResponse_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildChannelsResponse_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildChannelsResponse_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildChannelsResponse_ChannelValidationError) ErrorName() string {
	return "GetGuildChannelsResponse_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildChannelsResponse_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildChannelsResponse_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildChannelsResponse_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildChannelsResponse_ChannelValidationError{}
