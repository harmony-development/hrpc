// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/streaming.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _streaming_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on StreamEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StreamEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Request.(type) {

	case *StreamEventsRequest_SubscribeToGuild_:

		if v, ok := interface{}(m.GetSubscribeToGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamEventsRequestValidationError{
					field:  "SubscribeToGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamEventsRequest_SubscribeToActions_:

		if v, ok := interface{}(m.GetSubscribeToActions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamEventsRequestValidationError{
					field:  "SubscribeToActions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamEventsRequest_SubscribeToHomeserverEvents_:

		if v, ok := interface{}(m.GetSubscribeToHomeserverEvents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamEventsRequestValidationError{
					field:  "SubscribeToHomeserverEvents",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamEventsRequestValidationError is the validation error returned by
// StreamEventsRequest.Validate if the designated constraints aren't met.
type StreamEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamEventsRequestValidationError) ErrorName() string {
	return "StreamEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamEventsRequestValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Event.(type) {

	case *Event_GuildAddedToList_:

		if v, ok := interface{}(m.GetGuildAddedToList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "GuildAddedToList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_GuildRemovedFromList_:

		if v, ok := interface{}(m.GetGuildRemovedFromList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "GuildRemovedFromList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ActionPerformed_:

		if v, ok := interface{}(m.GetActionPerformed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ActionPerformed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_SentMessage:

		if v, ok := interface{}(m.GetSentMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "SentMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_EditedMessage:

		if v, ok := interface{}(m.GetEditedMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EditedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_DeletedMessage:

		if v, ok := interface{}(m.GetDeletedMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "DeletedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_CreatedChannel:

		if v, ok := interface{}(m.GetCreatedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "CreatedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_EditedChannel:

		if v, ok := interface{}(m.GetEditedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EditedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_DeletedChannel:

		if v, ok := interface{}(m.GetDeletedChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "DeletedChannel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_EditedGuild:

		if v, ok := interface{}(m.GetEditedGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "EditedGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_DeletedGuild:

		if v, ok := interface{}(m.GetDeletedGuild()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "DeletedGuild",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_JoinedMember:

		if v, ok := interface{}(m.GetJoinedMember()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "JoinedMember",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_LeftMember:

		if v, ok := interface{}(m.GetLeftMember()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "LeftMember",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_RoleMoved_:

		if v, ok := interface{}(m.GetRoleMoved()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "RoleMoved",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ProfileUpdated_:

		if v, ok := interface{}(m.GetProfileUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ProfileUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Typing_:

		if v, ok := interface{}(m.GetTyping()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Typing",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on StreamEventsRequest_SubscribeToGuild
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *StreamEventsRequest_SubscribeToGuild) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	return nil
}

// StreamEventsRequest_SubscribeToGuildValidationError is the validation error
// returned by StreamEventsRequest_SubscribeToGuild.Validate if the designated
// constraints aren't met.
type StreamEventsRequest_SubscribeToGuildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamEventsRequest_SubscribeToGuildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamEventsRequest_SubscribeToGuildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamEventsRequest_SubscribeToGuildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamEventsRequest_SubscribeToGuildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamEventsRequest_SubscribeToGuildValidationError) ErrorName() string {
	return "StreamEventsRequest_SubscribeToGuildValidationError"
}

// Error satisfies the builtin error interface
func (e StreamEventsRequest_SubscribeToGuildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamEventsRequest_SubscribeToGuild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamEventsRequest_SubscribeToGuildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamEventsRequest_SubscribeToGuildValidationError{}

// Validate checks the field values on StreamEventsRequest_SubscribeToActions
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *StreamEventsRequest_SubscribeToActions) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamEventsRequest_SubscribeToActionsValidationError is the validation
// error returned by StreamEventsRequest_SubscribeToActions.Validate if the
// designated constraints aren't met.
type StreamEventsRequest_SubscribeToActionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamEventsRequest_SubscribeToActionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamEventsRequest_SubscribeToActionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamEventsRequest_SubscribeToActionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamEventsRequest_SubscribeToActionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamEventsRequest_SubscribeToActionsValidationError) ErrorName() string {
	return "StreamEventsRequest_SubscribeToActionsValidationError"
}

// Error satisfies the builtin error interface
func (e StreamEventsRequest_SubscribeToActionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamEventsRequest_SubscribeToActions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamEventsRequest_SubscribeToActionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamEventsRequest_SubscribeToActionsValidationError{}

// Validate checks the field values on
// StreamEventsRequest_SubscribeToHomeserverEvents with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StreamEventsRequest_SubscribeToHomeserverEvents) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// StreamEventsRequest_SubscribeToHomeserverEventsValidationError is the
// validation error returned by
// StreamEventsRequest_SubscribeToHomeserverEvents.Validate if the designated
// constraints aren't met.
type StreamEventsRequest_SubscribeToHomeserverEventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) ErrorName() string {
	return "StreamEventsRequest_SubscribeToHomeserverEventsValidationError"
}

// Error satisfies the builtin error interface
func (e StreamEventsRequest_SubscribeToHomeserverEventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamEventsRequest_SubscribeToHomeserverEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamEventsRequest_SubscribeToHomeserverEventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamEventsRequest_SubscribeToHomeserverEventsValidationError{}

// Validate checks the field values on Event_MessageSent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Event_MessageSent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EchoId

	if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_MessageSentValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// Event_MessageSentValidationError is the validation error returned by
// Event_MessageSent.Validate if the designated constraints aren't met.
type Event_MessageSentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_MessageSentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_MessageSentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_MessageSentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_MessageSentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_MessageSentValidationError) ErrorName() string {
	return "Event_MessageSentValidationError"
}

// Error satisfies the builtin error interface
func (e Event_MessageSentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_MessageSent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_MessageSentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_MessageSentValidationError{}

// Validate checks the field values on Event_MessageUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_MessageUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for MessageId

	if v, ok := interface{}(m.GetEditedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_MessageUpdatedValidationError{
				field:  "EditedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for UpdateContent

	for idx, item := range m.GetEmbeds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_MessageUpdatedValidationError{
					field:  fmt.Sprintf("Embeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateEmbeds

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_MessageUpdatedValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateActions

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_MessageUpdatedValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdateAttachments

	if v, ok := interface{}(m.GetOverrides()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_MessageUpdatedValidationError{
				field:  "Overrides",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateOverrides

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_MessageUpdatedValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateMetadata

	return nil
}

// Event_MessageUpdatedValidationError is the validation error returned by
// Event_MessageUpdated.Validate if the designated constraints aren't met.
type Event_MessageUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_MessageUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_MessageUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_MessageUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_MessageUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_MessageUpdatedValidationError) ErrorName() string {
	return "Event_MessageUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_MessageUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_MessageUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_MessageUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_MessageUpdatedValidationError{}

// Validate checks the field values on Event_MessageDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_MessageDeleted) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for MessageId

	return nil
}

// Event_MessageDeletedValidationError is the validation error returned by
// Event_MessageDeleted.Validate if the designated constraints aren't met.
type Event_MessageDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_MessageDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_MessageDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_MessageDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_MessageDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_MessageDeletedValidationError) ErrorName() string {
	return "Event_MessageDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_MessageDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_MessageDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_MessageDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_MessageDeletedValidationError{}

// Validate checks the field values on Event_ChannelCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_ChannelCreated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for Name

	// no validation rules for PreviousId

	// no validation rules for NextId

	// no validation rules for IsCategory

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_ChannelCreatedValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// Event_ChannelCreatedValidationError is the validation error returned by
// Event_ChannelCreated.Validate if the designated constraints aren't met.
type Event_ChannelCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ChannelCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ChannelCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ChannelCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ChannelCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ChannelCreatedValidationError) ErrorName() string {
	return "Event_ChannelCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ChannelCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ChannelCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ChannelCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ChannelCreatedValidationError{}

// Validate checks the field values on Event_ChannelUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_ChannelUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for Name

	// no validation rules for UpdateName

	// no validation rules for PreviousId

	// no validation rules for NextId

	// no validation rules for UpdateOrder

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_ChannelUpdatedValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateMetadata

	return nil
}

// Event_ChannelUpdatedValidationError is the validation error returned by
// Event_ChannelUpdated.Validate if the designated constraints aren't met.
type Event_ChannelUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ChannelUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ChannelUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ChannelUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ChannelUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ChannelUpdatedValidationError) ErrorName() string {
	return "Event_ChannelUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ChannelUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ChannelUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ChannelUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ChannelUpdatedValidationError{}

// Validate checks the field values on Event_ChannelDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_ChannelDeleted) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	return nil
}

// Event_ChannelDeletedValidationError is the validation error returned by
// Event_ChannelDeleted.Validate if the designated constraints aren't met.
type Event_ChannelDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ChannelDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ChannelDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ChannelDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ChannelDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ChannelDeletedValidationError) ErrorName() string {
	return "Event_ChannelDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ChannelDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ChannelDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ChannelDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ChannelDeletedValidationError{}

// Validate checks the field values on Event_GuildUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_GuildUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Name

	// no validation rules for UpdateName

	// no validation rules for Picture

	// no validation rules for UpdatePicture

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_GuildUpdatedValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdateMetadata

	return nil
}

// Event_GuildUpdatedValidationError is the validation error returned by
// Event_GuildUpdated.Validate if the designated constraints aren't met.
type Event_GuildUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_GuildUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_GuildUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_GuildUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_GuildUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_GuildUpdatedValidationError) ErrorName() string {
	return "Event_GuildUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_GuildUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_GuildUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_GuildUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_GuildUpdatedValidationError{}

// Validate checks the field values on Event_GuildDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_GuildDeleted) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	return nil
}

// Event_GuildDeletedValidationError is the validation error returned by
// Event_GuildDeleted.Validate if the designated constraints aren't met.
type Event_GuildDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_GuildDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_GuildDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_GuildDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_GuildDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_GuildDeletedValidationError) ErrorName() string {
	return "Event_GuildDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_GuildDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_GuildDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_GuildDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_GuildDeletedValidationError{}

// Validate checks the field values on Event_MemberJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_MemberJoined) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberId

	// no validation rules for GuildId

	return nil
}

// Event_MemberJoinedValidationError is the validation error returned by
// Event_MemberJoined.Validate if the designated constraints aren't met.
type Event_MemberJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_MemberJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_MemberJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_MemberJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_MemberJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_MemberJoinedValidationError) ErrorName() string {
	return "Event_MemberJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_MemberJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_MemberJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_MemberJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_MemberJoinedValidationError{}

// Validate checks the field values on Event_MemberLeft with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Event_MemberLeft) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberId

	// no validation rules for GuildId

	return nil
}

// Event_MemberLeftValidationError is the validation error returned by
// Event_MemberLeft.Validate if the designated constraints aren't met.
type Event_MemberLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_MemberLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_MemberLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_MemberLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_MemberLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_MemberLeftValidationError) ErrorName() string { return "Event_MemberLeftValidationError" }

// Error satisfies the builtin error interface
func (e Event_MemberLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_MemberLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_MemberLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_MemberLeftValidationError{}

// Validate checks the field values on Event_GuildAddedToList with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_GuildAddedToList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// Event_GuildAddedToListValidationError is the validation error returned by
// Event_GuildAddedToList.Validate if the designated constraints aren't met.
type Event_GuildAddedToListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_GuildAddedToListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_GuildAddedToListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_GuildAddedToListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_GuildAddedToListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_GuildAddedToListValidationError) ErrorName() string {
	return "Event_GuildAddedToListValidationError"
}

// Error satisfies the builtin error interface
func (e Event_GuildAddedToListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_GuildAddedToList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_GuildAddedToListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_GuildAddedToListValidationError{}

// Validate checks the field values on Event_GuildRemovedFromList with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_GuildRemovedFromList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for Homeserver

	return nil
}

// Event_GuildRemovedFromListValidationError is the validation error returned
// by Event_GuildRemovedFromList.Validate if the designated constraints aren't met.
type Event_GuildRemovedFromListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_GuildRemovedFromListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_GuildRemovedFromListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_GuildRemovedFromListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_GuildRemovedFromListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_GuildRemovedFromListValidationError) ErrorName() string {
	return "Event_GuildRemovedFromListValidationError"
}

// Error satisfies the builtin error interface
func (e Event_GuildRemovedFromListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_GuildRemovedFromList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_GuildRemovedFromListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_GuildRemovedFromListValidationError{}

// Validate checks the field values on Event_ActionPerformed with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_ActionPerformed) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for ChannelId

	// no validation rules for MessageId

	// no validation rules for ActionId

	// no validation rules for ActionData

	return nil
}

// Event_ActionPerformedValidationError is the validation error returned by
// Event_ActionPerformed.Validate if the designated constraints aren't met.
type Event_ActionPerformedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ActionPerformedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ActionPerformedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ActionPerformedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ActionPerformedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ActionPerformedValidationError) ErrorName() string {
	return "Event_ActionPerformedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ActionPerformedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ActionPerformed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ActionPerformedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ActionPerformedValidationError{}

// Validate checks the field values on Event_RoleMoved with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Event_RoleMoved) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuildId

	// no validation rules for RoleId

	return nil
}

// Event_RoleMovedValidationError is the validation error returned by
// Event_RoleMoved.Validate if the designated constraints aren't met.
type Event_RoleMovedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_RoleMovedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_RoleMovedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_RoleMovedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_RoleMovedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_RoleMovedValidationError) ErrorName() string { return "Event_RoleMovedValidationError" }

// Error satisfies the builtin error interface
func (e Event_RoleMovedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_RoleMoved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_RoleMovedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_RoleMovedValidationError{}

// Validate checks the field values on Event_ProfileUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Event_ProfileUpdated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for NewUsername

	// no validation rules for UpdateUsername

	// no validation rules for NewAvatar

	// no validation rules for UpdateAvatar

	// no validation rules for NewStatus

	// no validation rules for UpdateStatus

	// no validation rules for IsBot

	// no validation rules for UpdateIsBot

	return nil
}

// Event_ProfileUpdatedValidationError is the validation error returned by
// Event_ProfileUpdated.Validate if the designated constraints aren't met.
type Event_ProfileUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ProfileUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ProfileUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ProfileUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ProfileUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ProfileUpdatedValidationError) ErrorName() string {
	return "Event_ProfileUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e Event_ProfileUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_ProfileUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ProfileUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ProfileUpdatedValidationError{}

// Validate checks the field values on Event_Typing with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Event_Typing) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for GuildId

	// no validation rules for ChannelId

	return nil
}

// Event_TypingValidationError is the validation error returned by
// Event_Typing.Validate if the designated constraints aren't met.
type Event_TypingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_TypingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_TypingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_TypingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_TypingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_TypingValidationError) ErrorName() string { return "Event_TypingValidationError" }

// Error satisfies the builtin error interface
func (e Event_TypingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_Typing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_TypingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_TypingValidationError{}
