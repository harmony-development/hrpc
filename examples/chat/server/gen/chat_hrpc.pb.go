// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package chat

import (
	context "context"
	errors "errors"

	server "github.com/harmony-development/hrpc/server"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type ChatServiceServer interface {
	SendMessage(context.Context, *Message) (*emptypb.Empty, error)
	StreamMessages(context.Context, chan *emptypb.Empty) (chan *Message, error)
}

type DefaultChatService struct{}

func (DefaultChatService) SendMessage(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, errors.New("unimplemented")
}

func (DefaultChatService) StreamMessages(context.Context, chan *emptypb.Empty) (chan *Message, error) {
	return nil, errors.New("unimplemented")
}

type ChatServiceHandler struct {
	Server ChatServiceServer
}

func NewChatServiceHandler(server ChatServiceServer) *ChatServiceHandler {
	return &ChatServiceHandler{Server: server}
}

func (h *ChatServiceHandler) Name() string {
	return "ChatService"
}

func (h *ChatServiceHandler) Routes() map[string]server.RawHandler {
	return map[string]server.RawHandler{
		"/chat.ChatService/SendMessage": server.NewUnaryHandler(&Message{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.SendMessage(c, req.(*Message))
		}),
		"/chat.ChatService/StreamMessages": server.NewStreamingHandler(&emptypb.Empty{}, func(c context.Context, req chan proto.Message) (chan proto.Message, error) {
			reqChan := make(chan *emptypb.Empty)
			res, err := h.Server.StreamMessages(c, reqChan)
			return res.(chan proto.Message), err
		}),
	}
}
