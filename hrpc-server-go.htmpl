{{ $base := (trimSuffix (filepathBase .Name) ".proto") }}
{{ setFilename (sprintf "%s/%s.hrpc.server.go" (deref .Options.GoPackage) $base) }}

{{ $item := . }}

package {{ filepathBase .Options.GoPackage }}

import "context"
import "net/http"
import "io/ioutil"
import "google.golang.org/protobuf/proto"

{{ $imports := newset }}

{{ range .Service }}

    {{ range .Method }}

        {{ if (not (or (hasClientStream .) (hasServerStream .)) ) }}
            {{ $resIn := (resolvedGoType $item . .InputType ) }}
            {{ $resOut := (resolvedGoType $item . .OutputType ) }}

            {{ appendSet $imports $resIn.Package }}
            {{ appendSet $imports $resOut.Package }}
        {{ end }}

    {{ end }}

{{ end }}

{{ range $k, $v := $imports }}

    import "{{ $k }}"

{{ end }}

{{ if .Service }}
{{ setOK true }}
{{ end }}

{{ range .Service }}

    {{ $serv := . }}
    {{ $sname := (sprintf "%sServer" (deref .Name)) }}

    type {{ $sname }} interface {
    {{ range .Method }}

        {{ if (not (or (hasClientStream .) (hasServerStream .)) ) }}
            {{ $resIn := (resolvedGoType $item . .InputType ) }}
            {{ $resOut := (resolvedGoType $item . .OutputType ) }}

            {{ deref .Name }}(ctx context.Context, r *{{ $resIn.ID}}, headers http.Header) (resp *{{ $resOut.ID}}, err error)
        {{ end }}

    {{ end }}
    }

    type {{ deref .Name }}Handler struct {
        Server {{ $sname }}
        ErrorHandler func(err error, w http.ResponseWriter)
    }

    func (h *{{ deref .Name }}Handler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
        switch (req.URL.Path) {
        {{ range .Method }}
        {{ if (not (or (hasClientStream .) (hasServerStream .)) ) }}
        case "/{{ $item.Package }}.{{ $serv.Name }}/{{ .Name }}": {
            body, err := ioutil.ReadAll(req.Body)
            defer req.Body.Close()
            if err != nil {
                h.ErrorHandler(err, w)
                return
            }

            {{ $resIn := (resolvedGoType $item . .InputType ) }}
            requestProto := new({{ $resIn.ID }})
            err = proto.Unmarshal(body, requestProto)
            if err != nil {
                h.ErrorHandler(err, w)
                return
            }

            resp, err := h.Server.{{ .Name }}(req.Context(), nil, req.Header)

            response, err := proto.Marshal(resp)
            if err != nil {
                h.ErrorHandler(err, w)
                return
            }

            w.Header().Add("Content-Type", "application/octet-stream")
            _, err = w.Write(response)

            if err != nil {
                h.ErrorHandler(err, w)
                return
            }
        }
        {{ end }}
        {{ end }}
        }
    }

{{ end }}

