// Code generated by "esc -o data_gen.go -pkg main ../templates"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/hrpc-client-go.htmpl": {
		name:    "hrpc-client-go.htmpl",
		local:   "../templates/hrpc-client-go.htmpl",
		size:    5646,
		modtime: 1612638945,
		compressed: `
H4sIAAAAAAAC/+RY224TOxe+71MsRi2aQRPnPioX0P4/oE1pRYq4QAi5M2smVjz21Pa0u4ry7lu259jJ
gVCqjbS5oJHXwev71snJagXHN1QjzF5DaBQr5lWWsb8hzBjHkprFWyskn2iBEQSkVNLIIIL1+mi1Ao3m
/4yjoAVCqEvFhMkgONHTE00WqkxIwhkKQ3IZQJiiwgzIZWmYFJq8k1c0WdIcIx+A82mdHjODhQ2HuJPS
a8FqBcOQRo6cOitKqQwEAs10YUwZtCe5lDlHkktORU6kyqcOzE2V+Q+dJpNTJivDeHeUFabniZlFdUMS
WUxzqRjndHqPN1omS+xp2Qgq1fNx82BQBzVGd6YtTIH3Gk2DXlGRI5A5qjuWeEgAAJ3kAs1Cpq2gFh4r
1B+ES6JCLfkdpu/k9UOJNZ0EyAdRVsYdOaofGV9WZqf1ZWUG5n17WpYo0jmaDpePh/Qys1//sjJ9gwY3
irQhp/fRs3G8jOH4zgbeemosG9YtviWs18FjDywb0OzL+fIvMKpqDkb3bcrLsUZ119Zre+iawjLa64sz
1w5dL7iu6ug0lt3OeL0GbVSVGFi17PmGgle2tIl318psHKi+fP5ozZjIuxy9R5qiAmfkP3ei6+urK1v+
jVEj+DofHddhZpVI4BPe9yMNK8Vr1QheDTB0wSs0lRLwsi/upB28mf34sgdxtY4Hai3SGVSKD2Ue36wP
9rF5i3kGgVXTwVBeQ59BcK/7snWfhf9qR9YWLINQSAOhVBAuaF3ac6OQFkAidzZ3aWrPoiHMtpTCpqj7
dRHZS/p94oxD5bU8lg/nTjF81THmz2JApaSKYFhdbixYzp3ckusGP7mgSi8oD1U0Vs+c6ovXIBjf4K5X
1oLxGLLCkP/Zu7MwSGTFU7AkFVQZRjkovK1Qmxmc3AcuhvGF66Ox+9s2XlfUn/D+s3cUBleX8+vAXzv3
cyYMTvRsOj3R02aX9lJImnnlKV2vrVLzOYjr/iNtg7QnbcdFMbg95qOw3RU6SqPfy53LHyQKqWEi/zXi
MqlgGYObzb5VG3h+HG6L6LZW+Lb8Dq/h7udSVNuQN2lqMy8MCjOxAz2IIaBlyVlC7XtlKhODZqJdUwTR
Ble6bNNdx1v/OZehwtvn4LmU+tdpTjFD5eImb2X6QM641BiOLVNqaIvMv6+IraA3nIet9XOgU0hTj06X
Umg8DJ50Y9bG/PLxmFmNtW2ozVj5Iop6sHjo3tNzIKyam/iv46xv8EHG9qajzQb2XcQ1ug1ARbpp0ter
YbwWomfaAMmCCjhkDZRUsCQMKsGKkmOBwmD6qBsPRLwB7JOxRhAyARbc6WQE2xUUnE52YN+Ov7IFXSlO
vnz+uJonCyxw1oyb+vkTw3tpZ8HjDRDDFTWLGQSHL5jeE6J98cXwo50K7bcoco4Zrbg5Z5SjIvZPWJG5
e1+GUTwc5E/vKPcfKrWhTTY8IM5sqAVd4rDs2nLcNEK22LTpisYX5dIVTBhtAeDnbtLO241Khc718Opv
3+3+3qK+785mrW6X2n8/YihQa5pjt8ncqL/wpxuWw6HZG35psARYpNFe3RuFdLlTa71T6vg8nTT4jg7z
st6Wpt2cauQ4+BY4YoBqtKHFIJeW7dOJjXO2j+UXcvkT9PpG2cPZTrFZ2LXkf+oIx5W/y3TzPnVQndff
W0lPh+pa/XTig9udL40i7RLGxNkfk6/BS234FckG/adx7mskIV8VM9iMmG6VvGWCqoeLZiBZcP8CggMH
xdFPjY56hzFx5h4DZ/uebSLd88PaPwEAAP//vEt/TQ4WAAA=
`,
	},

	"/templates/hrpc-server-echo-go.htmpl": {
		name:    "hrpc-server-echo-go.htmpl",
		local:   "../templates/hrpc-server-echo-go.htmpl",
		size:    7515,
		modtime: 1613004120,
		compressed: `
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
`,
	},

	"/templates/hrpc-server-go.htmpl": {
		name:    "hrpc-server-go.htmpl",
		local:   "../templates/hrpc-server-go.htmpl",
		size:    8264,
		modtime: 1612055902,
		compressed: `
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
je47cvxV041+x5/qvDv+pwAAAP//UoD+gUggAAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `../templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"../templates": {
		_escData["/templates/hrpc-client-go.htmpl"],
		_escData["/templates/hrpc-server-echo-go.htmpl"],
		_escData["/templates/hrpc-server-go.htmpl"],
	},
}
