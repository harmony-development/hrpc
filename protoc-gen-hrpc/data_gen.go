// Code generated by "esc -o data_gen.go -pkg main ../templates"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/hrpc-client-go.htmpl": {
		name:    "hrpc-client-go.htmpl",
		local:   "../templates/hrpc-client-go.htmpl",
		size:    5638,
		modtime: 1613010077,
		compressed: `
H4sIAAAAAAAC/+RYW2/UPhZ/76c4RC1KUOp5H5UHaHcBLaUVU8QDQshNTjLWOHZqO+1Wo3z3le1cm7kw
QLVI/z50Ip+Lz+93LnayXsPxLdUI89cQGsWKRZVl7L8QZoxjSc3yrRWST7TACAJSKmlkEEFdH63XoNH8
m3EUtEAIdamYMBkEJ3p2oslSlQlJOENhSC4DCFNUmAG5Kg2TQpN38pomK5pj5ANwPq3TY2awsOEQt1J6
LVivYRzSxJFTZ0UplYFAoJktjSmDbiWXMudIcsmpyIlU+cyBua0y/9BrMjljsjKM90tZYQaemFlWtySR
xSyXinFOZw94q2WywoGWjaBSAx+3jwZ10GB0a9rCFPig0bToFRU5AlmgumeJhwQA0Esu0Sxl2gka4bFC
/UG4JCrUkt9j+k7ePJbY0EmAfBBlZdySo/qJ8VVldlpfVWZkPrSnZYkiXaDpcfl4yCAz+/WvKjM0aHGj
SFtyBo+ejeNVDMf3NvDOU2vZsm7xraCug6ceWDai2Zfz1X/AqKpdmOy3KS/HGtV9V6/domsKy+igL85d
O/S94Lqqp9NYdnvjugZtVJUYWHfs+YaCV7a0iXfXyWwcqL58/mjNmMj7HL1HmqICZ+Sfe9HNzfW1Lf/W
qBV8XUyWmzCzSiTwCR+GkYaV4o1qBK9GGPrgFZpKCXg5FPfSHt7cPr4cQFzX8UitQzqHSvGxzOObD8E+
Ne8wzyGwajoYyxvocwge9FBWD1n4p3ZkY8EyCIU0EEoF4ZI2pb0wCmkBJHJrC5embi0aw+xKKWyLelgX
kd1k2CfOOFRey2P5cOEUw1c9Y34tBlRKqgjG1eXGguXcyS25bvCTS6r0kvJQRVP1zKm+eA2C8Q3uBmUt
GI8hKwz5l907C4NEVjwFS1JBlWGUg8K7CrWZw8lD4GKYblgfTd3fdfG6ov6ED5+9ozC4vlrcBH7bhZ8z
YXCi57PZiZ61Z+kghaSdV57SurZK7XMQN/1HugbpVrqOi2Jw55iPwnZX6CiN/ix3Ln+QKKSGifzXiMuk
glUMbjb7Vm3h+XG4LaK7RuHb6ju8hvufS1FjQ96kqc28MCjMqR3oQQwBLUvOEmrvKzN7LwqiDS502aW5
ibP5uZChwrvn4LeU+tfpTTFD5eImb2X6SM651BhOLVNqaIfM36uIrZw3nIed9XOgU0hTj06XUmg8DJ50
49XG/PLpeFlPtW2o7Tj5IopmoHjo3tNzIKzanfiv42x28EHGdqejzQb2PsQ1uslPRbppwjdHwvQ4iJ5p
8idLKuCQ8V9SwZIwqAQrSo4FCoPpk248EPEGsL+NNYKQCbDgzk4nsF1BwdnpDuzb8Ve2oCvFyZfPH9eL
ZIkFzttx01x7Yngv7Sx4OvljuKZmOYfg8INlcHXobnox/OimQvf2RC4woxU3F4xyVMT+hBVZuHtlGMXj
Af77HeX+oVIb2mTDxeHchlrQFY7LrivHTSNki02Xrmi6US5dwYTRFgB+7ibdvN2oVOhcj7f+9t2e21vU
9+3ZHqfbpfbvRwwFak1z7E8yN+ov/eqGw+HQ7I1fFiwBFmm0V/dWIV3t1Kp3Sh2fZ6ctvqPDvNTb0rSb
U40cR29/EwaoRhtaDHJl2T47tXHO97H8Qq5+gl7fKHs42yk2S3ss+U8c4bTyd5luPk8dVOf1z1bS70N1
rX526oPbnS+NIu0TxsT5X5Ov0U1t/Gpkg/7bOPc1kpCvihlsR0x/lLxlgqrHy3YgWXD/BwQHDoqjnxod
zRnGxLm7DJzvu7aJdM8Htf8FAAD//4pKHswGFgAA
`,
	},

	"/templates/hrpc-server-echo-go.htmpl": {
		name:    "hrpc-server-echo-go.htmpl",
		local:   "../templates/hrpc-server-echo-go.htmpl",
		size:    9211,
		modtime: 1613011083,
		compressed: `
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
`,
	},

	"/templates/hrpc-server-go.htmpl": {
		name:    "hrpc-server-go.htmpl",
		local:   "../templates/hrpc-server-go.htmpl",
		size:    8256,
		modtime: 1613010077,
		compressed: `
H4sIAAAAAAAC/+xZW2/bOhJ+969gjexCChR6d7FP2eahaXfbYrdNkAv2oSgOGGksEZZIhaTi5hj67wck
RZm62UlOTnNufqlLDsmZb775OHQ2GyRB/YfmwEgBKEh5+x2juQRxB2IeorqezTYbdEAVFOj4BGEzUpJ4
RVJAmw1a0hxKorJTIgHhs1JRziR+z88bE21Oi5ILheYxZwq+qXk7wEAtMqXK7QjlC8orRfPtUMp5mgNO
eU5YirlIF6Xgit9US/vFs6Qqq25wzItFygXNc7JYw43k8QrUg/ZT9yXIRQIyFrRUXJQ3o5tnRBSc3R8l
cAc5LwtgapGJMl40sDWQmYVSo8ZgLUE5MAVhKSB8CeKOxhYhhBDaznwClfGknWgmDwTIj0xvFwiQPL+D
5D2/ui+hyQ5G+CMrK2WGTOZ6i88qtXP1WaU6y/31pCyBJZegtnFZf7CX6P32Z5XyF7i4gSUOHO+rReNg
FaGDO+14u5Nb6VKj41uhup53drgjwhCUsJhC8lkz24Za1+jQzzHWzH/XDpxrNiCTtGCfWTibLSsWI8qo
CkK0MW4lRBHtb1Md7/R/3cnWcRBCGxje4WtWECEzkgd6YTTlc2hDXprFr04Qo3lznv6UhNE4ACGsWT2z
ENJlh2e26M/+i5So3MAA8DFiHmhmt/XfDhq50JSSpaBMLdH8L/LS1gAKEhCwRFgHEW75pEvMW1zXiDIF
YkliaML5VdcBXaKAcYUCLlCQEfk2p8DUpRJACoRDM2YRaMfCrhPNRh46qK6DWH1DjTzit/bfCAl02MaL
P76r6whlQBIQEmnVxB/Mf0ITSdna6hqzxpopIARvSOGKLZdg4iAsGfO3CXAYXPiMcfBKoTgjrOc1mopx
EMDTPKGse+rz+MOSETGzZTjJaLe+Uam2HAaBGPno6pXd5QGKNWoYbgk91C738TSssJvoAdwph4co2e64
ws5eU9o2oXHus8Wyno1kxAlO9/QPhCU5CCSVqGLlHWaLoeN6O/dvXUtupcYuaCssQmvLjwuQJWcS/i+o
8nlyzYi4PxeAbI+Am22uBGFyyUUBojWtylRokqG2ecHXzZDPKpO8z7Ceii2QnSiMHDzO+dBUwzhwW8QE
qEow9NcHmG4BPkYy6gz72B57rnatHDTHI9gMCXMBJDmtlksQl/RHOEbo73/7xz+jgZmJ1rcbmtVRj2R+
DoLscJJgIboE5XIfyOns+wWY4ZYtJ0iOnDedlxBd8EqBDEL05atUgrJ0mCo3s+lL6KRKuc984R4DXhuH
XYPgfNFG7vs86h/i6eMUnrviM/z5cHV1HoySNkICbtFhM3NbgVQ+tHJNVZzpG/MWX1/8D58Tlfnzv/Pm
I9avtCck8bhXxDc8uY+c+NsHG9bV9ibPDbSnPLnvqnQCSxDIzeG3OZcQPE7/M+yLhJavCK3DgZklee+K
6JPw6Xm0Rxhi2XvXvu8Cv6No23X/mhzekhZFf7MXAoSyO74Ck0xzM8QjPRzcNv5/AilJClO9aM/I9p8j
zjdalGHLWOzRLYjNeTg47IPaHhruDGfpS+gkfC7qE8862NuzTD7QIrfhTt90q76tHLvAlEyDdBB2GWGR
cF3nYCstfFG3C/vUsEtPvxCf1o3DQYjfJEkwN7ExdaSraR6hOSnLnMZEUc7MDyfz7iE/RE3BrLER9cBF
Gs6+WzzDbyMvj+eSU/0IaLuxgVZp2R9R+54mUaNmBVlBMHziTAgSo/ngdh55XP221d4C87MkmrJwTxfz
XSPitocY5rp9tPYKZS3b9GXY9dCucQ7WRmMi7fULpSjl9t4ZuyceXAD6U8hUdqH58vXmXvWFY9+ZphXl
YmKmkajCu+L0mWtpiqK5+YJwcu0+WP1PbCpHhxXutLsRQFaTFvXkjAHs9ZELZvaw1fVIdL1n91AN1tKq
uQNo+4Iz8tB2DDZjm3okZ9M5kZBD5x3/ZAq1um5/w+ArndvXRxqo410pfcVXe3I5Ugc7aqKzffPXl70i
tl/QbFR6w+ckaF8gx614pcJfCiGmWazDmmLAiGB30l3IdJttXqkXS/baV5TP8E3Zh61XL6dUd6tNwTxP
Gh9dIo/L/278vxtL9nTMhUz/RPMRRB1053uw05R2veC//qBoPvCCnfWv21m38Rp5NPcekZSZv2p034/j
r5pu9Dt+ovPu+J8CAAD//6+DjS9AIAAA
`,
	},

	"/templates": {
		name:  "templates",
		local: `../templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"../templates": {
		_escData["/templates/hrpc-client-go.htmpl"],
		_escData["/templates/hrpc-server-echo-go.htmpl"],
		_escData["/templates/hrpc-server-go.htmpl"],
	},
}
