{{ $base := (trimSuffix (filepathBase .Name) ".proto") }}
{{ setFilename (sprintf "%s/%s.hrpc.client.go" (deref .Options.GoPackage) $base) }}

{{ $item := . }}

package {{ filepathBase .Options.GoPackage }}

import "net/http"
import "google.golang.org/protobuf/proto"
import "io/ioutil"
import "fmt"
import "github.com/gorilla/websocket"
import "net/url"
import "bytes"

{{ $imports := newset }}

{{ range .Service }}

    {{ range .Method }}

        {{ $resIn := (resolvedGoType $item . .InputType ) }}
        {{ $resOut := (resolvedGoType $item . .OutputType ) }}

        {{ appendSet $imports $resIn.Package }}
        {{ appendSet $imports $resOut.Package }}

    {{ end }}

{{ end }}

{{ range $k, $v := $imports }}

    import "{{ $k }}"

{{ end }}

{{ if .Service }}
{{ setOK true }}
{{ end }}

{{ range .Service }}

    {{ $serv := . }}
    {{ $sname := (sprintf "%sClient" (deref .Name)) }}

    type {{ $sname }} struct {
        client *http.Client
        serverURL string

        Header http.Header
        HTTPProto string
        WSProto string
    }

    func New{{ $sname }}(url string) *{{ $sname }} {
        return &{{ $sname }}{
            client:    &http.Client{},
            serverURL: url,
            Header: http.Header{},
            HTTPProto: "https",
            WSProto: "wss",
        }
    }

    {{ range .Method }}

        {{ $resIn := (resolvedGoType $item . .InputType ) }}
        {{ $resOut := (resolvedGoType $item . .OutputType ) }}

        {{ appendSet $imports $resIn.Package }}
        {{ appendSet $imports $resOut.Package }}

        {{ if (not (or (hasClientStream .) (hasServerStream .)) ) }}
            func (client *{{ $sname }}) {{ (deref .Name ) }}(r *{{ $resIn.ID }}) (*{{ $resOut.ID }}, error) {
                input, err := proto.Marshal(r)
                if err != nil {
                    return nil, fmt.Errorf("could not martial request: %w", err)
                }
                req, err := http.NewRequest("POST", fmt.Sprintf("%s://%s/{{ $item.Package }}.{{ $serv.Name }}/{{ .Name }}", client.HTTPProto, client.serverURL), bytes.NewReader(input))
                if err != nil {
                    return nil, fmt.Errorf("error creating request: %w", err)
                }
                for k, v := range client.Header {
                    req.Header[k] = v
                }
                req.Header.Add("content-type", "application/octet-stream")
                resp, err := client.client.Do(req)
                if err != nil {
                    return nil, fmt.Errorf("error posting request: %w", err)
                }
                defer resp.Body.Close()
                data, err := ioutil.ReadAll(resp.Body)
                if err != nil {
                    return nil, fmt.Errorf("error reading response: %w", err)
                }
                output := &{{ $resOut.ID }}{}
                err = proto.Unmarshal(data, output)
                if err != nil {
                    return nil, fmt.Errorf("error unmarshalling response: %w", err)
                }
                return output, nil
            }
        {{ else if (and (hasServerStream .) (not (hasClientStream .))) }}
            func (client *{{ $sname }}) {{ (deref .Name ) }}(r *{{ $resIn.ID }}) (chan *{{ $resOut.ID }}, error) {
                panic("unimplemented")
            }
        {{ else if (and (hasServerStream .) (hasClientStream .)) }}
            func (client *{{ $sname }}) {{ (deref .Name ) }}() (in chan<- *{{ $resIn.ID }}, out <-chan *{{ $resOut.ID }}, err error) {
                u := url.URL{Scheme: client.WSProto, Host: client.serverURL, Path: "/{{ $item.Package }}.{{ $serv.Name }}/{{ .Name }}"}

                c, _, err := websocket.DefaultDialer.Dial(u.String(), client.Header)
                if err != nil {
                    return nil, nil, err
                }

                inC := make(chan *{{ $resIn.ID }})
                outC := make(chan *{{ $resOut.ID }})

                go func() {
                    defer c.Close()

                    msgs := make(chan []byte)

                    go func() {
                        for {
                            _, message, err := c.ReadMessage()
                            if err != nil {
                                close(msgs)
                                break
                            }
                            msgs <- message
                        }
                    }()

                    for {
                        select {
                        case msg, ok := <-msgs:
                            if !ok {
                                return
                            }

                            thing := new({{ $resOut.ID }})
                            err = proto.Unmarshal(msg, thing)
                            if err != nil {
                                return
                            }

                            outC <- thing
                        case send, ok := <-inC:
                            if !ok {
                                return
                            }

                            data, err := proto.Marshal(send)
                            if err != nil {
                                return
                            }

                            err = c.WriteMessage(websocket.BinaryMessage, data)
                            if err != nil {
                                return
                            }
                        }
                    }
                }()

                return inC, outC, nil
            }
        {{ end }}

    {{ end }}

{{ end }}

